
volume_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800aeb8  0800aeb8  0001aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff0  0800aff0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aff0  0800aff0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aff0  0800aff0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff0  0800aff0  0001aff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aff4  0800aff4  0001aff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  200001e4  0800b1dc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001460  0800b1dc  00021460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ac  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cc  00000000  00000000  000328b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00035a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00036b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b165  00000000  00000000  00037ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140a3  00000000  00000000  00052c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e91f  00000000  00000000  00066cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f560f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e94  00000000  00000000  000f5660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aea0 	.word	0x0800aea0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800aea0 	.word	0x0800aea0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__aeabi_f2iz>:
 8000980:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000984:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000988:	d30f      	bcc.n	80009aa <__aeabi_f2iz+0x2a>
 800098a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800098e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000992:	d90d      	bls.n	80009b0 <__aeabi_f2iz+0x30>
 8000994:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a0:	fa23 f002 	lsr.w	r0, r3, r2
 80009a4:	bf18      	it	ne
 80009a6:	4240      	negne	r0, r0
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr
 80009b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009b4:	d101      	bne.n	80009ba <__aeabi_f2iz+0x3a>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d105      	bne.n	80009c6 <__aeabi_f2iz+0x46>
 80009ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009be:	bf08      	it	eq
 80009c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009d0:	f001 fa26 	bl	8001e20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009d4:	f000 f840 	bl	8000a58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009d8:	f000 f9a4 	bl	8000d24 <MX_GPIO_Init>
	MX_TIM2_Init();
 80009dc:	f000 f90a 	bl	8000bf4 <MX_TIM2_Init>
	MX_TIM1_Init();
 80009e0:	f000 f894 	bl	8000b0c <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 80009e4:	f000 fd98 	bl	8001518 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	TIM1->CCR1 = 50;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <main+0x78>)
 80009ea:	2232      	movs	r2, #50	; 0x32
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
	//Frequency measurement on TIM1_CHANNEL_1
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009ee:	2100      	movs	r1, #0
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <main+0x7c>)
 80009f2:	f004 f85f 	bl	8004ab4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009f6:	2100      	movs	r1, #0
 80009f8:	4814      	ldr	r0, [pc, #80]	; (8000a4c <main+0x80>)
 80009fa:	f003 ff61 	bl	80048c0 <HAL_TIM_PWM_Start>

	//Initialize ALL servo-motor positions to closed
	htim2.Instance->CCR1 = POS_SILENCE;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <main+0x80>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//If switch is in calibrating position, then calibrate antenna.
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 8000a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <main+0x84>)
 8000a0c:	f001 fd20 	bl	8002450 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d102      	bne.n	8000a1c <main+0x50>
				== GPIO_PIN_SET) {
			vol_calibrate_antenna();
 8000a16:	f000 f9dd 	bl	8000dd4 <vol_calibrate_antenna>
 8000a1a:	e7f4      	b.n	8000a06 <main+0x3a>
		}
		//Play instrument
		else {
			HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <main+0x84>)
 8000a24:	f001 fd2b 	bl	800247e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, B13_RED_VOL_LED_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <main+0x84>)
 8000a30:	f001 fd25 	bl	800247e <HAL_GPIO_WritePin>
			if (vol_finished_one_measurement == 1) {
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <main+0x88>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d1e4      	bne.n	8000a06 <main+0x3a>
				vol_play();
 8000a3c:	f000 fa3e 	bl	8000ebc <vol_play>
		if (HAL_GPIO_ReadPin(B12_SWITCH_GPIO_Port, B12_SWITCH_Pin)
 8000a40:	e7e1      	b.n	8000a06 <main+0x3a>
 8000a42:	bf00      	nop
 8000a44:	40012c00 	.word	0x40012c00
 8000a48:	20000200 	.word	0x20000200
 8000a4c:	20000248 	.word	0x20000248
 8000a50:	40010c00 	.word	0x40010c00
 8000a54:	200002a4 	.word	0x200002a4

08000a58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a62:	2228      	movs	r2, #40	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f009 fa22 	bl	8009eb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a96:	2301      	movs	r3, #1
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aa4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 f9c0 	bl	8003e34 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x66>
		Error_Handler();
 8000aba:	f000 fb01 	bl	80010c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ace:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fc2c 	bl	8004338 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x92>
		Error_Handler();
 8000ae6:	f000 faeb 	bl	80010c0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000aea:	2310      	movs	r3, #16
 8000aec:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fd85 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xac>
		Error_Handler();
 8000b00:	f000 fade 	bl	80010c0 <Error_Handler>
	}
}
 8000b04:	bf00      	nop
 8000b06:	3750      	adds	r7, #80	; 0x50
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b38:	4a2d      	ldr	r2, [pc, #180]	; (8000bf0 <MX_TIM1_Init+0xe4>)
 8000b3a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65536 - 1;
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b64:	f003 fe04 	bl	8004770 <HAL_TIM_Base_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x66>
		Error_Handler();
 8000b6e:	f000 faa7 	bl	80010c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481b      	ldr	r0, [pc, #108]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b80:	f004 faf8 	bl	8005174 <HAL_TIM_ConfigClockSource>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0x82>
		Error_Handler();
 8000b8a:	f000 fa99 	bl	80010c0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8000b8e:	4817      	ldr	r0, [pc, #92]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000b90:	f003 ff38 	bl	8004a04 <HAL_TIM_IC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x92>
		Error_Handler();
 8000b9a:	f000 fa91 	bl	80010c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	480f      	ldr	r0, [pc, #60]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000bae:	f004 ffbf 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000bb8:	f000 fa82 	bl	80010c0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_TIM1_Init+0xe0>)
 8000bd4:	f004 f97c 	bl	8004ed0 <HAL_TIM_IC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0xd6>
		Error_Handler();
 8000bde:	f000 fa6f 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000200 	.word	0x20000200
 8000bf0:	40012c00 	.word	0x40012c00

08000bf4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	615a      	str	r2, [r3, #20]
 8000c22:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c24:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1440 - 1;
 8000c2c:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c2e:	f240 529f 	movw	r2, #1439	; 0x59f
 8000c32:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000c3a:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c40:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c4e:	4834      	ldr	r0, [pc, #208]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c50:	f003 fd8e 	bl	8004770 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000c5a:	f000 fa31 	bl	80010c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	482d      	ldr	r0, [pc, #180]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c6c:	f004 fa82 	bl	8005174 <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x86>
		Error_Handler();
 8000c76:	f000 fa23 	bl	80010c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000c7a:	4829      	ldr	r0, [pc, #164]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c7c:	f003 fdc7 	bl	800480e <HAL_TIM_PWM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0x96>
		Error_Handler();
 8000c86:	f000 fa1b 	bl	80010c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4619      	mov	r1, r3
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000c9a:	f004 ff49 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000ca4:	f000 fa0c 	bl	80010c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000cc0:	f004 f99a 	bl	8004ff8 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000cca:	f000 f9f9 	bl	80010c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000cd6:	f004 f98f 	bl	8004ff8 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8000ce0:	f000 f9ee 	bl	80010c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000cec:	f004 f984 	bl	8004ff8 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 8000cf6:	f000 f9e3 	bl	80010c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000d02:	f004 f979 	bl	8004ff8 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x11c>
			!= HAL_OK) {
		Error_Handler();
 8000d0c:	f000 f9d8 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <MX_TIM2_Init+0x12c>)
 8000d12:	f000 fa97 	bl	8001244 <HAL_TIM_MspPostInit>

}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000248 	.word	0x20000248

08000d24 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0320 	and.w	r3, r3, #32
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_GPIO_Init+0xa8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, B13_RED_VOL_LED_Pin | B14_GREEN_VOL_LED_Pin,
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d86:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0xac>)
 8000d88:	f001 fb79 	bl	800247e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B12_SWITCH_Pin */
	GPIO_InitStruct.Pin = B12_SWITCH_Pin;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B12_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <MX_GPIO_Init+0xac>)
 8000da2:	f001 f9d1 	bl	8002148 <HAL_GPIO_Init>

	/*Configure GPIO pins : B13_RED_VOL_LED_Pin B14_GREEN_VOL_LED_Pin */
	GPIO_InitStruct.Pin = B13_RED_VOL_LED_Pin | B14_GREEN_VOL_LED_Pin;
 8000da6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000daa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_GPIO_Init+0xac>)
 8000dc0:	f001 f9c2 	bl	8002148 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <vol_calibrate_antenna>:

/* USER CODE BEGIN 4 */

void vol_calibrate_antenna() {
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	const uint32_t TOLERANCE = 300;
 8000dda:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000dde:	607b      	str	r3, [r7, #4]
	if (is_in_range(VOL_LOWEST_FREQUENCY - TOLERANCE,
 8000de0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	1ad4      	subs	r4, r2, r3
 8000de8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	18d5      	adds	r5, r2, r3
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <vol_calibrate_antenna+0x90>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb0d 	bl	8000414 <__aeabi_f2d>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4620      	mov	r0, r4
 8000e02:	f000 f835 	bl	8000e70 <is_in_range>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d115      	bne.n	8000e38 <vol_calibrate_antenna+0x64>
			VOL_LOWEST_FREQUENCY + TOLERANCE, vol_frequency) == true) {
		current_pos = POS_SILENCE;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <vol_calibrate_antenna+0x94>)
 8000e0e:	2228      	movs	r2, #40	; 0x28
 8000e10:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e18:	4814      	ldr	r0, [pc, #80]	; (8000e6c <vol_calibrate_antenna+0x98>)
 8000e1a:	f001 fb30 	bl	800247e <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000e1e:	200a      	movs	r0, #10
 8000e20:	f001 f860 	bl	8001ee4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, B13_RED_VOL_LED_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	4810      	ldr	r0, [pc, #64]	; (8000e6c <vol_calibrate_antenna+0x98>)
 8000e2c:	f001 fb27 	bl	800247e <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f001 f857 	bl	8001ee4 <HAL_Delay>
		HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOB, B13_RED_VOL_LED_Pin, GPIO_PIN_SET);
		HAL_Delay(10);
	}

}
 8000e36:	e011      	b.n	8000e5c <vol_calibrate_antenna+0x88>
		HAL_GPIO_WritePin(GPIOB, B14_GREEN_VOL_LED_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <vol_calibrate_antenna+0x98>)
 8000e40:	f001 fb1d 	bl	800247e <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000e44:	200a      	movs	r0, #10
 8000e46:	f001 f84d 	bl	8001ee4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, B13_RED_VOL_LED_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <vol_calibrate_antenna+0x98>)
 8000e52:	f001 fb14 	bl	800247e <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000e56:	200a      	movs	r0, #10
 8000e58:	f001 f844 	bl	8001ee4 <HAL_Delay>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bdb0      	pop	{r4, r5, r7, pc}
 8000e64:	200002a0 	.word	0x200002a0
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <is_in_range>:
BOOLEAN is_in_range(int lower_limit, int upper_limit, int number) {
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	return (lower_limit <= number && number <= upper_limit);
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dc05      	bgt.n	8000e90 <is_in_range+0x20>
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dc01      	bgt.n	8000e90 <is_in_range+0x20>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <is_in_range+0x22>
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <vol_play_hw>:
void vol_play_hw(VOL_SERVO_POSITION vol_position) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCR1 = vol_position;
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <vol_play_hw+0x1c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000248 	.word	0x20000248

08000ebc <vol_play>:
void vol_play() {
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	const uint32_t STEP_SIZE = 600;
 8000ec2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000ec6:	607b      	str	r3, [r7, #4]
	if (is_in_range(VOL_LOWEST_FREQUENCY, VOL_LOWEST_FREQUENCY + STEP_SIZE,
 8000ec8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ecc:	461c      	mov	r4, r3
 8000ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <vol_play+0xf8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fd4f 	bl	8000980 <__aeabi_f2iz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff ffc1 	bl	8000e70 <is_in_range>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d103      	bne.n	8000efc <vol_play+0x40>
			vol_frequency) == true) {
		current_pos = POS_SILENCE;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <vol_play+0xfc>)
 8000ef6:	2228      	movs	r2, #40	; 0x28
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e051      	b.n	8000fa0 <vol_play+0xe4>
	} else if (is_in_range(VOL_LOWEST_FREQUENCY,
 8000efc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f00:	461c      	mov	r4, r3
			VOL_LOWEST_FREQUENCY + (2 * STEP_SIZE), vol_frequency) == true) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f0a:	4413      	add	r3, r2
	} else if (is_in_range(VOL_LOWEST_FREQUENCY,
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <vol_play+0xf8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fd34 	bl	8000980 <__aeabi_f2iz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff ffa6 	bl	8000e70 <is_in_range>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d103      	bne.n	8000f32 <vol_play+0x76>
		current_pos = POS_PLAY_1;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <vol_play+0xfc>)
 8000f2c:	2219      	movs	r2, #25
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e036      	b.n	8000fa0 <vol_play+0xe4>
	} else if (is_in_range(VOL_LOWEST_FREQUENCY,
 8000f32:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f36:	461c      	mov	r4, r3
			VOL_LOWEST_FREQUENCY + (3 * STEP_SIZE), vol_frequency) == true) {
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f44:	4413      	add	r3, r2
	} else if (is_in_range(VOL_LOWEST_FREQUENCY,
 8000f46:	461d      	mov	r5, r3
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <vol_play+0xf8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fd17 	bl	8000980 <__aeabi_f2iz>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4629      	mov	r1, r5
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff ff89 	bl	8000e70 <is_in_range>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d103      	bne.n	8000f6c <vol_play+0xb0>
		current_pos = POS_PLAY_2;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <vol_play+0xfc>)
 8000f66:	221c      	movs	r2, #28
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e019      	b.n	8000fa0 <vol_play+0xe4>
	} else if (is_in_range(VOL_LOWEST_FREQUENCY,
 8000f6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f70:	461c      	mov	r4, r3
			VOL_LOWEST_FREQUENCY + (4 * STEP_SIZE), vol_frequency) == true) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f7a:	4413      	add	r3, r2
	} else if (is_in_range(VOL_LOWEST_FREQUENCY,
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <vol_play+0xf8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fcfc 	bl	8000980 <__aeabi_f2iz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff ff6e 	bl	8000e70 <is_in_range>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <vol_play+0xe4>
		current_pos = POS_PLAY_3;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <vol_play+0xfc>)
 8000f9c:	221f      	movs	r2, #31
 8000f9e:	701a      	strb	r2, [r3, #0]
	}
	vol_play_hw(current_pos);
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <vol_play+0xfc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff79 	bl	8000e9c <vol_play_hw>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200002a0 	.word	0x200002a0
 8000fb8:	20000000 	.word	0x20000000

08000fbc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a34      	ldr	r2, [pc, #208]	; (8001098 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d103      	bne.n	8000fd4 <HAL_TIM_IC_CaptureCallback+0x18>
		vol_current_timer = 0;
 8000fcc:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e00a      	b.n	8000fea <HAL_TIM_IC_CaptureCallback+0x2e>
	} else if (htim == &htim2) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d103      	bne.n	8000fe4 <HAL_TIM_IC_CaptureCallback+0x28>
		vol_current_timer = 1;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e002      	b.n	8000fea <HAL_TIM_IC_CaptureCallback+0x2e>
	} else {
		vol_current_timer = 2;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7f1b      	ldrb	r3, [r3, #28]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d14e      	bne.n	8001090 <HAL_TIM_IC_CaptureCallback+0xd4>

		if (vol_is_first_captured == 0) // if the first rising edge is not captured
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10d      	bne.n	8001016 <HAL_TIM_IC_CaptureCallback+0x5a>
				{
			vol_finished_one_measurement = 0;
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
			vol_IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f004 f97a 	bl	80052fc <HAL_TIM_ReadCapturedValue>
 8001008:	4603      	mov	r3, r0
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xf0>)
 800100c:	6013      	str	r3, [r2, #0]
			vol_is_first_captured = 1;  // set the first captured as true
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
			vol_is_first_captured = 0; // set it back to false

			vol_finished_one_measurement = 1;
		}
	}
}
 8001014:	e03c      	b.n	8001090 <HAL_TIM_IC_CaptureCallback+0xd4>
			vol_IC_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001016:	2100      	movs	r1, #0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f004 f96f 	bl	80052fc <HAL_TIM_ReadCapturedValue>
 800101e:	4603      	mov	r3, r0
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001022:	6013      	str	r3, [r2, #0]
			if (vol_IC_val2 > vol_IC_val1) {
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xf0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d907      	bls.n	8001040 <HAL_TIM_IC_CaptureCallback+0x84>
				vol_period_ticks = vol_IC_val2 - vol_IC_val1;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e00d      	b.n	800105c <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (vol_IC_val1 > vol_IC_val2) {
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d907      	bls.n	800105c <HAL_TIM_IC_CaptureCallback+0xa0>
				vol_period_ticks = (0xffffffff - vol_IC_val1) + vol_IC_val2; //0xffffffff = 4 294 967 295
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	3b01      	subs	r3, #1
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800105a:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800105e:	60fb      	str	r3, [r7, #12]
			vol_frequency = refClock / vol_period_ticks;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fae3 	bl	8000630 <__aeabi_ui2f>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff fbea 	bl	8000848 <__aeabi_fdiv>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x100>)
 800107a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
			vol_is_first_captured = 0; // set it back to false
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
			vol_finished_one_measurement = 1;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xec>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000200 	.word	0x20000200
 800109c:	200002a5 	.word	0x200002a5
 80010a0:	20000248 	.word	0x20000248
 80010a4:	2000029c 	.word	0x2000029c
 80010a8:	200002a4 	.word	0x200002a4
 80010ac:	20000290 	.word	0x20000290
 80010b0:	20000294 	.word	0x20000294
 80010b4:	20000298 	.word	0x20000298
 80010b8:	4c895440 	.word	0x4c895440
 80010bc:	200002a0 	.word	0x200002a0

080010c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_MspInit+0x7c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_MspInit+0x7c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_MspInit+0x7c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_MspInit+0x7c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <HAL_MspInit+0x7c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_MspInit+0x7c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2005      	movs	r0, #5
 8001108:	f000 ffe7 	bl	80020da <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800110c:	2005      	movs	r0, #5
 800110e:	f001 f800 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2005      	movs	r0, #5
 8001118:	f000 ffdf 	bl	80020da <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800111c:	2005      	movs	r0, #5
 800111e:	f000 fff8 	bl	8002112 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_MspInit+0x80>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_MspInit+0x80>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a33      	ldr	r2, [pc, #204]	; (8001238 <HAL_TIM_Base_MspInit+0xe8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d145      	bne.n	80011fc <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a31      	ldr	r2, [pc, #196]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 8001176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a2b      	ldr	r2, [pc, #172]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = A8_TIM1_CH1_VOL_INPUT_Pin;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(A8_TIM1_CH1_VOL_INPUT_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4619      	mov	r1, r3
 80011b4:	4822      	ldr	r0, [pc, #136]	; (8001240 <HAL_TIM_Base_MspInit+0xf0>)
 80011b6:	f000 ffc7 	bl	8002148 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2018      	movs	r0, #24
 80011c0:	f000 ff8b 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80011c4:	2018      	movs	r0, #24
 80011c6:	f000 ffa4 	bl	8002112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2019      	movs	r0, #25
 80011d0:	f000 ff83 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011d4:	2019      	movs	r0, #25
 80011d6:	f000 ff9c 	bl	8002112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	201a      	movs	r0, #26
 80011e0:	f000 ff7b 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80011e4:	201a      	movs	r0, #26
 80011e6:	f000 ff94 	bl	8002112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	201b      	movs	r0, #27
 80011f0:	f000 ff73 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011f4:	201b      	movs	r0, #27
 80011f6:	f000 ff8c 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fa:	e018      	b.n	800122e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d113      	bne.n	800122e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_TIM_Base_MspInit+0xec>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	201c      	movs	r0, #28
 8001224:	f000 ff59 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001228:	201c      	movs	r0, #28
 800122a:	f000 ff72 	bl	8002112 <HAL_NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40012c00 	.word	0x40012c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40010800 	.word	0x40010800

08001244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001262:	d117      	bne.n	8001294 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_TIM_MspPostInit+0x58>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_TIM_MspPostInit+0x58>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_MspPostInit+0x58>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800127c:	230f      	movs	r3, #15
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <HAL_TIM_MspPostInit+0x5c>)
 8001290:	f000 ff5a 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010800 	.word	0x40010800

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 fddf 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001306:	f001 fa03 	bl	8002710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000f40 	.word	0x20000f40

08001314 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800131a:	f001 f9f9 	bl	8002710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000f40 	.word	0x20000f40

08001328 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM1_BRK_IRQHandler+0x10>)
 800132e:	f003 fcc7 	bl	8004cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000200 	.word	0x20000200

0800133c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM1_UP_IRQHandler+0x10>)
 8001342:	f003 fcbd 	bl	8004cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000200 	.word	0x20000200

08001350 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001356:	f003 fcb3 	bl	8004cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000200 	.word	0x20000200

08001364 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM1_CC_IRQHandler+0x10>)
 800136a:	f003 fca9 	bl	8004cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000200 	.word	0x20000200

08001378 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM2_IRQHandler+0x10>)
 800137e:	f003 fc9f 	bl	8004cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000248 	.word	0x20000248

0800138c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
	}

return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
	}
	return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001424:	605a      	str	r2, [r3, #4]
	return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
	return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f008 fce4 	bl	8009e5c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20005000 	.word	0x20005000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	200002a8 	.word	0x200002a8
 80014c8:	20001460 	.word	0x20001460

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014f2:	f000 fc8f 	bl	8001e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f008 fcb7 	bl	8009e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fa67 	bl	80009cc <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001508:	0800aff8 	.word	0x0800aff8
  ldr r2, =_sbss
 800150c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001510:	20001460 	.word	0x20001460

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800151c:	2200      	movs	r2, #0
 800151e:	4912      	ldr	r1, [pc, #72]	; (8001568 <MX_USB_DEVICE_Init+0x50>)
 8001520:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_USB_DEVICE_Init+0x54>)
 8001522:	f007 fbe7 	bl	8008cf4 <USBD_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800152c:	f7ff fdc8 	bl	80010c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001530:	490f      	ldr	r1, [pc, #60]	; (8001570 <MX_USB_DEVICE_Init+0x58>)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_USB_DEVICE_Init+0x54>)
 8001534:	f007 fc16 	bl	8008d64 <USBD_RegisterClass>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800153e:	f7ff fdbf 	bl	80010c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001542:	490c      	ldr	r1, [pc, #48]	; (8001574 <MX_USB_DEVICE_Init+0x5c>)
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <MX_USB_DEVICE_Init+0x54>)
 8001546:	f007 fb69 	bl	8008c1c <USBD_CDC_RegisterInterface>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8001550:	f7ff fdb6 	bl	80010c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USB_DEVICE_Init+0x54>)
 8001556:	f007 fc2b 	bl	8008db0 <USBD_Start>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8001560:	f7ff fdae 	bl	80010c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000014 	.word	0x20000014
 800156c:	200002ac 	.word	0x200002ac
 8001570:	2000007c 	.word	0x2000007c
 8001574:	20000004 	.word	0x20000004

08001578 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	4905      	ldr	r1, [pc, #20]	; (8001594 <CDC_Init_FS+0x1c>)
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <CDC_Init_FS+0x20>)
 8001582:	f007 fb61 	bl	8008c48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <CDC_Init_FS+0x24>)
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <CDC_Init_FS+0x20>)
 800158a:	f007 fb76 	bl	8008c7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800158e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000958 	.word	0x20000958
 8001598:	200002ac 	.word	0x200002ac
 800159c:	20000570 	.word	0x20000570

080015a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80015a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	4613      	mov	r3, r2
 80015be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b23      	cmp	r3, #35	; 0x23
 80015c4:	d84a      	bhi.n	800165c <CDC_Control_FS+0xac>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <CDC_Control_FS+0x1c>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	0800165d 	.word	0x0800165d
 80015d0:	0800165d 	.word	0x0800165d
 80015d4:	0800165d 	.word	0x0800165d
 80015d8:	0800165d 	.word	0x0800165d
 80015dc:	0800165d 	.word	0x0800165d
 80015e0:	0800165d 	.word	0x0800165d
 80015e4:	0800165d 	.word	0x0800165d
 80015e8:	0800165d 	.word	0x0800165d
 80015ec:	0800165d 	.word	0x0800165d
 80015f0:	0800165d 	.word	0x0800165d
 80015f4:	0800165d 	.word	0x0800165d
 80015f8:	0800165d 	.word	0x0800165d
 80015fc:	0800165d 	.word	0x0800165d
 8001600:	0800165d 	.word	0x0800165d
 8001604:	0800165d 	.word	0x0800165d
 8001608:	0800165d 	.word	0x0800165d
 800160c:	0800165d 	.word	0x0800165d
 8001610:	0800165d 	.word	0x0800165d
 8001614:	0800165d 	.word	0x0800165d
 8001618:	0800165d 	.word	0x0800165d
 800161c:	0800165d 	.word	0x0800165d
 8001620:	0800165d 	.word	0x0800165d
 8001624:	0800165d 	.word	0x0800165d
 8001628:	0800165d 	.word	0x0800165d
 800162c:	0800165d 	.word	0x0800165d
 8001630:	0800165d 	.word	0x0800165d
 8001634:	0800165d 	.word	0x0800165d
 8001638:	0800165d 	.word	0x0800165d
 800163c:	0800165d 	.word	0x0800165d
 8001640:	0800165d 	.word	0x0800165d
 8001644:	0800165d 	.word	0x0800165d
 8001648:	0800165d 	.word	0x0800165d
 800164c:	0800165d 	.word	0x0800165d
 8001650:	0800165d 	.word	0x0800165d
 8001654:	0800165d 	.word	0x0800165d
 8001658:	0800165d 	.word	0x0800165d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800165c:	bf00      	nop
  }

  return (USBD_OK);
 800165e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <CDC_Receive_FS+0x24>)
 800167a:	f007 fafe 	bl	8008c7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <CDC_Receive_FS+0x24>)
 8001680:	f007 fb0e 	bl	8008ca0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8001684:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002ac 	.word	0x200002ac

08001694 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2212      	movs	r2, #18
 80016a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000030 	.word	0x20000030

080016b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2204      	movs	r2, #4
 80016c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80016ca:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000044 	.word	0x20000044

080016dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <USBD_FS_ProductStrDescriptor+0x34>)
 80016f2:	4808      	ldr	r0, [pc, #32]	; (8001714 <USBD_FS_ProductStrDescriptor+0x38>)
 80016f4:	f008 fad4 	bl	8009ca0 <USBD_GetString>
 80016f8:	e004      	b.n	8001704 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4904      	ldr	r1, [pc, #16]	; (8001710 <USBD_FS_ProductStrDescriptor+0x34>)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <USBD_FS_ProductStrDescriptor+0x38>)
 8001700:	f008 face 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000d40 	.word	0x20000d40
 8001714:	0800aeb8 	.word	0x0800aeb8

08001718 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4904      	ldr	r1, [pc, #16]	; (8001738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800172a:	f008 fab9 	bl	8009ca0 <USBD_GetString>
  return USBD_StrDesc;
 800172e:	4b02      	ldr	r3, [pc, #8]	; (8001738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000d40 	.word	0x20000d40
 800173c:	0800aed0 	.word	0x0800aed0

08001740 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	221a      	movs	r2, #26
 8001750:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001752:	f000 f843 	bl	80017dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001756:	4b02      	ldr	r3, [pc, #8]	; (8001760 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000048 	.word	0x20000048

08001764 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <USBD_FS_ConfigStrDescriptor+0x34>)
 800177a:	4808      	ldr	r0, [pc, #32]	; (800179c <USBD_FS_ConfigStrDescriptor+0x38>)
 800177c:	f008 fa90 	bl	8009ca0 <USBD_GetString>
 8001780:	e004      	b.n	800178c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001788:	f008 fa8a 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000d40 	.word	0x20000d40
 800179c:	0800aee4 	.word	0x0800aee4

080017a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	4907      	ldr	r1, [pc, #28]	; (80017d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80017b8:	f008 fa72 	bl	8009ca0 <USBD_GetString>
 80017bc:	e004      	b.n	80017c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4904      	ldr	r1, [pc, #16]	; (80017d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80017c4:	f008 fa6c 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000d40 	.word	0x20000d40
 80017d8:	0800aef0 	.word	0x0800aef0

080017dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <Get_SerialNum+0x44>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <Get_SerialNum+0x48>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <Get_SerialNum+0x4c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001802:	2208      	movs	r2, #8
 8001804:	4909      	ldr	r1, [pc, #36]	; (800182c <Get_SerialNum+0x50>)
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f814 	bl	8001834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800180c:	2204      	movs	r2, #4
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <Get_SerialNum+0x54>)
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f000 f80f 	bl	8001834 <IntToUnicode>
  }
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	1ffff7e8 	.word	0x1ffff7e8
 8001824:	1ffff7ec 	.word	0x1ffff7ec
 8001828:	1ffff7f0 	.word	0x1ffff7f0
 800182c:	2000004a 	.word	0x2000004a
 8001830:	2000005a 	.word	0x2000005a

08001834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	4613      	mov	r3, r2
 8001840:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
 800184a:	e027      	b.n	800189c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	0f1b      	lsrs	r3, r3, #28
 8001850:	2b09      	cmp	r3, #9
 8001852:	d80b      	bhi.n	800186c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	0f1b      	lsrs	r3, r3, #28
 8001858:	b2da      	uxtb	r2, r3
 800185a:	7dfb      	ldrb	r3, [r7, #23]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4619      	mov	r1, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	440b      	add	r3, r1
 8001864:	3230      	adds	r2, #48	; 0x30
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e00a      	b.n	8001882 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	0f1b      	lsrs	r3, r3, #28
 8001870:	b2da      	uxtb	r2, r3
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4619      	mov	r1, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	440b      	add	r3, r1
 800187c:	3237      	adds	r2, #55	; 0x37
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	3301      	adds	r3, #1
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	3301      	adds	r3, #1
 800189a:	75fb      	strb	r3, [r7, #23]
 800189c:	7dfa      	ldrb	r2, [r7, #23]
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3d3      	bcc.n	800184c <IntToUnicode+0x18>
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_PCD_MspInit+0x54>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d11b      	bne.n	80018fa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_PCD_MspInit+0x58>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_PCD_MspInit+0x58>)
 80018c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_PCD_MspInit+0x58>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2013      	movs	r0, #19
 80018e0:	f000 fbfb 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80018e4:	2013      	movs	r0, #19
 80018e6:	f000 fc14 	bl	8002112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	2014      	movs	r0, #20
 80018f0:	f000 fbf3 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80018f4:	2014      	movs	r0, #20
 80018f6:	f000 fc0c 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40005c00 	.word	0x40005c00
 8001908:	40021000 	.word	0x40021000

0800190c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f007 fa8c 	bl	8008e40 <USBD_LL_SetupStage>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	4619      	mov	r1, r3
 800195a:	f007 fabe 	bl	8008eda <USBD_LL_DataOutStage>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	333c      	adds	r3, #60	; 0x3c
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	4619      	mov	r1, r3
 800198e:	f007 fb15 	bl	8008fbc <USBD_LL_DataInStage>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 fc25 	bl	80091f8 <USBD_LL_SOF>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d001      	beq.n	80019ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80019ca:	f7ff fb79 	bl	80010c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f007 fbd5 	bl	8009188 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80019e4:	4618      	mov	r0, r3
 80019e6:	f007 fb8e 	bl	8009106 <USBD_LL_Reset>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 fbcf 	bl	80091a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_PCD_SuspendCallback+0x30>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <HAL_PCD_SuspendCallback+0x30>)
 8001a16:	f043 0306 	orr.w	r3, r3, #6
 8001a1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001a36:	4618      	mov	r0, r3
 8001a38:	f007 fbc9 	bl	80091ce <USBD_LL_Resume>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8001a4c:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a5e:	4a25      	ldr	r2, [pc, #148]	; (8001af4 <USBD_LL_Init+0xb0>)
 8001a60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a64:	2208      	movs	r2, #8
 8001a66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a80:	481b      	ldr	r0, [pc, #108]	; (8001af0 <USBD_LL_Init+0xac>)
 8001a82:	f000 fd14 	bl	80024ae <HAL_PCD_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8001a8c:	f7ff fb18 	bl	80010c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001a96:	2318      	movs	r3, #24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f002 f988 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001aa6:	2358      	movs	r3, #88	; 0x58
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	f002 f980 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001ab6:	23c0      	movs	r3, #192	; 0xc0
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2181      	movs	r1, #129	; 0x81
 8001abc:	f002 f978 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001ac6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001aca:	2200      	movs	r2, #0
 8001acc:	2101      	movs	r1, #1
 8001ace:	f002 f96f 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001adc:	2200      	movs	r2, #0
 8001ade:	2182      	movs	r1, #130	; 0x82
 8001ae0:	f002 f966 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000f40 	.word	0x20000f40
 8001af4:	40005c00 	.word	0x40005c00

08001af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fdd8 	bl	80026c4 <HAL_PCD_Start>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f94e 	bl	8001dbc <USBD_Get_USB_Status>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	4608      	mov	r0, r1
 8001b38:	4611      	mov	r1, r2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	70fb      	strb	r3, [r7, #3]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70bb      	strb	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001b56:	78bb      	ldrb	r3, [r7, #2]
 8001b58:	883a      	ldrh	r2, [r7, #0]
 8001b5a:	78f9      	ldrb	r1, [r7, #3]
 8001b5c:	f000 ff50 	bl	8002a00 <HAL_PCD_EP_Open>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f928 	bl	8001dbc <USBD_Get_USB_Status>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 ff97 	bl	8002acc <HAL_PCD_EP_Close>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f909 	bl	8001dbc <USBD_Get_USB_Status>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 f857 	bl	8002c8a <HAL_PCD_EP_SetStall>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f8ea 	bl	8001dbc <USBD_Get_USB_Status>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 f898 	bl	8002d4a <HAL_PCD_EP_ClrStall>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f8cb 	bl	8001dbc <USBD_Get_USB_Status>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001c46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da0c      	bge.n	8001c6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c56:	68f9      	ldr	r1, [r7, #12]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	3302      	adds	r3, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	e00b      	b.n	8001c82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8001c80:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fe83 	bl	80029b6 <HAL_PCD_SetAddress>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f880 	bl	8001dbc <USBD_Get_USB_Status>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	72fb      	strb	r3, [r7, #11]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	7af9      	ldrb	r1, [r7, #11]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	f000 ff87 	bl	8002c04 <HAL_PCD_EP_Transmit>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f85d 	bl	8001dbc <USBD_Get_USB_Status>
 8001d02:	4603      	mov	r3, r0
 8001d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	72fb      	strb	r3, [r7, #11]
 8001d20:	4613      	mov	r3, r2
 8001d22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001d32:	893b      	ldrh	r3, [r7, #8]
 8001d34:	7af9      	ldrb	r1, [r7, #11]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	f000 ff10 	bl	8002b5c <HAL_PCD_EP_Receive>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f83a 	bl	8001dbc <USBD_Get_USB_Status>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 ff32 	bl	8002bd6 <HAL_PCD_EP_GetRxCount>
 8001d72:	4603      	mov	r3, r0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <USBD_static_malloc+0x14>)
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	2000122c 	.word	0x2000122c

08001d94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d817      	bhi.n	8001e00 <USBD_Get_USB_Status+0x44>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <USBD_Get_USB_Status+0x1c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001def 	.word	0x08001def
 8001de0:	08001df5 	.word	0x08001df5
 8001de4:	08001dfb 	.word	0x08001dfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
    break;
 8001dec:	e00b      	b.n	8001e06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001dee:	2302      	movs	r3, #2
 8001df0:	73fb      	strb	r3, [r7, #15]
    break;
 8001df2:	e008      	b.n	8001e06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
    break;
 8001df8:	e005      	b.n	8001e06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8001dfe:	e002      	b.n	8001e06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001e00:	2302      	movs	r3, #2
 8001e02:	73fb      	strb	r3, [r7, #15]
    break;
 8001e04:	bf00      	nop
  }
  return usb_status;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop

08001e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x28>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x28>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f947 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff f946 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f95f 	bl	800212e <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f927 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000064 	.word	0x20000064
 8001ea4:	2000006c 	.word	0x2000006c
 8001ea8:	20000068 	.word	0x20000068

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x1c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_IncTick+0x20>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	2000006c 	.word	0x2000006c
 8001ecc:	2000144c 	.word	0x2000144c

08001ed0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b02      	ldr	r3, [pc, #8]	; (8001ee0 <HAL_GetTick+0x10>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	2000144c 	.word	0x2000144c

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffe0 	bl	8001ed0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000006c 	.word	0x2000006c

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <__NVIC_EnableIRQ+0x34>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff90 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff2d 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff42 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff90 	bl	800201c <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5f 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff35 	bl	8001f90 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e169      	b.n	8002430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800215c:	2201      	movs	r2, #1
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8158 	bne.w	800242a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a9a      	ldr	r2, [pc, #616]	; (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d05e      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002184:	4a98      	ldr	r2, [pc, #608]	; (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d875      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 800218a:	4a98      	ldr	r2, [pc, #608]	; (80023ec <HAL_GPIO_Init+0x2a4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d058      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002190:	4a96      	ldr	r2, [pc, #600]	; (80023ec <HAL_GPIO_Init+0x2a4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d86f      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 8002196:	4a96      	ldr	r2, [pc, #600]	; (80023f0 <HAL_GPIO_Init+0x2a8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d052      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 800219c:	4a94      	ldr	r2, [pc, #592]	; (80023f0 <HAL_GPIO_Init+0x2a8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d869      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021a2:	4a94      	ldr	r2, [pc, #592]	; (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04c      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021a8:	4a92      	ldr	r2, [pc, #584]	; (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d863      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ae:	4a92      	ldr	r2, [pc, #584]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d046      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021b4:	4a90      	ldr	r2, [pc, #576]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d85d      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d82a      	bhi.n	8002214 <HAL_GPIO_Init+0xcc>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d859      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <HAL_GPIO_Init+0x80>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	08002243 	.word	0x08002243
 80021cc:	0800221d 	.word	0x0800221d
 80021d0:	0800222f 	.word	0x0800222f
 80021d4:	08002271 	.word	0x08002271
 80021d8:	08002277 	.word	0x08002277
 80021dc:	08002277 	.word	0x08002277
 80021e0:	08002277 	.word	0x08002277
 80021e4:	08002277 	.word	0x08002277
 80021e8:	08002277 	.word	0x08002277
 80021ec:	08002277 	.word	0x08002277
 80021f0:	08002277 	.word	0x08002277
 80021f4:	08002277 	.word	0x08002277
 80021f8:	08002277 	.word	0x08002277
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002277 	.word	0x08002277
 8002204:	08002277 	.word	0x08002277
 8002208:	08002277 	.word	0x08002277
 800220c:	08002225 	.word	0x08002225
 8002210:	08002239 	.word	0x08002239
 8002214:	4a79      	ldr	r2, [pc, #484]	; (80023fc <HAL_GPIO_Init+0x2b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221a:	e02c      	b.n	8002276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e029      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	3304      	adds	r3, #4
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e024      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	3308      	adds	r3, #8
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e01f      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	330c      	adds	r3, #12
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e01a      	b.n	8002278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224a:	2304      	movs	r3, #4
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e013      	b.n	8002278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	611a      	str	r2, [r3, #16]
          break;
 8002262:	e009      	b.n	8002278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	615a      	str	r2, [r3, #20]
          break;
 800226e:	e003      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x130>
          break;
 8002276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	; 0xff
 800227c:	d801      	bhi.n	8002282 <HAL_GPIO_Init+0x13a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_Init+0x13e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d802      	bhi.n	8002294 <HAL_GPIO_Init+0x14c>
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x152>
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	3b08      	subs	r3, #8
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	210f      	movs	r1, #15
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80b1 	beq.w	800242a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c8:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_GPIO_Init+0x2b8>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e0:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_GPIO_Init+0x2bc>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <HAL_GPIO_Init+0x2c0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x1ec>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_GPIO_Init+0x2c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1e8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <HAL_GPIO_Init+0x2c8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1e4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <HAL_GPIO_Init+0x2cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1e0>
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002328:	2304      	movs	r3, #4
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 800232c:	2302      	movs	r3, #2
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002334:	2300      	movs	r3, #0
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002346:	492f      	ldr	r1, [pc, #188]	; (8002404 <HAL_GPIO_Init+0x2bc>)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	492c      	ldr	r1, [pc, #176]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4928      	ldr	r1, [pc, #160]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002388:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	491e      	ldr	r1, [pc, #120]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4918      	ldr	r1, [pc, #96]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4914      	ldr	r1, [pc, #80]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d021      	beq.n	800241c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	490e      	ldr	r1, [pc, #56]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e021      	b.n	800242a <HAL_GPIO_Init+0x2e2>
 80023e6:	bf00      	nop
 80023e8:	10320000 	.word	0x10320000
 80023ec:	10310000 	.word	0x10310000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	10210000 	.word	0x10210000
 80023f8:	10120000 	.word	0x10120000
 80023fc:	10110000 	.word	0x10110000
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_GPIO_Init+0x304>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	43db      	mvns	r3, r3
 8002424:	4909      	ldr	r1, [pc, #36]	; (800244c <HAL_GPIO_Init+0x304>)
 8002426:	4013      	ands	r3, r2
 8002428:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	f47f ae8e 	bne.w	800215c <HAL_GPIO_Init+0x14>
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	372c      	adds	r7, #44	; 0x2c
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	887b      	ldrh	r3, [r7, #2]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e001      	b.n	8002472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	807b      	strh	r3, [r7, #2]
 800248a:	4613      	mov	r3, r2
 800248c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248e:	787b      	ldrb	r3, [r7, #1]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002494:	887a      	ldrh	r2, [r7, #2]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800249a:	e003      	b.n	80024a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	041a      	lsls	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b0:	b08b      	sub	sp, #44	; 0x2c
 80024b2:	af06      	add	r7, sp, #24
 80024b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0fd      	b.n	80026bc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff f9eb 	bl	80018b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fbb8 	bl	8005c5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	687e      	ldr	r6, [r7, #4]
 80024f4:	466d      	mov	r5, sp
 80024f6:	f106 0410 	add.w	r4, r6, #16
 80024fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	602b      	str	r3, [r5, #0]
 8002502:	1d33      	adds	r3, r6, #4
 8002504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f003 fb82 	bl	8005c10 <USB_CoreInit>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0ce      	b.n	80026bc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fbb3 	bl	8005c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e04c      	b.n	80025ca <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3301      	adds	r3, #1
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	b298      	uxth	r0, r3
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	3336      	adds	r3, #54	; 0x36
 800256e:	4602      	mov	r2, r0
 8002570:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	3303      	adds	r3, #3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	3338      	adds	r3, #56	; 0x38
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	333c      	adds	r3, #60	; 0x3c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	3340      	adds	r3, #64	; 0x40
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d3ad      	bcc.n	8002530 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	e044      	b.n	8002664 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	3301      	adds	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d3b5      	bcc.n	80025da <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	687e      	ldr	r6, [r7, #4]
 8002676:	466d      	mov	r5, sp
 8002678:	f106 0410 	add.w	r4, r6, #16
 800267c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	1d33      	adds	r3, r6, #4
 8002686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002688:	6838      	ldr	r0, [r7, #0]
 800268a:	f003 fb0d 	bl	8005ca8 <USB_DevInit>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e00d      	b.n	80026bc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f005 ffbf 	bl	8008638 <USB_DevDisconnect>

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_PCD_Start+0x16>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e016      	b.n	8002708 <HAL_PCD_Start+0x44>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 faa2 	bl	8005c30 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80026ec:	2101      	movs	r1, #1
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff fb59 	bl	8001da6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 ff93 	bl	8008624 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f005 ff95 	bl	800864c <USB_ReadInterrupts>
 8002722:	4603      	mov	r3, r0
 8002724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272c:	d102      	bne.n	8002734 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fb5f 	bl	8002df2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f005 ff87 	bl	800864c <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002748:	d112      	bne.n	8002770 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275c:	b292      	uxth	r2, r2
 800275e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff f927 	bl	80019b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002768:	2100      	movs	r1, #0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f923 	bl	80029b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f005 ff69 	bl	800864c <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002784:	d10b      	bne.n	800279e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002798:	b292      	uxth	r2, r2
 800279a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f005 ff52 	bl	800864c <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b2:	d10b      	bne.n	80027cc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c6:	b292      	uxth	r2, r2
 80027c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f005 ff3b 	bl	800864c <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	d126      	bne.n	8002830 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0204 	bic.w	r2, r2, #4
 80027f4:	b292      	uxth	r2, r2
 80027f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002802:	b29a      	uxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	b292      	uxth	r2, r2
 800280e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff f908 	bl	8001a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800282a:	b292      	uxth	r2, r2
 800282c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f005 ff09 	bl	800864c <USB_ReadInterrupts>
 800283a:	4603      	mov	r3, r0
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	f040 8082 	bne.w	800294c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	77fb      	strb	r3, [r7, #31]
 800284c:	e010      	b.n	8002870 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	7ffb      	ldrb	r3, [r7, #31]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	b292      	uxth	r2, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	3320      	adds	r3, #32
 8002864:	443b      	add	r3, r7
 8002866:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	3301      	adds	r3, #1
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	7ffb      	ldrb	r3, [r7, #31]
 8002872:	2b07      	cmp	r3, #7
 8002874:	d9eb      	bls.n	800284e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800287e:	b29a      	uxth	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	b292      	uxth	r2, r2
 800288a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002896:	b29a      	uxth	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	b292      	uxth	r2, r2
 80028a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80028a6:	bf00      	nop
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f6      	beq.n	80028a8 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028cc:	b292      	uxth	r2, r2
 80028ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e00f      	b.n	80028f8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4611      	mov	r1, r2
 80028e0:	7ffa      	ldrb	r2, [r7, #31]
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	440a      	add	r2, r1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	3320      	adds	r3, #32
 80028ea:	443b      	add	r3, r7
 80028ec:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80028f0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	3301      	adds	r3, #1
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
 80028fa:	2b07      	cmp	r3, #7
 80028fc:	d9ec      	bls.n	80028d8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0208 	orr.w	r2, r2, #8
 8002910:	b292      	uxth	r2, r2
 8002912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002928:	b292      	uxth	r2, r2
 800292a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0204 	orr.w	r2, r2, #4
 8002940:	b292      	uxth	r2, r2
 8002942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff f854 	bl	80019f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f005 fe7b 	bl	800864c <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d10e      	bne.n	8002980 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002974:	b292      	uxth	r2, r2
 8002976:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff f80d 	bl	800199a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f005 fe61 	bl	800864c <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002994:	d10b      	bne.n	80029ae <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a8:	b292      	uxth	r2, r2
 80029aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80029ae:	bf00      	nop
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_PCD_SetAddress+0x1a>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e013      	b.n	80029f8 <HAL_PCD_SetAddress+0x42>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f005 fe08 	bl	80085fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	70fb      	strb	r3, [r7, #3]
 8002a12:	460b      	mov	r3, r1
 8002a14:	803b      	strh	r3, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da0e      	bge.n	8002a44 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	705a      	strb	r2, [r3, #1]
 8002a42:	e00e      	b.n	8002a62 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 0207 	and.w	r2, r3, #7
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a6e:	883a      	ldrh	r2, [r7, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	78ba      	ldrb	r2, [r7, #2]
 8002a78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a8c:	78bb      	ldrb	r3, [r7, #2]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d102      	bne.n	8002a98 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_EP_Open+0xa6>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e00e      	b.n	8002ac4 <HAL_PCD_EP_Open+0xc4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 f917 	bl	8005ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da0e      	bge.n	8002afe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	705a      	strb	r2, [r3, #1]
 8002afc:	e00e      	b.n	8002b1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 0207 	and.w	r2, r3, #7
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_PCD_EP_Close+0x6a>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e00e      	b.n	8002b54 <HAL_PCD_EP_Close+0x88>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fc39 	bl	80063bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 0207 	and.w	r2, r3, #7
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6979      	ldr	r1, [r7, #20]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fdeb 	bl	8006794 <USB_EPStartXfer>
 8002bbe:	e005      	b.n	8002bcc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fde4 	bl	8006794 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0207 	and.w	r2, r3, #7
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002bf8:	681b      	ldr	r3, [r3, #0]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	460b      	mov	r3, r1
 8002c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	7afb      	ldrb	r3, [r7, #11]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 fd91 	bl	8006794 <USB_EPStartXfer>
 8002c72:	e005      	b.n	8002c80 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fd8a 	bl	8006794 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 0207 	and.w	r2, r3, #7
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d901      	bls.n	8002ca8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e04c      	b.n	8002d42 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0e      	bge.n	8002cce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
 8002ccc:	e00c      	b.n	8002ce8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_EP_SetStall+0x7e>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e01c      	b.n	8002d42 <HAL_PCD_EP_SetStall+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f005 fb74 	bl	8008404 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f005 fc99 	bl	800866a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d901      	bls.n	8002d68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e040      	b.n	8002dea <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da0e      	bge.n	8002d8e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	705a      	strb	r2, [r3, #1]
 8002d8c:	e00e      	b.n	8002dac <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 0207 	and.w	r2, r3, #7
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_PCD_EP_ClrStall+0x82>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e00e      	b.n	8002dea <HAL_PCD_EP_ClrStall+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 fb62 	bl	80084a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b08e      	sub	sp, #56	; 0x38
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dfa:	e2ec      	b.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e04:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002e12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 8161 	bne.w	80030de <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d152      	bne.n	8002ecc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	81fb      	strh	r3, [r7, #14]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3328      	adds	r3, #40	; 0x28
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	3302      	adds	r3, #2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	441a      	add	r2, r3
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fe fd6a 	bl	8001966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 829b 	beq.w	80033d6 <PCD_EP_ISR_Handler+0x5e4>
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 8296 	bne.w	80033d6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002eca:	e284      	b.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002edc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d034      	beq.n	8002f50 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3306      	adds	r3, #6
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f005 fbf0 	bl	800870a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f36:	4013      	ands	r3, r2
 8002f38:	823b      	strh	r3, [r7, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	8a3a      	ldrh	r2, [r7, #16]
 8002f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f44:	b292      	uxth	r2, r2
 8002f46:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fe fcdf 	bl	800190c <HAL_PCD_SetupStageCallback>
 8002f4e:	e242      	b.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f50:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f280 823e 	bge.w	80033d6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f66:	4013      	ands	r3, r2
 8002f68:	83bb      	strh	r3, [r7, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	8bba      	ldrh	r2, [r7, #28]
 8002f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f74:	b292      	uxth	r2, r2
 8002f76:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3306      	adds	r3, #6
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d019      	beq.n	8002fe0 <PCD_EP_ISR_Handler+0x1ee>
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	6959      	ldr	r1, [r3, #20]
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f005 fba0 	bl	800870a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fca8 	bl	8001930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 81f2 	bne.w	80033d6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d112      	bne.n	8003040 <PCD_EP_ISR_Handler+0x24e>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003024:	b29a      	uxth	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003038:	b29a      	uxth	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	e02f      	b.n	80030a0 <PCD_EP_ISR_Handler+0x2ae>
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b3e      	cmp	r3, #62	; 0x3e
 8003046:	d813      	bhi.n	8003070 <PCD_EP_ISR_Handler+0x27e>
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	633b      	str	r3, [r7, #48]	; 0x30
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <PCD_EP_ISR_Handler+0x270>
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	3301      	adds	r3, #1
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	b29b      	uxth	r3, r3
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	b29a      	uxth	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e017      	b.n	80030a0 <PCD_EP_ISR_Handler+0x2ae>
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <PCD_EP_ISR_Handler+0x298>
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	3b01      	subs	r3, #1
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	b29b      	uxth	r3, r3
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	b29b      	uxth	r3, r3
 8003092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309a:	b29a      	uxth	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b0:	827b      	strh	r3, [r7, #18]
 80030b2:	8a7b      	ldrh	r3, [r7, #18]
 80030b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030b8:	827b      	strh	r3, [r7, #18]
 80030ba:	8a7b      	ldrh	r3, [r7, #18]
 80030bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030c0:	827b      	strh	r3, [r7, #18]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	8a7b      	ldrh	r3, [r7, #18]
 80030c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d8:	b29b      	uxth	r3, r3
 80030da:	8013      	strh	r3, [r2, #0]
 80030dc:	e17b      	b.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f280 80ea 	bge.w	80032ce <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003110:	4013      	ands	r3, r2
 8003112:	853b      	strh	r3, [r7, #40]	; 0x28
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003128:	b292      	uxth	r2, r2
 800312a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800312c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	7b1b      	ldrb	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d122      	bne.n	8003190 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	3306      	adds	r3, #6
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003172:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8087 	beq.w	800328a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	6959      	ldr	r1, [r3, #20]
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	88da      	ldrh	r2, [r3, #6]
 8003188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800318a:	f005 fabe 	bl	800870a <USB_ReadPMA>
 800318e:	e07c      	b.n	800328a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d108      	bne.n	80031aa <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800319a:	461a      	mov	r2, r3
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f927 	bl	80033f2 <HAL_PCD_EP_DB_Receive>
 80031a4:	4603      	mov	r3, r0
 80031a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031a8:	e06f      	b.n	800328a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d021      	beq.n	8003248 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	3302      	adds	r3, #2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800322e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02a      	beq.n	800328a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	6959      	ldr	r1, [r3, #20]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	891a      	ldrh	r2, [r3, #8]
 8003240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003242:	f005 fa62 	bl	800870a <USB_ReadPMA>
 8003246:	e020      	b.n	800328a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	3306      	adds	r3, #6
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003270:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	6959      	ldr	r1, [r3, #20]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	895a      	ldrh	r2, [r3, #10]
 8003284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003286:	f005 fa40 	bl	800870a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003290:	441a      	add	r2, r3
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800329c:	441a      	add	r2, r3
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <PCD_EP_ISR_Handler+0x4c2>
 80032aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d206      	bcs.n	80032c2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe fb38 	bl	8001930 <HAL_PCD_DataOutStageCallback>
 80032c0:	e005      	b.n	80032ce <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fa63 	bl	8006794 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80032ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d07e      	beq.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80032d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	843b      	strh	r3, [r7, #32]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	8c3b      	ldrh	r3, [r7, #32]
 8003318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003320:	b29b      	uxth	r3, r3
 8003322:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	78db      	ldrb	r3, [r3, #3]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d00c      	beq.n	8003346 <PCD_EP_ISR_Handler+0x554>
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	78db      	ldrb	r3, [r3, #3]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003338:	2b02      	cmp	r3, #2
 800333a:	d146      	bne.n	80033ca <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800333c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d141      	bne.n	80033ca <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	3302      	adds	r3, #2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	8bfb      	ldrh	r3, [r7, #30]
 8003376:	429a      	cmp	r2, r3
 8003378:	d906      	bls.n	8003388 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	8bfb      	ldrh	r3, [r7, #30]
 8003380:	1ad2      	subs	r2, r2, r3
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	619a      	str	r2, [r3, #24]
 8003386:	e002      	b.n	800338e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe fae2 	bl	8001966 <HAL_PCD_DataInStageCallback>
 80033a2:	e018      	b.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	441a      	add	r2, r3
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	8bfb      	ldrh	r3, [r7, #30]
 80033b6:	441a      	add	r2, r3
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 f9e6 	bl	8006794 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80033c8:	e005      	b.n	80033d6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033cc:	461a      	mov	r2, r3
 80033ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f91b 	bl	800360c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033de:	b29b      	uxth	r3, r3
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f6ff ad0a 	blt.w	8002dfc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3738      	adds	r7, #56	; 0x38
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b088      	sub	sp, #32
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07e      	beq.n	8003508 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	3302      	adds	r3, #2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003432:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	8b7b      	ldrh	r3, [r7, #26]
 800343a:	429a      	cmp	r2, r3
 800343c:	d306      	bcc.n	800344c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	1ad2      	subs	r2, r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	619a      	str	r2, [r3, #24]
 800344a:	e002      	b.n	8003452 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d123      	bne.n	80034a2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	833b      	strh	r3, [r7, #24]
 8003476:	8b3b      	ldrh	r3, [r7, #24]
 8003478:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800347c:	833b      	strh	r3, [r7, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8b3b      	ldrh	r3, [r7, #24]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01f      	beq.n	80034ec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	82fb      	strh	r3, [r7, #22]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034ec:	8b7b      	ldrh	r3, [r7, #26]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8087 	beq.w	8003602 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6959      	ldr	r1, [r3, #20]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	891a      	ldrh	r2, [r3, #8]
 8003500:	8b7b      	ldrh	r3, [r7, #26]
 8003502:	f005 f902 	bl	800870a <USB_ReadPMA>
 8003506:	e07c      	b.n	8003602 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003510:	b29b      	uxth	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	3306      	adds	r3, #6
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003530:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	8b7b      	ldrh	r3, [r7, #26]
 8003538:	429a      	cmp	r2, r3
 800353a:	d306      	bcc.n	800354a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	699a      	ldr	r2, [r3, #24]
 8003540:	8b7b      	ldrh	r3, [r7, #26]
 8003542:	1ad2      	subs	r2, r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	619a      	str	r2, [r3, #24]
 8003548:	e002      	b.n	8003550 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d123      	bne.n	80035a0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	83fb      	strh	r3, [r7, #30]
 8003574:	8bfb      	ldrh	r3, [r7, #30]
 8003576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800357a:	83fb      	strh	r3, [r7, #30]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	8bfb      	ldrh	r3, [r7, #30]
 800358c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359c:	b29b      	uxth	r3, r3
 800359e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11f      	bne.n	80035ea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	83bb      	strh	r3, [r7, #28]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	441a      	add	r2, r3
 80035d4:	8bbb      	ldrh	r3, [r7, #28]
 80035d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035ea:	8b7b      	ldrh	r3, [r7, #26]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	895a      	ldrh	r2, [r3, #10]
 80035fc:	8b7b      	ldrh	r3, [r7, #26]
 80035fe:	f005 f884 	bl	800870a <USB_ReadPMA>
    }
  }

  return count;
 8003602:	8b7b      	ldrh	r3, [r7, #26]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0a2      	sub	sp, #136	; 0x88
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 81c7 	beq.w	80039b4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	3302      	adds	r3, #2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800365a:	429a      	cmp	r2, r3
 800365c:	d907      	bls.n	800366e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	619a      	str	r2, [r3, #24]
 800366c:	e002      	b.n	8003674 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f040 80b9 	bne.w	80037f0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d126      	bne.n	80036d4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	4413      	add	r3, r2
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	011a      	lsls	r2, r3, #4
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	4413      	add	r3, r2
 80036a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	801a      	strh	r2, [r3, #0]
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e01a      	b.n	800370a <HAL_PCD_EP_DB_Transmit+0xfe>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d116      	bne.n	800370a <HAL_PCD_EP_DB_Transmit+0xfe>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	4413      	add	r3, r2
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	011a      	lsls	r2, r3, #4
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	4413      	add	r3, r2
 80036fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	785b      	ldrb	r3, [r3, #1]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d126      	bne.n	8003766 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	011a      	lsls	r2, r3, #4
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800374a:	b29a      	uxth	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375e:	b29a      	uxth	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e017      	b.n	8003796 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d113      	bne.n	8003796 <HAL_PCD_EP_DB_Transmit+0x18a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	4413      	add	r3, r2
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	011a      	lsls	r2, r3, #4
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	4413      	add	r3, r2
 800378a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2200      	movs	r2, #0
 8003794:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7fe f8e2 	bl	8001966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 82d4 	beq.w	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c8:	827b      	strh	r3, [r7, #18]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	441a      	add	r2, r3
 80037d8:	8a7b      	ldrh	r3, [r7, #18]
 80037da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]
 80037ee:	e2b2      	b.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d021      	beq.n	800383e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003814:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003844:	2b01      	cmp	r3, #1
 8003846:	f040 8286 	bne.w	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003852:	441a      	add	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003860:	441a      	add	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	429a      	cmp	r2, r3
 8003870:	d309      	bcc.n	8003886 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	1ad2      	subs	r2, r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	621a      	str	r2, [r3, #32]
 8003884:	e015      	b.n	80038b2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800388e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003892:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800389c:	e009      	b.n	80038b2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d155      	bne.n	8003966 <HAL_PCD_EP_DB_Transmit+0x35a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	4413      	add	r3, r2
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	011a      	lsls	r2, r3, #4
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	4413      	add	r3, r2
 80038dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
 80038e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d112      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x302>
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003906:	b29a      	uxth	r2, r3
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	e047      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x392>
 800390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003910:	2b3e      	cmp	r3, #62	; 0x3e
 8003912:	d811      	bhi.n	8003938 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	3301      	adds	r3, #1
 8003928:	64bb      	str	r3, [r7, #72]	; 0x48
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	b29b      	uxth	r3, r3
 800392e:	029b      	lsls	r3, r3, #10
 8003930:	b29a      	uxth	r2, r3
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e032      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x392>
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
 800393e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_PCD_EP_DB_Transmit+0x342>
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	3b01      	subs	r3, #1
 800394c:	64bb      	str	r3, [r7, #72]	; 0x48
 800394e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003950:	b29b      	uxth	r3, r3
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	b29b      	uxth	r3, r3
 8003956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395e:	b29a      	uxth	r2, r3
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e01b      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x392>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d117      	bne.n	800399e <HAL_PCD_EP_DB_Transmit+0x392>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	643b      	str	r3, [r7, #64]	; 0x40
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003982:	4413      	add	r3, r2
 8003984:	643b      	str	r3, [r7, #64]	; 0x40
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	011a      	lsls	r2, r3, #4
 800398c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398e:	4413      	add	r3, r2
 8003990:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003998:	b29a      	uxth	r2, r3
 800399a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6959      	ldr	r1, [r3, #20]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	891a      	ldrh	r2, [r3, #8]
 80039aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f004 fe67 	bl	8008680 <USB_WritePMA>
 80039b2:	e1d0      	b.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	3306      	adds	r3, #6
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d307      	bcc.n	80039fc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039f4:	1ad2      	subs	r2, r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	619a      	str	r2, [r3, #24]
 80039fa:	e002      	b.n	8003a02 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80c4 	bne.w	8003b94 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d126      	bne.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x456>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	4413      	add	r3, r2
 8003a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	011a      	lsls	r2, r3, #4
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	4413      	add	r3, r2
 8003a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	e01a      	b.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	785b      	ldrb	r3, [r3, #1]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d116      	bne.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7e:	4413      	add	r3, r2
 8003a80:	677b      	str	r3, [r7, #116]	; 0x74
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	011a      	lsls	r2, r3, #4
 8003a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a90:	673b      	str	r3, [r7, #112]	; 0x70
 8003a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a94:	2200      	movs	r2, #0
 8003a96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d12f      	bne.n	8003b06 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003abe:	4413      	add	r3, r2
 8003ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	011a      	lsls	r2, r3, #4
 8003aca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	e017      	b.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d113      	bne.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1c:	4413      	add	r3, r2
 8003b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	011a      	lsls	r2, r3, #4
 8003b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b28:	4413      	add	r3, r2
 8003b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b32:	2200      	movs	r2, #0
 8003b34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7fd ff12 	bl	8001966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 8104 	bne.w	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	441a      	add	r2, r3
 8003b7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8013      	strh	r3, [r2, #0]
 8003b92:	e0e0      	b.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d121      	bne.n	8003be2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 80b4 	bne.w	8003d56 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c04:	441a      	add	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d309      	bcc.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	621a      	str	r2, [r3, #32]
 8003c28:	e015      	b.n	8003c56 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c40:	e009      	b.n	8003c56 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d155      	bne.n	8003d10 <HAL_PCD_EP_DB_Transmit+0x704>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c78:	4413      	add	r3, r2
 8003c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c84:	4413      	add	r3, r2
 8003c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d112      	bne.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	e044      	b.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x736>
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cba:	2b3e      	cmp	r3, #62	; 0x3e
 8003cbc:	d811      	bhi.n	8003ce2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	029b      	lsls	r3, r3, #10
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	e02f      	b.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	e018      	b.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x736>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d114      	bne.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x736>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d26:	4413      	add	r3, r2
 8003d28:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d38:	663b      	str	r3, [r7, #96]	; 0x60
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d40:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6959      	ldr	r1, [r3, #20]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	895a      	ldrh	r2, [r3, #10]
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f004 fc95 	bl	8008680 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	823b      	strh	r3, [r7, #16]
 8003d72:	8a3b      	ldrh	r3, [r7, #16]
 8003d74:	f083 0310 	eor.w	r3, r3, #16
 8003d78:	823b      	strh	r3, [r7, #16]
 8003d7a:	8a3b      	ldrh	r3, [r7, #16]
 8003d7c:	f083 0320 	eor.w	r3, r3, #32
 8003d80:	823b      	strh	r3, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	8a3b      	ldrh	r3, [r7, #16]
 8003d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3788      	adds	r7, #136	; 0x88
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e009      	b.n	8003dfa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003de6:	897a      	ldrh	r2, [r7, #10]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	80da      	strh	r2, [r3, #6]
 8003e0e:	e00b      	b.n	8003e28 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2201      	movs	r2, #1
 8003e14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e272      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8087 	beq.w	8003f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e54:	4b92      	ldr	r3, [pc, #584]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d00c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e60:	4b8f      	ldr	r3, [pc, #572]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d112      	bne.n	8003e92 <HAL_RCC_OscConfig+0x5e>
 8003e6c:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d10b      	bne.n	8003e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7a:	4b89      	ldr	r3, [pc, #548]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d06c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x12c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d168      	bne.n	8003f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e24c      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x76>
 8003e9c:	4b80      	ldr	r3, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a7f      	ldr	r2, [pc, #508]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	e02e      	b.n	8003f08 <HAL_RCC_OscConfig+0xd4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x98>
 8003eb2:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b78      	ldr	r3, [pc, #480]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a77      	ldr	r2, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e01d      	b.n	8003f08 <HAL_RCC_OscConfig+0xd4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xbc>
 8003ed6:	4b72      	ldr	r3, [pc, #456]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a71      	ldr	r2, [pc, #452]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b6f      	ldr	r3, [pc, #444]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6e      	ldr	r2, [pc, #440]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0xd4>
 8003ef0:	4b6b      	ldr	r3, [pc, #428]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6a      	ldr	r2, [pc, #424]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4b68      	ldr	r3, [pc, #416]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a67      	ldr	r2, [pc, #412]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd ffde 	bl	8001ed0 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fd ffda 	bl	8001ed0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e200      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0xe4>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fd ffca 	bl	8001ed0 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fd ffc6 	bl	8001ed0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e1ec      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	4b53      	ldr	r3, [pc, #332]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x10c>
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d063      	beq.n	8004036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d11c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x18c>
 8003f86:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d116      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1c0      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4939      	ldr	r1, [pc, #228]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	e03a      	b.n	8004036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fd ff7f 	bl	8001ed0 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fd ff7b 	bl	8001ed0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e1a1      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4927      	ldr	r1, [pc, #156]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
 8004008:	e015      	b.n	8004036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd ff5e 	bl	8001ed0 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004018:	f7fd ff5a 	bl	8001ed0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e180      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03a      	beq.n	80040b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d019      	beq.n	800407e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004050:	f7fd ff3e 	bl	8001ed0 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7fd ff3a 	bl	8001ed0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e160      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004076:	2001      	movs	r0, #1
 8004078:	f000 faa6 	bl	80045c8 <RCC_Delay>
 800407c:	e01c      	b.n	80040b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fd ff24 	bl	8001ed0 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408a:	e00f      	b.n	80040ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408c:	f7fd ff20 	bl	8001ed0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d908      	bls.n	80040ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e146      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	42420000 	.word	0x42420000
 80040a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b92      	ldr	r3, [pc, #584]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e9      	bne.n	800408c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a6 	beq.w	8004212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b8b      	ldr	r3, [pc, #556]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	4b88      	ldr	r3, [pc, #544]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4a87      	ldr	r2, [pc, #540]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	61d3      	str	r3, [r2, #28]
 80040e2:	4b85      	ldr	r3, [pc, #532]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b82      	ldr	r3, [pc, #520]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b7f      	ldr	r3, [pc, #508]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7e      	ldr	r2, [pc, #504]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fd fee1 	bl	8001ed0 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fd fedd 	bl	8001ed0 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b64      	cmp	r3, #100	; 0x64
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e103      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	4b75      	ldr	r3, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x312>
 8004138:	4b6f      	ldr	r3, [pc, #444]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a6e      	ldr	r2, [pc, #440]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	e02d      	b.n	80041a2 <HAL_RCC_OscConfig+0x36e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x334>
 800414e:	4b6a      	ldr	r3, [pc, #424]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a69      	ldr	r2, [pc, #420]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6213      	str	r3, [r2, #32]
 800415a:	4b67      	ldr	r3, [pc, #412]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	f023 0304 	bic.w	r3, r3, #4
 8004164:	6213      	str	r3, [r2, #32]
 8004166:	e01c      	b.n	80041a2 <HAL_RCC_OscConfig+0x36e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d10c      	bne.n	800418a <HAL_RCC_OscConfig+0x356>
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4a60      	ldr	r2, [pc, #384]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	6213      	str	r3, [r2, #32]
 800417c:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a5d      	ldr	r2, [pc, #372]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6213      	str	r3, [r2, #32]
 8004188:	e00b      	b.n	80041a2 <HAL_RCC_OscConfig+0x36e>
 800418a:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4a5a      	ldr	r2, [pc, #360]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	6213      	str	r3, [r2, #32]
 8004196:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4a57      	ldr	r2, [pc, #348]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d015      	beq.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fd fe91 	bl	8001ed0 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd fe8d 	bl	8001ed0 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e0b1      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ee      	beq.n	80041b2 <HAL_RCC_OscConfig+0x37e>
 80041d4:	e014      	b.n	8004200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fd fe7b 	bl	8001ed0 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fd fe77 	bl	8001ed0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e09b      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ee      	bne.n	80041de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004206:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8087 	beq.w	800432a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b08      	cmp	r3, #8
 8004226:	d061      	beq.n	80042ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d146      	bne.n	80042be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	4b33      	ldr	r3, [pc, #204]	; (8004300 <HAL_RCC_OscConfig+0x4cc>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fd fe4b 	bl	8001ed0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fd fe47 	bl	8001ed0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e06d      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d108      	bne.n	8004278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4921      	ldr	r1, [pc, #132]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a19      	ldr	r1, [r3, #32]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	430b      	orrs	r3, r1
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4cc>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fd fe1b 	bl	8001ed0 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429e:	f7fd fe17 	bl	8001ed0 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e03d      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x46a>
 80042bc:	e035      	b.n	800432a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x4cc>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd fe04 	bl	8001ed0 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fd fe00 	bl	8001ed0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e026      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x498>
 80042ea:	e01e      	b.n	800432a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e019      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
 8004300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x500>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	429a      	cmp	r2, r3
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0d0      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b67      	ldr	r3, [pc, #412]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	4965      	ldr	r1, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800439e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d040      	beq.n	8004458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d115      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e073      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06b      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f023 0203 	bic.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4936      	ldr	r1, [pc, #216]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004428:	f7fd fd52 	bl	8001ed0 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7fd fd4e 	bl	8001ed0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e053      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 020c 	and.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	429a      	cmp	r2, r3
 8004456:	d1eb      	bne.n	8004430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d210      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0207 	bic.w	r2, r3, #7
 800446e:	4922      	ldr	r1, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1cc>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1d0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fcb0 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40021000 	.word	0x40021000
 8004500:	0800af48 	.word	0x0800af48
 8004504:	20000064 	.word	0x20000064
 8004508:	20000068 	.word	0x20000068

0800450c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b490      	push	{r4, r7}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004512:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004514:	1d3c      	adds	r4, r7, #4
 8004516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800451c:	f240 2301 	movw	r3, #513	; 0x201
 8004520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004536:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b04      	cmp	r3, #4
 8004544:	d002      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004546:	2b08      	cmp	r3, #8
 8004548:	d003      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0x46>
 800454a:	e02b      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800454c:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800454e:	623b      	str	r3, [r7, #32]
      break;
 8004550:	e02b      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3328      	adds	r3, #40	; 0x28
 800455c:	443b      	add	r3, r7
 800455e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004562:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	0c5b      	lsrs	r3, r3, #17
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	3328      	adds	r3, #40	; 0x28
 800457a:	443b      	add	r3, r7
 800457c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004586:	fb03 f202 	mul.w	r2, r3, r2
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	e004      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	623b      	str	r3, [r7, #32]
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045a6:	623b      	str	r3, [r7, #32]
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc90      	pop	{r4, r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	0800af00 	.word	0x0800af00
 80045bc:	40021000 	.word	0x40021000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	003d0900 	.word	0x003d0900

080045c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <RCC_Delay+0x34>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <RCC_Delay+0x38>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045e4:	bf00      	nop
  }
  while (Delay --);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1e5a      	subs	r2, r3, #1
 80045ea:	60fa      	str	r2, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f9      	bne.n	80045e4 <RCC_Delay+0x1c>
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	20000064 	.word	0x20000064
 8004600:	10624dd3 	.word	0x10624dd3

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d07d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004624:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b4c      	ldr	r3, [pc, #304]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4a4b      	ldr	r2, [pc, #300]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	61d3      	str	r3, [r2, #28]
 800463c:	4b49      	ldr	r3, [pc, #292]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	4b46      	ldr	r3, [pc, #280]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d118      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004658:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a42      	ldr	r2, [pc, #264]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004664:	f7fd fc34 	bl	8001ed0 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	e008      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466c:	f7fd fc30 	bl	8001ed0 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e06d      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b3a      	ldr	r3, [pc, #232]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d02e      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d027      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a8:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046b8:	4b2c      	ldr	r3, [pc, #176]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046be:	4a29      	ldr	r2, [pc, #164]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd fbff 	bl	8001ed0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fd fbfb 	bl	8001ed0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e036      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ee      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4917      	ldr	r1, [pc, #92]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	4313      	orrs	r3, r2
 8004708:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	490b      	ldr	r1, [pc, #44]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	4313      	orrs	r3, r2
 8004738:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	4904      	ldr	r1, [pc, #16]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	40007000 	.word	0x40007000
 800476c:	42420440 	.word	0x42420440

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e041      	b.n	8004806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fcda 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fe0c 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e041      	b.n	80048a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f839 	bl	80048ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 fdbd 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_TIM_PWM_Start+0x24>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e022      	b.n	800492a <HAL_TIM_PWM_Start+0x6a>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d109      	bne.n	80048fe <HAL_TIM_PWM_Start+0x3e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	e015      	b.n	800492a <HAL_TIM_PWM_Start+0x6a>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d109      	bne.n	8004918 <HAL_TIM_PWM_Start+0x58>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	bf14      	ite	ne
 8004910:	2301      	movne	r3, #1
 8004912:	2300      	moveq	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e008      	b.n	800492a <HAL_TIM_PWM_Start+0x6a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e05e      	b.n	80049f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0x82>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	e013      	b.n	800496a <HAL_TIM_PWM_Start+0xaa>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b04      	cmp	r3, #4
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Start+0x92>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	e00b      	b.n	800496a <HAL_TIM_PWM_Start+0xaa>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Start+0xa2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004960:	e003      	b.n	800496a <HAL_TIM_PWM_Start+0xaa>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f8b7 	bl	8005ae6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_TIM_PWM_Start+0x138>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d107      	bne.n	8004992 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_TIM_PWM_Start+0x138>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIM_PWM_Start+0xfa>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d009      	beq.n	80049ba <HAL_TIM_PWM_Start+0xfa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <HAL_TIM_PWM_Start+0x13c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIM_PWM_Start+0xfa>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <HAL_TIM_PWM_Start+0x140>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d111      	bne.n	80049de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d010      	beq.n	80049ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	e007      	b.n	80049ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800

08004a04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e041      	b.n	8004a9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f839 	bl	8004aa2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fcc2 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_IC_Start_IT+0x1a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e013      	b.n	8004af6 <HAL_TIM_IC_Start_IT+0x42>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_IC_Start_IT+0x2a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	e00b      	b.n	8004af6 <HAL_TIM_IC_Start_IT+0x42>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_IC_Start_IT+0x3a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e003      	b.n	8004af6 <HAL_TIM_IC_Start_IT+0x42>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <HAL_TIM_IC_Start_IT+0x54>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e013      	b.n	8004b30 <HAL_TIM_IC_Start_IT+0x7c>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d104      	bne.n	8004b18 <HAL_TIM_IC_Start_IT+0x64>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e00b      	b.n	8004b30 <HAL_TIM_IC_Start_IT+0x7c>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d104      	bne.n	8004b28 <HAL_TIM_IC_Start_IT+0x74>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e003      	b.n	8004b30 <HAL_TIM_IC_Start_IT+0x7c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d102      	bne.n	8004b3e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b38:	7bbb      	ldrb	r3, [r7, #14]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d001      	beq.n	8004b42 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0b3      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_IC_Start_IT+0x9e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b50:	e013      	b.n	8004b7a <HAL_TIM_IC_Start_IT+0xc6>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_IC_Start_IT+0xae>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b60:	e00b      	b.n	8004b7a <HAL_TIM_IC_Start_IT+0xc6>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_IC_Start_IT+0xbe>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b70:	e003      	b.n	8004b7a <HAL_TIM_IC_Start_IT+0xc6>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_IC_Start_IT+0xd6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b88:	e013      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0xe6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_IC_Start_IT+0xf6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba8:	e003      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0xfe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d841      	bhi.n	8004c3c <HAL_TIM_IC_Start_IT+0x188>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_TIM_IC_Start_IT+0x10c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c3d 	.word	0x08004c3d
 8004bc8:	08004c3d 	.word	0x08004c3d
 8004bcc:	08004c3d 	.word	0x08004c3d
 8004bd0:	08004c07 	.word	0x08004c07
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004c3d 	.word	0x08004c3d
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c19 	.word	0x08004c19
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c2b 	.word	0x08004c2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0202 	orr.w	r2, r2, #2
 8004c02:	60da      	str	r2, [r3, #12]
      break;
 8004c04:	e01b      	b.n	8004c3e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0204 	orr.w	r2, r2, #4
 8004c14:	60da      	str	r2, [r3, #12]
      break;
 8004c16:	e012      	b.n	8004c3e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	60da      	str	r2, [r3, #12]
      break;
 8004c28:	e009      	b.n	8004c3e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0210 	orr.w	r2, r2, #16
 8004c38:	60da      	str	r2, [r3, #12]
      break;
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004c3c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2201      	movs	r2, #1
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 ff4d 	bl	8005ae6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_TIM_IC_Start_IT+0x200>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_IC_Start_IT+0x1c0>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d009      	beq.n	8004c74 <HAL_TIM_IC_Start_IT+0x1c0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <HAL_TIM_IC_Start_IT+0x204>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_IC_Start_IT+0x1c0>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <HAL_TIM_IC_Start_IT+0x208>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d111      	bne.n	8004c98 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d010      	beq.n	8004ca8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	e007      	b.n	8004ca8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800

08004cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d122      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d11b      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0202 	mvn.w	r2, #2
 8004cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc f95a 	bl	8000fbc <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fb43 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb49 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d122      	bne.n	8004d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d11b      	bne.n	8004d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0204 	mvn.w	r2, #4
 8004d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc f930 	bl	8000fbc <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb19 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fb1f 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d122      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d11b      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0208 	mvn.w	r2, #8
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc f906 	bl	8000fbc <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 faef 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 faf5 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d122      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d11b      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0210 	mvn.w	r2, #16
 8004de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2208      	movs	r2, #8
 8004dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc f8dc 	bl	8000fbc <HAL_TIM_IC_CaptureCallback>
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fac5 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 facb 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10e      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d107      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0201 	mvn.w	r2, #1
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 faa0 	bl	8005384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b80      	cmp	r3, #128	; 0x80
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d107      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fec7 	bl	8005bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d10e      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d107      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fa8f 	bl	80053ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d107      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0220 	mvn.w	r2, #32
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fe92 	bl	8005bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_IC_ConfigChannel+0x1a>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e082      	b.n	8004ff0 <HAL_TIM_IC_ConfigChannel+0x120>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f000 fc4a 	bl	80057a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 020c 	bic.w	r2, r2, #12
 8004f1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	619a      	str	r2, [r3, #24]
 8004f2e:	e05a      	b.n	8004fe6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d11c      	bne.n	8004f70 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6819      	ldr	r1, [r3, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f000 fcb3 	bl	80058b0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6999      	ldr	r1, [r3, #24]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	021a      	lsls	r2, r3, #8
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	619a      	str	r2, [r3, #24]
 8004f6e:	e03a      	b.n	8004fe6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11b      	bne.n	8004fae <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6819      	ldr	r1, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f000 fcfe 	bl	8005986 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 020c 	bic.w	r2, r2, #12
 8004f98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
 8004fac:	e01b      	b.n	8004fe6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f000 fd1d 	bl	80059fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	021a      	lsls	r2, r3, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800500e:	2302      	movs	r3, #2
 8005010:	e0ac      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	f200 809f 	bhi.w	8005160 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800505d 	.word	0x0800505d
 800502c:	08005161 	.word	0x08005161
 8005030:	08005161 	.word	0x08005161
 8005034:	08005161 	.word	0x08005161
 8005038:	0800509d 	.word	0x0800509d
 800503c:	08005161 	.word	0x08005161
 8005040:	08005161 	.word	0x08005161
 8005044:	08005161 	.word	0x08005161
 8005048:	080050df 	.word	0x080050df
 800504c:	08005161 	.word	0x08005161
 8005050:	08005161 	.word	0x08005161
 8005054:	08005161 	.word	0x08005161
 8005058:	0800511f 	.word	0x0800511f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fa14 	bl	8005490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0204 	bic.w	r2, r2, #4
 8005086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	619a      	str	r2, [r3, #24]
      break;
 800509a:	e062      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fa5a 	bl	800555c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
      break;
 80050dc:	e041      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 faa3 	bl	8005630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0208 	orr.w	r2, r2, #8
 80050f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0204 	bic.w	r2, r2, #4
 8005108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69d9      	ldr	r1, [r3, #28]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	61da      	str	r2, [r3, #28]
      break;
 800511c:	e021      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 faed 	bl	8005704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	61da      	str	r2, [r3, #28]
      break;
 800515e:	e000      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIM_ConfigClockSource+0x18>
 8005188:	2302      	movs	r3, #2
 800518a:	e0b3      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x180>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c4:	d03e      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0xd0>
 80051c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ca:	f200 8087 	bhi.w	80052dc <HAL_TIM_ConfigClockSource+0x168>
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	f000 8085 	beq.w	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051da:	d87f      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 80051dc:	2b70      	cmp	r3, #112	; 0x70
 80051de:	d01a      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0xa2>
 80051e0:	2b70      	cmp	r3, #112	; 0x70
 80051e2:	d87b      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 80051e4:	2b60      	cmp	r3, #96	; 0x60
 80051e6:	d050      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x116>
 80051e8:	2b60      	cmp	r3, #96	; 0x60
 80051ea:	d877      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 80051ec:	2b50      	cmp	r3, #80	; 0x50
 80051ee:	d03c      	beq.n	800526a <HAL_TIM_ConfigClockSource+0xf6>
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d873      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d058      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x136>
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d86f      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d064      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x156>
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	d86b      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 8005204:	2b20      	cmp	r3, #32
 8005206:	d060      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x156>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d867      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05c      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x156>
 8005210:	2b10      	cmp	r3, #16
 8005212:	d05a      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005214:	e062      	b.n	80052dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6899      	ldr	r1, [r3, #8]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f000 fc3f 	bl	8005aa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005238:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	609a      	str	r2, [r3, #8]
      break;
 8005242:	e04e      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	6899      	ldr	r1, [r3, #8]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f000 fc28 	bl	8005aa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005266:	609a      	str	r2, [r3, #8]
      break;
 8005268:	e03b      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	461a      	mov	r2, r3
 8005278:	f000 faec 	bl	8005854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2150      	movs	r1, #80	; 0x50
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fbf6 	bl	8005a74 <TIM_ITRx_SetConfig>
      break;
 8005288:	e02b      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	461a      	mov	r2, r3
 8005298:	f000 fb46 	bl	8005928 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2160      	movs	r1, #96	; 0x60
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fbe6 	bl	8005a74 <TIM_ITRx_SetConfig>
      break;
 80052a8:	e01b      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f000 facc 	bl	8005854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2140      	movs	r1, #64	; 0x40
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fbd6 	bl	8005a74 <TIM_ITRx_SetConfig>
      break;
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f000 fbcd 	bl	8005a74 <TIM_ITRx_SetConfig>
        break;
 80052da:	e002      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d831      	bhi.n	8005374 <HAL_TIM_ReadCapturedValue+0x78>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800534d 	.word	0x0800534d
 800531c:	08005375 	.word	0x08005375
 8005320:	08005375 	.word	0x08005375
 8005324:	08005375 	.word	0x08005375
 8005328:	08005357 	.word	0x08005357
 800532c:	08005375 	.word	0x08005375
 8005330:	08005375 	.word	0x08005375
 8005334:	08005375 	.word	0x08005375
 8005338:	08005361 	.word	0x08005361
 800533c:	08005375 	.word	0x08005375
 8005340:	08005375 	.word	0x08005375
 8005344:	08005375 	.word	0x08005375
 8005348:	0800536b 	.word	0x0800536b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	60fb      	str	r3, [r7, #12]

      break;
 8005354:	e00f      	b.n	8005376 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	60fb      	str	r3, [r7, #12]

      break;
 800535e:	e00a      	b.n	8005376 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	60fb      	str	r3, [r7, #12]

      break;
 8005368:	e005      	b.n	8005376 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	60fb      	str	r3, [r7, #12]

      break;
 8005372:	e000      	b.n	8005376 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005374:	bf00      	nop
  }

  return tmpreg;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop

08005384 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a29      	ldr	r2, [pc, #164]	; (8005484 <TIM_Base_SetConfig+0xb8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x30>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x30>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a26      	ldr	r2, [pc, #152]	; (8005488 <TIM_Base_SetConfig+0xbc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x30>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a25      	ldr	r2, [pc, #148]	; (800548c <TIM_Base_SetConfig+0xc0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <TIM_Base_SetConfig+0xb8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0x62>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <TIM_Base_SetConfig+0xbc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0x62>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <TIM_Base_SetConfig+0xc0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <TIM_Base_SetConfig+0xb8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d103      	bne.n	8005474 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	615a      	str	r2, [r3, #20]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800

08005490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 0302 	bic.w	r3, r3, #2
 80054d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <TIM_OC1_SetConfig+0xc8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10c      	bne.n	8005506 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0308 	bic.w	r3, r3, #8
 80054f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a13      	ldr	r2, [pc, #76]	; (8005558 <TIM_OC1_SetConfig+0xc8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00

0800555c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0210 	bic.w	r2, r3, #16
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f023 0320 	bic.w	r3, r3, #32
 80055a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a1d      	ldr	r2, [pc, #116]	; (800562c <TIM_OC2_SetConfig+0xd0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10d      	bne.n	80055d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a14      	ldr	r2, [pc, #80]	; (800562c <TIM_OC2_SetConfig+0xd0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d113      	bne.n	8005608 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	40012c00 	.word	0x40012c00

08005630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <TIM_OC3_SetConfig+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10d      	bne.n	80056aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <TIM_OC3_SetConfig+0xd0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d113      	bne.n	80056da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40012c00 	.word	0x40012c00

08005704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800574e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	031b      	lsls	r3, r3, #12
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0f      	ldr	r2, [pc, #60]	; (800579c <TIM_OC4_SetConfig+0x98>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d109      	bne.n	8005778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800576a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	019b      	lsls	r3, r3, #6
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	40012c00 	.word	0x40012c00

080057a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <TIM_TI1_SetConfig+0xa8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_TI1_SetConfig+0x46>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d4:	d007      	beq.n	80057e6 <TIM_TI1_SetConfig+0x46>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	; (800584c <TIM_TI1_SetConfig+0xac>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_TI1_SetConfig+0x46>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <TIM_TI1_SetConfig+0xb0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <TIM_TI1_SetConfig+0x4a>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <TIM_TI1_SetConfig+0x4c>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e003      	b.n	800580a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	b2db      	uxtb	r3, r3
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f003 030a 	and.w	r3, r3, #10
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800

08005854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 030a 	bic.w	r3, r3, #10
 8005890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0210 	bic.w	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	031b      	lsls	r3, r3, #12
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005902:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f023 0210 	bic.w	r2, r3, #16
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	031b      	lsls	r3, r3, #12
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	031b      	lsls	r3, r3, #12
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	031b      	lsls	r3, r3, #12
 8005a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f043 0307 	orr.w	r3, r3, #7
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	609a      	str	r2, [r3, #8]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b087      	sub	sp, #28
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2201      	movs	r2, #1
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	401a      	ands	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr
	...

08005b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e046      	b.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d009      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800

08005bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c10:	b084      	sub	sp, #16
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	f107 0014 	add.w	r0, r7, #20
 8005c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	b004      	add	sp, #16
 8005c2e:	4770      	bx	lr

08005c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005c68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ca8:	b084      	sub	sp, #16
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	f107 0014 	add.w	r0, r7, #20
 8005cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	b004      	add	sp, #16
 8005ce6:	4770      	bx	lr

08005ce8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b09b      	sub	sp, #108	; 0x6c
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d81f      	bhi.n	8005d5a <USB_ActivateEndpoint+0x72>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <USB_ActivateEndpoint+0x38>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d63 	.word	0x08005d63
 8005d2c:	08005d3f 	.word	0x08005d3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005d30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d3c:	e012      	b.n	8005d64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005d3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005d46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d4a:	e00b      	b.n	8005d64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005d4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d54:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d58:	e004      	b.n	8005d64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005d60:	e000      	b.n	8005d64 <USB_ActivateEndpoint+0x7c>
      break;
 8005d62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	7b1b      	ldrb	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 8149 	bne.w	8006068 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8084 	beq.w	8005ee8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	011a      	lsls	r2, r3, #4
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	88db      	ldrh	r3, [r3, #6]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	81fb      	strh	r3, [r7, #14]
 8005e22:	89fb      	ldrh	r3, [r7, #14]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01b      	beq.n	8005e64 <USB_ActivateEndpoint+0x17c>
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	81bb      	strh	r3, [r7, #12]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	89bb      	ldrh	r3, [r7, #12]
 8005e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	78db      	ldrb	r3, [r3, #3]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d020      	beq.n	8005eae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e82:	813b      	strh	r3, [r7, #8]
 8005e84:	893b      	ldrh	r3, [r7, #8]
 8005e86:	f083 0320 	eor.w	r3, r3, #32
 8005e8a:	813b      	strh	r3, [r7, #8]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	893b      	ldrh	r3, [r7, #8]
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]
 8005eac:	e27f      	b.n	80063ae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec4:	817b      	strh	r3, [r7, #10]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	897b      	ldrh	r3, [r7, #10]
 8005ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	8013      	strh	r3, [r2, #0]
 8005ee6:	e262      	b.n	80063ae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	4413      	add	r3, r2
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	011a      	lsls	r2, r3, #4
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	4413      	add	r3, r2
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	011a      	lsls	r2, r3, #4
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	4413      	add	r3, r2
 8005f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f3e:	623b      	str	r3, [r7, #32]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d112      	bne.n	8005f6e <USB_ActivateEndpoint+0x286>
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	e02f      	b.n	8005fce <USB_ActivateEndpoint+0x2e6>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b3e      	cmp	r3, #62	; 0x3e
 8005f74:	d813      	bhi.n	8005f9e <USB_ActivateEndpoint+0x2b6>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <USB_ActivateEndpoint+0x2a8>
 8005f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	029b      	lsls	r3, r3, #10
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e017      	b.n	8005fce <USB_ActivateEndpoint+0x2e6>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <USB_ActivateEndpoint+0x2d0>
 8005fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	83fb      	strh	r3, [r7, #30]
 8005fdc:	8bfb      	ldrh	r3, [r7, #30]
 8005fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01b      	beq.n	800601e <USB_ActivateEndpoint+0x336>
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	83bb      	strh	r3, [r7, #28]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	8bbb      	ldrh	r3, [r7, #28]
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006034:	837b      	strh	r3, [r7, #26]
 8006036:	8b7b      	ldrh	r3, [r7, #26]
 8006038:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800603c:	837b      	strh	r3, [r7, #26]
 800603e:	8b7b      	ldrh	r3, [r7, #26]
 8006040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006044:	837b      	strh	r3, [r7, #26]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	8b7b      	ldrh	r3, [r7, #26]
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]
 8006066:	e1a2      	b.n	80063ae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800609c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b4:	4413      	add	r3, r2
 80060b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	011a      	lsls	r2, r3, #4
 80060be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c6:	657b      	str	r3, [r7, #84]	; 0x54
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	891b      	ldrh	r3, [r3, #8]
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	653b      	str	r3, [r7, #80]	; 0x50
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	4413      	add	r3, r2
 80060ea:	653b      	str	r3, [r7, #80]	; 0x50
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	011a      	lsls	r2, r3, #4
 80060f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	895b      	ldrh	r3, [r3, #10]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 8091 	bne.w	8006238 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006124:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01b      	beq.n	8006166 <USB_ActivateEndpoint+0x47e>
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	873b      	strh	r3, [r7, #56]	; 0x38
 8006174:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <USB_ActivateEndpoint+0x4ce>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	867b      	strh	r3, [r7, #50]	; 0x32
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
 8006236:	e0ba      	b.n	80063ae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006248:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800624c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01d      	beq.n	8006290 <USB_ActivateEndpoint+0x5a8>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80062a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01d      	beq.n	80062e8 <USB_ActivateEndpoint+0x600>
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	78db      	ldrb	r3, [r3, #3]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d024      	beq.n	800633a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800630a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800630e:	f083 0320 	eor.w	r3, r3, #32
 8006312:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]
 8006338:	e01d      	b.n	8006376 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006350:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	b29b      	uxth	r3, r3
 8006374:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800639a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80063ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	376c      	adds	r7, #108	; 0x6c
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063bc:	b480      	push	{r7}
 80063be:	b08d      	sub	sp, #52	; 0x34
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	7b1b      	ldrb	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 808e 	bne.w	80064ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d044      	beq.n	8006462 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	81bb      	strh	r3, [r7, #12]
 80063e6:	89bb      	ldrh	r3, [r7, #12]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01b      	beq.n	8006428 <USB_DeactivateEndpoint+0x6c>
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	817b      	strh	r3, [r7, #10]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	897b      	ldrh	r3, [r7, #10]
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643e:	813b      	strh	r3, [r7, #8]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	893b      	ldrh	r3, [r7, #8]
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
 8006460:	e192      	b.n	8006788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	827b      	strh	r3, [r7, #18]
 8006470:	8a7b      	ldrh	r3, [r7, #18]
 8006472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01b      	beq.n	80064b2 <USB_DeactivateEndpoint+0xf6>
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	823b      	strh	r3, [r7, #16]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	8a3b      	ldrh	r3, [r7, #16]
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c8:	81fb      	strh	r3, [r7, #14]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	89fb      	ldrh	r3, [r7, #14]
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
 80064ea:	e14d      	b.n	8006788 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 80a5 	bne.w	8006640 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	843b      	strh	r3, [r7, #32]
 8006504:	8c3b      	ldrh	r3, [r7, #32]
 8006506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01b      	beq.n	8006546 <USB_DeactivateEndpoint+0x18a>
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006524:	83fb      	strh	r3, [r7, #30]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	8bfb      	ldrh	r3, [r7, #30]
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	83bb      	strh	r3, [r7, #28]
 8006554:	8bbb      	ldrh	r3, [r7, #28]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01b      	beq.n	8006596 <USB_DeactivateEndpoint+0x1da>
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	837b      	strh	r3, [r7, #26]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	8b7b      	ldrh	r3, [r7, #26]
 8006582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006592:	b29b      	uxth	r3, r3
 8006594:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	833b      	strh	r3, [r7, #24]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	8b3b      	ldrh	r3, [r7, #24]
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	82fb      	strh	r3, [r7, #22]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8afb      	ldrh	r3, [r7, #22]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	82bb      	strh	r3, [r7, #20]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	8abb      	ldrh	r3, [r7, #20]
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]
 800663e:	e0a3      	b.n	8006788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800664e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01b      	beq.n	8006690 <USB_DeactivateEndpoint+0x2d4>
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800669e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <USB_DeactivateEndpoint+0x324>
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	853b      	strh	r3, [r7, #40]	; 0x28
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	441a      	add	r2, r3
 800673a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800673c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	847b      	strh	r3, [r7, #34]	; 0x22
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	b29b      	uxth	r3, r3
 8006786:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3734      	adds	r7, #52	; 0x34
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b0cc      	sub	sp, #304	; 0x130
 8006798:	af00      	add	r7, sp, #0
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067a2:	6018      	str	r0, [r3, #0]
 80067a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	f041 817d 	bne.w	8007aba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d908      	bls.n	80067ee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80067ec:	e007      	b.n	80067fe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	7b1b      	ldrb	r3, [r3, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d152      	bne.n	80068b4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6959      	ldr	r1, [r3, #20]
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	88da      	ldrh	r2, [r3, #6]
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	b29b      	uxth	r3, r3
 800682c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006830:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006834:	6800      	ldr	r0, [r0, #0]
 8006836:	f001 ff23 	bl	8008680 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800683a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006842:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006846:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	4619      	mov	r1, r3
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006868:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800686c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	440a      	add	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	011a      	lsls	r2, r3, #4
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4413      	add	r3, r2
 8006890:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	f001 b8b5 	b.w	8007a1e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	78db      	ldrb	r3, [r3, #3]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	f040 84c6 	bne.w	8007252 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	429a      	cmp	r2, r3
 80068e0:	f240 8443 	bls.w	800716a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006934:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a1a      	ldr	r2, [r3, #32]
 800694c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006950:	1ad2      	subs	r2, r2, r3
 8006952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800695e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 823e 	beq.w	8006e02 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800698e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006992:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 809a 	bne.w	8006ae0 <USB_EPStartXfer+0x34c>
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069de:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	440a      	add	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	011a      	lsls	r2, r3, #4
 80069f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4413      	add	r3, r2
 8006a02:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d122      	bne.n	8006a5e <USB_EPStartXfer+0x2ca>
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e079      	b.n	8006b52 <USB_EPStartXfer+0x3be>
 8006a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a62:	2b3e      	cmp	r3, #62	; 0x3e
 8006a64:	d81b      	bhi.n	8006a9e <USB_EPStartXfer+0x30a>
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <USB_EPStartXfer+0x2f2>
 8006a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a80:	3301      	adds	r3, #1
 8006a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e059      	b.n	8006b52 <USB_EPStartXfer+0x3be>
 8006a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <USB_EPStartXfer+0x32a>
 8006ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	e038      	b.n	8006b52 <USB_EPStartXfer+0x3be>
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d130      	bne.n	8006b52 <USB_EPStartXfer+0x3be>
 8006af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4619      	mov	r1, r3
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b0e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	440a      	add	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	011a      	lsls	r2, r3, #4
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	895b      	ldrh	r3, [r3, #10]
 8006b5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6959      	ldr	r1, [r3, #20]
 8006b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b80:	6800      	ldr	r0, [r0, #0]
 8006b82:	f001 fd7d 	bl	8008680 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b96:	441a      	add	r2, r3
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d90f      	bls.n	8006be0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a1a      	ldr	r2, [r3, #32]
 8006bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd0:	1ad2      	subs	r2, r2, r3
 8006bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	621a      	str	r2, [r3, #32]
 8006bde:	e00e      	b.n	8006bfe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 809a 	bne.w	8006d44 <USB_EPStartXfer+0x5b0>
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006c18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c1c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006c3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c42:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	440a      	add	r2, r1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	011a      	lsls	r2, r3, #4
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d122      	bne.n	8006cc2 <USB_EPStartXfer+0x52e>
 8006c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	e083      	b.n	8006dca <USB_EPStartXfer+0x636>
 8006cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cc8:	d81b      	bhi.n	8006d02 <USB_EPStartXfer+0x56e>
 8006cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cce:	085b      	lsrs	r3, r3, #1
 8006cd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <USB_EPStartXfer+0x556>
 8006ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e063      	b.n	8006dca <USB_EPStartXfer+0x636>
 8006d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <USB_EPStartXfer+0x58e>
 8006d18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	801a      	strh	r2, [r3, #0]
 8006d42:	e042      	b.n	8006dca <USB_EPStartXfer+0x636>
 8006d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d13a      	bne.n	8006dca <USB_EPStartXfer+0x636>
 8006d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d60:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d86:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	011a      	lsls	r2, r3, #4
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4413      	add	r3, r2
 8006daa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	891b      	ldrh	r3, [r3, #8]
 8006dd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6959      	ldr	r1, [r3, #20]
 8006de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006df0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006df4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006df8:	6800      	ldr	r0, [r0, #0]
 8006dfa:	f001 fc41 	bl	8008680 <USB_WritePMA>
 8006dfe:	f000 be0e 	b.w	8007a1e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d16d      	bne.n	8006eee <USB_EPStartXfer+0x75a>
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	4413      	add	r3, r2
 8006e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	011a      	lsls	r2, r3, #4
 8006e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d112      	bne.n	8006e7c <USB_EPStartXfer+0x6e8>
 8006e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	e063      	b.n	8006f44 <USB_EPStartXfer+0x7b0>
 8006e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e80:	2b3e      	cmp	r3, #62	; 0x3e
 8006e82:	d817      	bhi.n	8006eb4 <USB_EPStartXfer+0x720>
 8006e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <USB_EPStartXfer+0x710>
 8006e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	029b      	lsls	r3, r3, #10
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e047      	b.n	8006f44 <USB_EPStartXfer+0x7b0>
 8006eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <USB_EPStartXfer+0x740>
 8006eca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e02a      	b.n	8006f44 <USB_EPStartXfer+0x7b0>
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d122      	bne.n	8006f44 <USB_EPStartXfer+0x7b0>
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	653b      	str	r3, [r7, #80]	; 0x50
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1e:	4413      	add	r3, r2
 8006f20:	653b      	str	r3, [r7, #80]	; 0x50
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	011a      	lsls	r2, r3, #4
 8006f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	891b      	ldrh	r3, [r3, #8]
 8006f50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6959      	ldr	r1, [r3, #20]
 8006f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f6a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f6e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	f001 fb84 	bl	8008680 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	441a      	add	r2, r3
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a1a      	ldr	r2, [r3, #32]
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d90f      	bls.n	8006fd2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	1ad2      	subs	r2, r2, r3
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	621a      	str	r2, [r3, #32]
 8006fd0:	e00e      	b.n	8006ff0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2200      	movs	r2, #0
 8006fee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d16d      	bne.n	80070e8 <USB_EPStartXfer+0x954>
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	63bb      	str	r3, [r7, #56]	; 0x38
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	4413      	add	r3, r2
 800702e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	011a      	lsls	r2, r3, #4
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	4413      	add	r3, r2
 8007042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
 8007048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d112      	bne.n	8007076 <USB_EPStartXfer+0x8e2>
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800705a:	b29a      	uxth	r2, r3
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706e:	b29a      	uxth	r2, r3
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e05d      	b.n	8007132 <USB_EPStartXfer+0x99e>
 8007076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707a:	2b3e      	cmp	r3, #62	; 0x3e
 800707c:	d817      	bhi.n	80070ae <USB_EPStartXfer+0x91a>
 800707e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <USB_EPStartXfer+0x90a>
 8007094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007098:	3301      	adds	r3, #1
 800709a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800709e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	e041      	b.n	8007132 <USB_EPStartXfer+0x99e>
 80070ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <USB_EPStartXfer+0x93a>
 80070c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070c8:	3b01      	subs	r3, #1
 80070ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	e024      	b.n	8007132 <USB_EPStartXfer+0x99e>
 80070e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d11c      	bne.n	8007132 <USB_EPStartXfer+0x99e>
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800710c:	4413      	add	r3, r2
 800710e:	643b      	str	r3, [r7, #64]	; 0x40
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	011a      	lsls	r2, r3, #4
 800711e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007120:	4413      	add	r3, r2
 8007122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712c:	b29a      	uxth	r2, r3
 800712e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	895b      	ldrh	r3, [r3, #10]
 800713e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6959      	ldr	r1, [r3, #20]
 800714e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007152:	b29b      	uxth	r3, r3
 8007154:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007158:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800715c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007160:	6800      	ldr	r0, [r0, #0]
 8007162:	f001 fa8d 	bl	8008680 <USB_WritePMA>
 8007166:	f000 bc5a 	b.w	8007a1e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800717a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800719c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	441a      	add	r2, r3
 80071be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f6:	4413      	add	r3, r2
 80071f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	011a      	lsls	r2, r3, #4
 8007208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800720a:	4413      	add	r3, r2
 800720c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007210:	65bb      	str	r3, [r7, #88]	; 0x58
 8007212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007216:	b29a      	uxth	r2, r3
 8007218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800721a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	891b      	ldrh	r3, [r3, #8]
 8007228:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6959      	ldr	r1, [r3, #20]
 8007238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723c:	b29b      	uxth	r3, r3
 800723e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007242:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007246:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	f001 fa18 	bl	8008680 <USB_WritePMA>
 8007250:	e3e5      	b.n	8007a1e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007278:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80072a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6a1a      	ldr	r2, [r3, #32]
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 81bc 	beq.w	800766c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d16d      	bne.n	80073ee <USB_EPStartXfer+0xc5a>
 8007312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	67bb      	str	r3, [r7, #120]	; 0x78
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007332:	4413      	add	r3, r2
 8007334:	67bb      	str	r3, [r7, #120]	; 0x78
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	011a      	lsls	r2, r3, #4
 8007344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007346:	4413      	add	r3, r2
 8007348:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800734c:	677b      	str	r3, [r7, #116]	; 0x74
 800734e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d112      	bne.n	800737c <USB_EPStartXfer+0xbe8>
 8007356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007360:	b29a      	uxth	r2, r3
 8007362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007374:	b29a      	uxth	r2, r3
 8007376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007378:	801a      	strh	r2, [r3, #0]
 800737a:	e060      	b.n	800743e <USB_EPStartXfer+0xcaa>
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007380:	2b3e      	cmp	r3, #62	; 0x3e
 8007382:	d817      	bhi.n	80073b4 <USB_EPStartXfer+0xc20>
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d004      	beq.n	80073a4 <USB_EPStartXfer+0xc10>
 800739a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800739e:	3301      	adds	r3, #1
 80073a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	e044      	b.n	800743e <USB_EPStartXfer+0xcaa>
 80073b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <USB_EPStartXfer+0xc40>
 80073ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073ce:	3b01      	subs	r3, #1
 80073d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073d8:	b29b      	uxth	r3, r3
 80073da:	029b      	lsls	r3, r3, #10
 80073dc:	b29b      	uxth	r3, r3
 80073de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	e027      	b.n	800743e <USB_EPStartXfer+0xcaa>
 80073ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d11f      	bne.n	800743e <USB_EPStartXfer+0xcaa>
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007414:	4413      	add	r3, r2
 8007416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	011a      	lsls	r2, r3, #4
 8007428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800742c:	4413      	add	r3, r2
 800742e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007432:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007438:	b29a      	uxth	r2, r3
 800743a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800743c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	895b      	ldrh	r3, [r3, #10]
 800744a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800744e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6959      	ldr	r1, [r3, #20]
 800745a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745e:	b29b      	uxth	r3, r3
 8007460:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007464:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007468:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800746c:	6800      	ldr	r0, [r0, #0]
 800746e:	f001 f907 	bl	8008680 <USB_WritePMA>
          ep->xfer_buff += len;
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695a      	ldr	r2, [r3, #20]
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	441a      	add	r2, r3
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6a1a      	ldr	r2, [r3, #32]
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d90f      	bls.n	80074cc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80074ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	621a      	str	r2, [r3, #32]
 80074ca:	e00e      	b.n	80074ea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80074cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80074dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2200      	movs	r2, #0
 80074e8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80074ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 8295 	beq.w	8007a1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d16d      	bne.n	80075e0 <USB_EPStartXfer+0xe4c>
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751e:	b29b      	uxth	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007524:	4413      	add	r3, r2
 8007526:	66bb      	str	r3, [r7, #104]	; 0x68
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	011a      	lsls	r2, r3, #4
 8007536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007538:	4413      	add	r3, r2
 800753a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800753e:	667b      	str	r3, [r7, #100]	; 0x64
 8007540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d112      	bne.n	800756e <USB_EPStartXfer+0xdda>
 8007548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007552:	b29a      	uxth	r2, r3
 8007554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007566:	b29a      	uxth	r2, r3
 8007568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	e063      	b.n	8007636 <USB_EPStartXfer+0xea2>
 800756e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007572:	2b3e      	cmp	r3, #62	; 0x3e
 8007574:	d817      	bhi.n	80075a6 <USB_EPStartXfer+0xe12>
 8007576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <USB_EPStartXfer+0xe02>
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007590:	3301      	adds	r3, #1
 8007592:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759a:	b29b      	uxth	r3, r3
 800759c:	029b      	lsls	r3, r3, #10
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e047      	b.n	8007636 <USB_EPStartXfer+0xea2>
 80075a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80075b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <USB_EPStartXfer+0xe32>
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c0:	3b01      	subs	r3, #1
 80075c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	029b      	lsls	r3, r3, #10
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	e02a      	b.n	8007636 <USB_EPStartXfer+0xea2>
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d122      	bne.n	8007636 <USB_EPStartXfer+0xea2>
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	673b      	str	r3, [r7, #112]	; 0x70
 80075fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760a:	b29b      	uxth	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007610:	4413      	add	r3, r2
 8007612:	673b      	str	r3, [r7, #112]	; 0x70
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	011a      	lsls	r2, r3, #4
 8007622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007624:	4413      	add	r3, r2
 8007626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800762a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007630:	b29a      	uxth	r2, r3
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	891b      	ldrh	r3, [r3, #8]
 8007642:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6959      	ldr	r1, [r3, #20]
 8007652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007656:	b29b      	uxth	r3, r3
 8007658:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800765c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007660:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007664:	6800      	ldr	r0, [r0, #0]
 8007666:	f001 f80b 	bl	8008680 <USB_WritePMA>
 800766a:	e1d8      	b.n	8007a1e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800766c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d178      	bne.n	800776e <USB_EPStartXfer+0xfda>
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a0:	4413      	add	r3, r2
 80076a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	011a      	lsls	r2, r3, #4
 80076b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076b8:	4413      	add	r3, r2
 80076ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d116      	bne.n	80076f8 <USB_EPStartXfer+0xf64>
 80076ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f4:	801a      	strh	r2, [r3, #0]
 80076f6:	e06b      	b.n	80077d0 <USB_EPStartXfer+0x103c>
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	2b3e      	cmp	r3, #62	; 0x3e
 80076fe:	d818      	bhi.n	8007732 <USB_EPStartXfer+0xf9e>
 8007700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800770a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USB_EPStartXfer+0xf8c>
 8007716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800771a:	3301      	adds	r3, #1
 800771c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007724:	b29b      	uxth	r3, r3
 8007726:	029b      	lsls	r3, r3, #10
 8007728:	b29a      	uxth	r2, r3
 800772a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e04e      	b.n	80077d0 <USB_EPStartXfer+0x103c>
 8007732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800773c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <USB_EPStartXfer+0xfbe>
 8007748:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800774c:	3b01      	subs	r3, #1
 800774e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007752:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007756:	b29b      	uxth	r3, r3
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	b29b      	uxth	r3, r3
 800775c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007764:	b29a      	uxth	r2, r3
 8007766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	e030      	b.n	80077d0 <USB_EPStartXfer+0x103c>
 800776e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d128      	bne.n	80077d0 <USB_EPStartXfer+0x103c>
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800778c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779a:	b29b      	uxth	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077a2:	4413      	add	r3, r2
 80077a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	011a      	lsls	r2, r3, #4
 80077b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077ba:	4413      	add	r3, r2
 80077bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	891b      	ldrh	r3, [r3, #8]
 80077dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6959      	ldr	r1, [r3, #20]
 80077ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077f6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077fa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	f000 ff3e 	bl	8008680 <USB_WritePMA>
          ep->xfer_buff += len;
 8007804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695a      	ldr	r2, [r3, #20]
 8007810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007814:	441a      	add	r2, r3
 8007816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a1a      	ldr	r2, [r3, #32]
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	429a      	cmp	r2, r3
 800783c:	d90f      	bls.n	800785e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6a1a      	ldr	r2, [r3, #32]
 800784a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	621a      	str	r2, [r3, #32]
 800785c:	e00e      	b.n	800787c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800785e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800786e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2200      	movs	r2, #0
 800787a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80cc 	beq.w	8007a1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d178      	bne.n	8007996 <USB_EPStartXfer+0x1202>
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078c8:	4413      	add	r3, r2
 80078ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	011a      	lsls	r2, r3, #4
 80078dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e0:	4413      	add	r3, r2
 80078e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d116      	bne.n	8007920 <USB_EPStartXfer+0x118c>
 80078f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078fe:	b29a      	uxth	r2, r3
 8007900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007916:	b29a      	uxth	r2, r3
 8007918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e064      	b.n	80079ea <USB_EPStartXfer+0x1256>
 8007920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007924:	2b3e      	cmp	r3, #62	; 0x3e
 8007926:	d818      	bhi.n	800795a <USB_EPStartXfer+0x11c6>
 8007928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <USB_EPStartXfer+0x11b4>
 800793e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007942:	3301      	adds	r3, #1
 8007944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794c:	b29b      	uxth	r3, r3
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	b29a      	uxth	r2, r3
 8007952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e047      	b.n	80079ea <USB_EPStartXfer+0x1256>
 800795a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <USB_EPStartXfer+0x11e6>
 8007970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007974:	3b01      	subs	r3, #1
 8007976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800797a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797e:	b29b      	uxth	r3, r3
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798c:	b29a      	uxth	r2, r3
 800798e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	e029      	b.n	80079ea <USB_EPStartXfer+0x1256>
 8007996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d121      	bne.n	80079ea <USB_EPStartXfer+0x1256>
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079bc:	4413      	add	r3, r2
 80079be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	011a      	lsls	r2, r3, #4
 80079d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d4:	4413      	add	r3, r2
 80079d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	895b      	ldrh	r3, [r3, #10]
 80079f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6959      	ldr	r1, [r3, #20]
 8007a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a18:	6800      	ldr	r0, [r0, #0]
 8007a1a:	f000 fe31 	bl	8008680 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a40:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4c:	8013      	strh	r3, [r2, #0]
 8007a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a52:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007a56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a5a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007a5e:	8812      	ldrh	r2, [r2, #0]
 8007a60:	f082 0210 	eor.w	r2, r2, #16
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007a76:	8812      	ldrh	r2, [r2, #0]
 8007a78:	f082 0220 	eor.w	r2, r2, #32
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	8013      	strh	r3, [r2, #0]
 8007ab6:	f000 bc9f 	b.w	80083f8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	7b1b      	ldrb	r3, [r3, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 80ae 	bne.w	8007c28 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d917      	bls.n	8007b18 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	1ad2      	subs	r2, r2, r3
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	619a      	str	r2, [r3, #24]
 8007b16:	e00e      	b.n	8007b36 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	461a      	mov	r2, r3
 8007b56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	011a      	lsls	r2, r3, #4
 8007b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b72:	4413      	add	r3, r2
 8007b74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d116      	bne.n	8007bb2 <USB_EPStartXfer+0x141e>
 8007b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e3e8      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
 8007bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bb8:	d818      	bhi.n	8007bec <USB_EPStartXfer+0x1458>
 8007bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <USB_EPStartXfer+0x1446>
 8007bd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	029b      	lsls	r3, r3, #10
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007be8:	801a      	strh	r2, [r3, #0]
 8007bea:	e3cb      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	095b      	lsrs	r3, r3, #5
 8007bf2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <USB_EPStartXfer+0x1478>
 8007c02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c06:	3b01      	subs	r3, #1
 8007c08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	029b      	lsls	r3, r3, #10
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e3ad      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	f040 8200 	bne.w	800803a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 8091 	bne.w	8007d6e <USB_EPStartXfer+0x15da>
 8007c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c70:	4413      	add	r3, r2
 8007c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	011a      	lsls	r2, r3, #4
 8007c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c88:	4413      	add	r3, r2
 8007c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d116      	bne.n	8007cd0 <USB_EPStartXfer+0x153c>
 8007ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	e083      	b.n	8007dd8 <USB_EPStartXfer+0x1644>
 8007cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8007cde:	d820      	bhi.n	8007d22 <USB_EPStartXfer+0x158e>
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	085b      	lsrs	r3, r3, #1
 8007cee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <USB_EPStartXfer+0x157c>
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	029b      	lsls	r3, r3, #10
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	e05a      	b.n	8007dd8 <USB_EPStartXfer+0x1644>
 8007d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d104      	bne.n	8007d52 <USB_EPStartXfer+0x15be>
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	029b      	lsls	r3, r3, #10
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d6a:	801a      	strh	r2, [r3, #0]
 8007d6c:	e034      	b.n	8007dd8 <USB_EPStartXfer+0x1644>
 8007d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d12c      	bne.n	8007dd8 <USB_EPStartXfer+0x1644>
 8007d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007da2:	4413      	add	r3, r2
 8007da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	011a      	lsls	r2, r3, #4
 8007db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dba:	4413      	add	r3, r2
 8007dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f040 8091 	bne.w	8007f1a <USB_EPStartXfer+0x1786>
 8007df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	461a      	mov	r2, r3
 8007e18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	011a      	lsls	r2, r3, #4
 8007e30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e34:	4413      	add	r3, r2
 8007e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d116      	bne.n	8007e7c <USB_EPStartXfer+0x16e8>
 8007e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e07c      	b.n	8007f76 <USB_EPStartXfer+0x17e2>
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b3e      	cmp	r3, #62	; 0x3e
 8007e8a:	d820      	bhi.n	8007ece <USB_EPStartXfer+0x173a>
 8007e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d004      	beq.n	8007ebc <USB_EPStartXfer+0x1728>
 8007eb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	029b      	lsls	r3, r3, #10
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007eca:	801a      	strh	r2, [r3, #0]
 8007ecc:	e053      	b.n	8007f76 <USB_EPStartXfer+0x17e2>
 8007ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USB_EPStartXfer+0x176a>
 8007ef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007efe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	e02d      	b.n	8007f76 <USB_EPStartXfer+0x17e2>
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d125      	bne.n	8007f76 <USB_EPStartXfer+0x17e2>
 8007f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f40:	4413      	add	r3, r2
 8007f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	011a      	lsls	r2, r3, #4
 8007f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 81fe 	beq.w	8008384 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fa8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <USB_EPStartXfer+0x182c>
 8007fb4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10d      	bne.n	8007fdc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f040 81db 	bne.w	8008384 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f040 81d4 	bne.w	8008384 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]
 8008038:	e1a4      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	78db      	ldrb	r3, [r3, #3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	f040 819a 	bne.w	8008380 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	699a      	ldr	r2, [r3, #24]
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	429a      	cmp	r2, r3
 8008066:	d917      	bls.n	8008098 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	619a      	str	r2, [r3, #24]
 8008096:	e00e      	b.n	80080b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80080a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80080b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d178      	bne.n	80081b8 <USB_EPStartXfer+0x1a24>
 80080c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080ea:	4413      	add	r3, r2
 80080ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	011a      	lsls	r2, r3, #4
 80080fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008102:	4413      	add	r3, r2
 8008104:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008108:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800810c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d116      	bne.n	8008142 <USB_EPStartXfer+0x19ae>
 8008114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008120:	b29a      	uxth	r2, r3
 8008122:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008138:	b29a      	uxth	r2, r3
 800813a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	e06b      	b.n	800821a <USB_EPStartXfer+0x1a86>
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	2b3e      	cmp	r3, #62	; 0x3e
 8008148:	d818      	bhi.n	800817c <USB_EPStartXfer+0x19e8>
 800814a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814e:	085b      	lsrs	r3, r3, #1
 8008150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d004      	beq.n	800816a <USB_EPStartXfer+0x19d6>
 8008160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008164:	3301      	adds	r3, #1
 8008166:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800816a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816e:	b29b      	uxth	r3, r3
 8008170:	029b      	lsls	r3, r3, #10
 8008172:	b29a      	uxth	r2, r3
 8008174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	e04e      	b.n	800821a <USB_EPStartXfer+0x1a86>
 800817c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818a:	f003 031f 	and.w	r3, r3, #31
 800818e:	2b00      	cmp	r3, #0
 8008190:	d104      	bne.n	800819c <USB_EPStartXfer+0x1a08>
 8008192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008196:	3b01      	subs	r3, #1
 8008198:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800819c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	029b      	lsls	r3, r3, #10
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	e030      	b.n	800821a <USB_EPStartXfer+0x1a86>
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d128      	bne.n	800821a <USB_EPStartXfer+0x1a86>
 80081c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ec:	4413      	add	r3, r2
 80081ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	011a      	lsls	r2, r3, #4
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	4413      	add	r3, r2
 8008206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800820a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800820e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d178      	bne.n	800832a <USB_EPStartXfer+0x1b96>
 8008238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008254:	b29b      	uxth	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825c:	4413      	add	r3, r2
 800825e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	011a      	lsls	r2, r3, #4
 8008270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008274:	4413      	add	r3, r2
 8008276:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800827a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800827e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d116      	bne.n	80082b4 <USB_EPStartXfer+0x1b20>
 8008286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008292:	b29a      	uxth	r2, r3
 8008294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e067      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
 80082b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b8:	2b3e      	cmp	r3, #62	; 0x3e
 80082ba:	d818      	bhi.n	80082ee <USB_EPStartXfer+0x1b5a>
 80082bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <USB_EPStartXfer+0x1b48>
 80082d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082d6:	3301      	adds	r3, #1
 80082d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	029b      	lsls	r3, r3, #10
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	e04a      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
 80082ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <USB_EPStartXfer+0x1b7a>
 8008304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008308:	3b01      	subs	r3, #1
 800830a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800830e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008312:	b29b      	uxth	r3, r3
 8008314:	029b      	lsls	r3, r3, #10
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008320:	b29a      	uxth	r2, r3
 8008322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	e02c      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
 800832a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d124      	bne.n	8008384 <USB_EPStartXfer+0x1bf0>
 800833a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008348:	b29b      	uxth	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008350:	4413      	add	r3, r2
 8008352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	011a      	lsls	r2, r3, #4
 8008364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008368:	4413      	add	r3, r2
 800836a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800836e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008376:	b29a      	uxth	r2, r3
 8008378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	e001      	b.n	8008384 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e03a      	b.n	80083fa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	441a      	add	r2, r3
 80083e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d020      	beq.n	8008458 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842c:	81bb      	strh	r3, [r7, #12]
 800842e:	89bb      	ldrh	r3, [r7, #12]
 8008430:	f083 0310 	eor.w	r3, r3, #16
 8008434:	81bb      	strh	r3, [r7, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	441a      	add	r2, r3
 8008440:	89bb      	ldrh	r3, [r7, #12]
 8008442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008452:	b29b      	uxth	r3, r3
 8008454:	8013      	strh	r3, [r2, #0]
 8008456:	e01f      	b.n	8008498 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	81fb      	strh	r3, [r7, #14]
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008476:	81fb      	strh	r3, [r7, #14]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	441a      	add	r2, r3
 8008482:	89fb      	ldrh	r3, [r7, #14]
 8008484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008494:	b29b      	uxth	r3, r3
 8008496:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	7b1b      	ldrb	r3, [r3, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 809d 	bne.w	80085f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d04c      	beq.n	800855a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	823b      	strh	r3, [r7, #16]
 80084ce:	8a3b      	ldrh	r3, [r7, #16]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01b      	beq.n	8008510 <USB_EPClearStall+0x6c>
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ee:	81fb      	strh	r3, [r7, #14]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	441a      	add	r2, r3
 80084fa:	89fb      	ldrh	r3, [r7, #14]
 80084fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800850c:	b29b      	uxth	r3, r3
 800850e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	78db      	ldrb	r3, [r3, #3]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d06c      	beq.n	80085f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852e:	81bb      	strh	r3, [r7, #12]
 8008530:	89bb      	ldrh	r3, [r7, #12]
 8008532:	f083 0320 	eor.w	r3, r3, #32
 8008536:	81bb      	strh	r3, [r7, #12]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	89bb      	ldrh	r3, [r7, #12]
 8008544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008554:	b29b      	uxth	r3, r3
 8008556:	8013      	strh	r3, [r2, #0]
 8008558:	e04b      	b.n	80085f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	82fb      	strh	r3, [r7, #22]
 8008568:	8afb      	ldrh	r3, [r7, #22]
 800856a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d01b      	beq.n	80085aa <USB_EPClearStall+0x106>
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	82bb      	strh	r3, [r7, #20]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	8abb      	ldrh	r3, [r7, #20]
 8008596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	827b      	strh	r3, [r7, #18]
 80085c2:	8a7b      	ldrh	r3, [r7, #18]
 80085c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085c8:	827b      	strh	r3, [r7, #18]
 80085ca:	8a7b      	ldrh	r3, [r7, #18]
 80085cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085d0:	827b      	strh	r3, [r7, #18]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	8a7b      	ldrh	r3, [r7, #18]
 80085de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr

080085fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d103      	bne.n	8008618 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2280      	movs	r2, #128	; 0x80
 8008614:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr

08008638 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr

0800864c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800865a:	b29b      	uxth	r3, r3
 800865c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr

0800866a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008680:	b480      	push	{r7}
 8008682:	b08d      	sub	sp, #52	; 0x34
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	460b      	mov	r3, r1
 8008690:	80fb      	strh	r3, [r7, #6]
 8008692:	4613      	mov	r3, r2
 8008694:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008696:	88bb      	ldrh	r3, [r7, #4]
 8008698:	3301      	adds	r3, #1
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	005a      	lsls	r2, r3, #1
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086b8:	e01e      	b.n	80086f8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	3301      	adds	r3, #1
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	3302      	adds	r3, #2
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	3302      	adds	r3, #2
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	3301      	adds	r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	3b01      	subs	r3, #1
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1dd      	bne.n	80086ba <USB_WritePMA+0x3a>
  }
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	3734      	adds	r7, #52	; 0x34
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr

0800870a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800870a:	b480      	push	{r7}
 800870c:	b08b      	sub	sp, #44	; 0x2c
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	4611      	mov	r1, r2
 8008716:	461a      	mov	r2, r3
 8008718:	460b      	mov	r3, r1
 800871a:	80fb      	strh	r3, [r7, #6]
 800871c:	4613      	mov	r3, r2
 800871e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008720:	88bb      	ldrh	r3, [r7, #4]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	005a      	lsls	r2, r3, #1
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800873c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	e01b      	b.n	800877c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29b      	uxth	r3, r3
 800874a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	3302      	adds	r3, #2
 8008750:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	b2da      	uxtb	r2, r3
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	3301      	adds	r3, #1
 800875e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b2da      	uxtb	r2, r3
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	3301      	adds	r3, #1
 800876e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	3302      	adds	r3, #2
 8008774:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	3b01      	subs	r3, #1
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e0      	bne.n	8008744 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008782:	88bb      	ldrh	r3, [r7, #4]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d007      	beq.n	800879e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b29b      	uxth	r3, r3
 8008794:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	b2da      	uxtb	r2, r3
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	701a      	strb	r2, [r3, #0]
  }
}
 800879e:	bf00      	nop
 80087a0:	372c      	adds	r7, #44	; 0x2c
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7c1b      	ldrb	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d115      	bne.n	80087ec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c4:	2202      	movs	r2, #2
 80087c6:	2181      	movs	r1, #129	; 0x81
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7f9 f9b0 	bl	8001b2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087d8:	2202      	movs	r2, #2
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7f9 f9a6 	bl	8001b2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80087ea:	e012      	b.n	8008812 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087ec:	2340      	movs	r3, #64	; 0x40
 80087ee:	2202      	movs	r2, #2
 80087f0:	2181      	movs	r1, #129	; 0x81
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f9 f99b 	bl	8001b2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087fe:	2340      	movs	r3, #64	; 0x40
 8008800:	2202      	movs	r2, #2
 8008802:	2101      	movs	r1, #1
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7f9 f992 	bl	8001b2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008812:	2308      	movs	r3, #8
 8008814:	2203      	movs	r2, #3
 8008816:	2182      	movs	r1, #130	; 0x82
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7f9 f988 	bl	8001b2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008824:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008828:	f7f9 faa8 	bl	8001d7c <USBD_static_malloc>
 800882c:	4602      	mov	r2, r0
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800883e:	2301      	movs	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	e026      	b.n	8008892 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7c1b      	ldrb	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008878:	2101      	movs	r1, #1
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f9 fa48 	bl	8001d10 <USBD_LL_PrepareReceive>
 8008880:	e007      	b.n	8008892 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008888:	2340      	movs	r3, #64	; 0x40
 800888a:	2101      	movs	r1, #1
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f9 fa3f 	bl	8001d10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80088ac:	2181      	movs	r1, #129	; 0x81
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7f9 f963 	bl	8001b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088ba:	2101      	movs	r1, #1
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f9 f95c 	bl	8001b7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088ca:	2182      	movs	r1, #130	; 0x82
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7f9 f954 	bl	8001b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00e      	beq.n	8008900 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f9 fa4e 	bl	8001d94 <USBD_static_free>
    pdev->pClassData = NULL;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008930:	2b00      	cmp	r3, #0
 8008932:	d039      	beq.n	80089a8 <USBD_CDC_Setup+0x9e>
 8008934:	2b20      	cmp	r3, #32
 8008936:	d17f      	bne.n	8008a38 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	88db      	ldrh	r3, [r3, #6]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d029      	beq.n	8008994 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b25b      	sxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	da11      	bge.n	800896e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008956:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	88d2      	ldrh	r2, [r2, #6]
 800895c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800895e:	6939      	ldr	r1, [r7, #16]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	88db      	ldrh	r3, [r3, #6]
 8008964:	461a      	mov	r2, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 f9f3 	bl	8009d52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800896c:	e06b      	b.n	8008a46 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	785a      	ldrb	r2, [r3, #1]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	88db      	ldrh	r3, [r3, #6]
 800897c:	b2da      	uxtb	r2, r3
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008984:	6939      	ldr	r1, [r7, #16]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	88db      	ldrh	r3, [r3, #6]
 800898a:	461a      	mov	r2, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fa0e 	bl	8009dae <USBD_CtlPrepareRx>
      break;
 8008992:	e058      	b.n	8008a46 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	7850      	ldrb	r0, [r2, #1]
 80089a0:	2200      	movs	r2, #0
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	4798      	blx	r3
      break;
 80089a6:	e04e      	b.n	8008a46 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	2b0b      	cmp	r3, #11
 80089ae:	d02e      	beq.n	8008a0e <USBD_CDC_Setup+0x104>
 80089b0:	2b0b      	cmp	r3, #11
 80089b2:	dc38      	bgt.n	8008a26 <USBD_CDC_Setup+0x11c>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <USBD_CDC_Setup+0xb4>
 80089b8:	2b0a      	cmp	r3, #10
 80089ba:	d014      	beq.n	80089e6 <USBD_CDC_Setup+0xdc>
 80089bc:	e033      	b.n	8008a26 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d107      	bne.n	80089d8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089c8:	f107 030c 	add.w	r3, r7, #12
 80089cc:	2202      	movs	r2, #2
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f9be 	bl	8009d52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089d6:	e02e      	b.n	8008a36 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 f94f 	bl	8009c7e <USBD_CtlError>
            ret = USBD_FAIL;
 80089e0:	2302      	movs	r3, #2
 80089e2:	75fb      	strb	r3, [r7, #23]
          break;
 80089e4:	e027      	b.n	8008a36 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d107      	bne.n	8008a00 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80089f0:	f107 030f 	add.w	r3, r7, #15
 80089f4:	2201      	movs	r2, #1
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f9aa 	bl	8009d52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089fe:	e01a      	b.n	8008a36 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 f93b 	bl	8009c7e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0c:	e013      	b.n	8008a36 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d00d      	beq.n	8008a34 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 f92f 	bl	8009c7e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a20:	2302      	movs	r3, #2
 8008a22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a24:	e006      	b.n	8008a34 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 f928 	bl	8009c7e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	75fb      	strb	r3, [r7, #23]
          break;
 8008a32:	e000      	b.n	8008a36 <USBD_CDC_Setup+0x12c>
          break;
 8008a34:	bf00      	nop
      }
      break;
 8008a36:	e006      	b.n	8008a46 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f91f 	bl	8009c7e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a40:	2302      	movs	r3, #2
 8008a42:	75fb      	strb	r3, [r7, #23]
      break;
 8008a44:	bf00      	nop
  }

  return ret;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a62:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a6a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d03a      	beq.n	8008aec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	331c      	adds	r3, #28
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d029      	beq.n	8008ae0 <USBD_CDC_DataIn+0x90>
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	440b      	add	r3, r1
 8008a9a:	331c      	adds	r3, #28
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	78f9      	ldrb	r1, [r7, #3]
 8008aa0:	68b8      	ldr	r0, [r7, #8]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	00db      	lsls	r3, r3, #3
 8008aaa:	4403      	add	r3, r0
 8008aac:	3338      	adds	r3, #56	; 0x38
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ab4:	fb01 f303 	mul.w	r3, r1, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d110      	bne.n	8008ae0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	331c      	adds	r3, #28
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ad2:	78f9      	ldrb	r1, [r7, #3]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7f9 f8f6 	bl	8001cca <USBD_LL_Transmit>
 8008ade:	e003      	b.n	8008ae8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e000      	b.n	8008aee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008aec:	2302      	movs	r3, #2
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7f9 f921 	bl	8001d56 <USBD_LL_GetRxDataSize>
 8008b14:	4602      	mov	r2, r0
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00d      	beq.n	8008b42 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4798      	blx	r3

    return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e000      	b.n	8008b44 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008b42:	2302      	movs	r3, #2
  }
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d015      	beq.n	8008b92 <USBD_CDC_EP0_RxReady+0x46>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b6c:	2bff      	cmp	r3, #255	; 0xff
 8008b6e:	d010      	beq.n	8008b92 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b7e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b86:	b292      	uxth	r2, r2
 8008b88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	22ff      	movs	r2, #255	; 0xff
 8008b8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2243      	movs	r2, #67	; 0x43
 8008ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008baa:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	200000f8 	.word	0x200000f8

08008bbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2243      	movs	r2, #67	; 0x43
 8008bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008bca:	4b03      	ldr	r3, [pc, #12]	; (8008bd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200000b4 	.word	0x200000b4

08008bdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2243      	movs	r2, #67	; 0x43
 8008be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	; (8008bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	2000013c 	.word	0x2000013c

08008bfc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	220a      	movs	r2, #10
 8008c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c0a:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000070 	.word	0x20000070

08008c1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c26:	2302      	movs	r3, #2
 8008c28:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr

08008c48 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr

08008c7a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d017      	beq.n	8008cea <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7c1b      	ldrb	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d109      	bne.n	8008cd6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7f9 f81e 	bl	8001d10 <USBD_LL_PrepareReceive>
 8008cd4:	e007      	b.n	8008ce6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cdc:	2340      	movs	r3, #64	; 0x40
 8008cde:	2101      	movs	r1, #1
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7f9 f815 	bl	8001d10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008cea:	2302      	movs	r3, #2
  }
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008d08:	4814      	ldr	r0, [pc, #80]	; (8008d5c <USBD_Init+0x68>)
 8008d0a:	f001 f8d9 	bl	8009ec0 <iprintf>
 8008d0e:	4814      	ldr	r0, [pc, #80]	; (8008d60 <USBD_Init+0x6c>)
 8008d10:	f001 f8d6 	bl	8009ec0 <iprintf>
 8008d14:	200a      	movs	r0, #10
 8008d16:	f001 f8eb 	bl	8009ef0 <putchar>
#endif
    return USBD_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e01a      	b.n	8008d54 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	79fa      	ldrb	r2, [r7, #7]
 8008d4a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7f8 fe79 	bl	8001a44 <USBD_LL_Init>

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	0800af10 	.word	0x0800af10
 8008d60:	0800af18 	.word	0x0800af18

08008d64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d006      	beq.n	8008d86 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
 8008d84:	e00a      	b.n	8008d9c <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8008d86:	4808      	ldr	r0, [pc, #32]	; (8008da8 <USBD_RegisterClass+0x44>)
 8008d88:	f001 f89a 	bl	8009ec0 <iprintf>
 8008d8c:	4807      	ldr	r0, [pc, #28]	; (8008dac <USBD_RegisterClass+0x48>)
 8008d8e:	f001 f897 	bl	8009ec0 <iprintf>
 8008d92:	200a      	movs	r0, #10
 8008d94:	f001 f8ac 	bl	8009ef0 <putchar>
#endif
    status = USBD_FAIL;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	0800af10 	.word	0x0800af10
 8008dac:	0800af30 	.word	0x0800af30

08008db0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7f8 fe9d 	bl	8001af8 <USBD_LL_Start>

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008de8:	2302      	movs	r3, #2
 8008dea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	4611      	mov	r1, r2
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4798      	blx	r3
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	460b      	mov	r3, r1
 8008e24:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	4611      	mov	r1, r2
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fed7 	bl	8009c06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e74:	f003 031f 	and.w	r3, r3, #31
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d016      	beq.n	8008eaa <USBD_LL_SetupStage+0x6a>
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d81c      	bhi.n	8008eba <USBD_LL_SetupStage+0x7a>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <USBD_LL_SetupStage+0x4a>
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d008      	beq.n	8008e9a <USBD_LL_SetupStage+0x5a>
 8008e88:	e017      	b.n	8008eba <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f9ca 	bl	800922c <USBD_StdDevReq>
      break;
 8008e98:	e01a      	b.n	8008ed0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa2c 	bl	8009300 <USBD_StdItfReq>
      break;
 8008ea8:	e012      	b.n	8008ed0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa6c 	bl	8009390 <USBD_StdEPReq>
      break;
 8008eb8:	e00a      	b.n	8008ed0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ec0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7f8 fe75 	bl	8001bb8 <USBD_LL_StallEP>
      break;
 8008ece:	bf00      	nop
  }

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	607a      	str	r2, [r7, #4]
 8008ee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d14b      	bne.n	8008f86 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ef4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d134      	bne.n	8008f6a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d919      	bls.n	8008f40 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	68da      	ldr	r2, [r3, #12]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d203      	bcs.n	8008f2e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	e002      	b.n	8008f34 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 ff56 	bl	8009dea <USBD_CtlContinueRx>
 8008f3e:	e038      	b.n	8008fb2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d105      	bne.n	8008f62 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 ff53 	bl	8009e0e <USBD_CtlSendStatus>
 8008f68:	e023      	b.n	8008fb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f70:	2b05      	cmp	r3, #5
 8008f72:	d11e      	bne.n	8008fb2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7f8 fe1a 	bl	8001bb8 <USBD_LL_StallEP>
 8008f84:	e015      	b.n	8008fb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00d      	beq.n	8008fae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d108      	bne.n	8008fae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	7afa      	ldrb	r2, [r7, #11]
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	4798      	blx	r3
 8008fac:	e001      	b.n	8008fb2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e000      	b.n	8008fb4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d17f      	bne.n	80090d0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3314      	adds	r3, #20
 8008fd4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d15c      	bne.n	800909a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d915      	bls.n	8009018 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	1ad2      	subs	r2, r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	461a      	mov	r2, r3
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fec0 	bl	8009d8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800900a:	2300      	movs	r3, #0
 800900c:	2200      	movs	r2, #0
 800900e:	2100      	movs	r1, #0
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f7f8 fe7d 	bl	8001d10 <USBD_LL_PrepareReceive>
 8009016:	e04e      	b.n	80090b6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	6912      	ldr	r2, [r2, #16]
 8009020:	fbb3 f1f2 	udiv	r1, r3, r2
 8009024:	fb01 f202 	mul.w	r2, r1, r2
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d11c      	bne.n	8009068 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009036:	429a      	cmp	r2, r3
 8009038:	d316      	bcc.n	8009068 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009044:	429a      	cmp	r2, r3
 8009046:	d20f      	bcs.n	8009068 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009048:	2200      	movs	r2, #0
 800904a:	2100      	movs	r1, #0
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fe9c 	bl	8009d8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800905a:	2300      	movs	r3, #0
 800905c:	2200      	movs	r2, #0
 800905e:	2100      	movs	r1, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7f8 fe55 	bl	8001d10 <USBD_LL_PrepareReceive>
 8009066:	e026      	b.n	80090b6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800907a:	2b03      	cmp	r3, #3
 800907c:	d105      	bne.n	800908a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7f8 fd93 	bl	8001bb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fece 	bl	8009e34 <USBD_CtlReceiveStatus>
 8009098:	e00d      	b.n	80090b6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d004      	beq.n	80090ae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d103      	bne.n	80090b6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80090ae:	2180      	movs	r1, #128	; 0x80
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7f8 fd81 	bl	8001bb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d11d      	bne.n	80090fc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff fe81 	bl	8008dc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80090ce:	e015      	b.n	80090fc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00d      	beq.n	80090f8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d108      	bne.n	80090f8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	7afa      	ldrb	r2, [r7, #11]
 80090f0:	4611      	mov	r1, r2
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	4798      	blx	r3
 80090f6:	e001      	b.n	80090fc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090f8:	2302      	movs	r3, #2
 80090fa:	e000      	b.n	80090fe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7f8 fd0a 	bl	8001b2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2240      	movs	r2, #64	; 0x40
 8009126:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800912a:	2340      	movs	r3, #64	; 0x40
 800912c:	2200      	movs	r2, #0
 800912e:	2180      	movs	r1, #128	; 0x80
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7f8 fcfc 	bl	8001b2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2240      	movs	r2, #64	; 0x40
 8009140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6852      	ldr	r2, [r2, #4]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	4611      	mov	r1, r2
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
  }

  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	78fa      	ldrb	r2, [r7, #3]
 8009198:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bc80      	pop	{r7}
 80091a4:	4770      	bx	lr

080091a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2204      	movs	r2, #4
 80091be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr

080091ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d105      	bne.n	80091ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009206:	2b03      	cmp	r3, #3
 8009208:	d10b      	bne.n	8009222 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009242:	2b40      	cmp	r3, #64	; 0x40
 8009244:	d005      	beq.n	8009252 <USBD_StdDevReq+0x26>
 8009246:	2b40      	cmp	r3, #64	; 0x40
 8009248:	d84f      	bhi.n	80092ea <USBD_StdDevReq+0xbe>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <USBD_StdDevReq+0x36>
 800924e:	2b20      	cmp	r3, #32
 8009250:	d14b      	bne.n	80092ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	4798      	blx	r3
      break;
 8009260:	e048      	b.n	80092f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b09      	cmp	r3, #9
 8009268:	d839      	bhi.n	80092de <USBD_StdDevReq+0xb2>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <USBD_StdDevReq+0x44>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092c1 	.word	0x080092c1
 8009274:	080092d5 	.word	0x080092d5
 8009278:	080092df 	.word	0x080092df
 800927c:	080092cb 	.word	0x080092cb
 8009280:	080092df 	.word	0x080092df
 8009284:	080092a3 	.word	0x080092a3
 8009288:	08009299 	.word	0x08009299
 800928c:	080092df 	.word	0x080092df
 8009290:	080092b7 	.word	0x080092b7
 8009294:	080092ad 	.word	0x080092ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9dc 	bl	8009658 <USBD_GetDescriptor>
          break;
 80092a0:	e022      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fb3f 	bl	8009928 <USBD_SetAddress>
          break;
 80092aa:	e01d      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fb7e 	bl	80099b0 <USBD_SetConfig>
          break;
 80092b4:	e018      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fc07 	bl	8009acc <USBD_GetConfig>
          break;
 80092be:	e013      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fc37 	bl	8009b36 <USBD_GetStatus>
          break;
 80092c8:	e00e      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc65 	bl	8009b9c <USBD_SetFeature>
          break;
 80092d2:	e009      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fc74 	bl	8009bc4 <USBD_ClrFeature>
          break;
 80092dc:	e004      	b.n	80092e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fccc 	bl	8009c7e <USBD_CtlError>
          break;
 80092e6:	bf00      	nop
      }
      break;
 80092e8:	e004      	b.n	80092f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fcc6 	bl	8009c7e <USBD_CtlError>
      break;
 80092f2:	bf00      	nop
  }

  return ret;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop

08009300 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009316:	2b40      	cmp	r3, #64	; 0x40
 8009318:	d005      	beq.n	8009326 <USBD_StdItfReq+0x26>
 800931a:	2b40      	cmp	r3, #64	; 0x40
 800931c:	d82e      	bhi.n	800937c <USBD_StdItfReq+0x7c>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <USBD_StdItfReq+0x26>
 8009322:	2b20      	cmp	r3, #32
 8009324:	d12a      	bne.n	800937c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800932c:	3b01      	subs	r3, #1
 800932e:	2b02      	cmp	r3, #2
 8009330:	d81d      	bhi.n	800936e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	889b      	ldrh	r3, [r3, #4]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b01      	cmp	r3, #1
 800933a:	d813      	bhi.n	8009364 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
 800934a:	4603      	mov	r3, r0
 800934c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	88db      	ldrh	r3, [r3, #6]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d110      	bne.n	8009378 <USBD_StdItfReq+0x78>
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fd56 	bl	8009e0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009362:	e009      	b.n	8009378 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc89 	bl	8009c7e <USBD_CtlError>
          break;
 800936c:	e004      	b.n	8009378 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fc84 	bl	8009c7e <USBD_CtlError>
          break;
 8009376:	e000      	b.n	800937a <USBD_StdItfReq+0x7a>
          break;
 8009378:	bf00      	nop
      }
      break;
 800937a:	e004      	b.n	8009386 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc7d 	bl	8009c7e <USBD_CtlError>
      break;
 8009384:	bf00      	nop
  }

  return USBD_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	889b      	ldrh	r3, [r3, #4]
 80093a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d007      	beq.n	80093c0 <USBD_StdEPReq+0x30>
 80093b0:	2b40      	cmp	r3, #64	; 0x40
 80093b2:	f200 8146 	bhi.w	8009642 <USBD_StdEPReq+0x2b2>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <USBD_StdEPReq+0x40>
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	f040 8141 	bne.w	8009642 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
      break;
 80093ce:	e13d      	b.n	800964c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093d8:	2b20      	cmp	r3, #32
 80093da:	d10a      	bne.n	80093f2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]

        return ret;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	e12d      	b.n	800964e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d007      	beq.n	800940a <USBD_StdEPReq+0x7a>
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	f300 811b 	bgt.w	8009636 <USBD_StdEPReq+0x2a6>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d072      	beq.n	80094ea <USBD_StdEPReq+0x15a>
 8009404:	2b01      	cmp	r3, #1
 8009406:	d03a      	beq.n	800947e <USBD_StdEPReq+0xee>
 8009408:	e115      	b.n	8009636 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009410:	2b02      	cmp	r3, #2
 8009412:	d002      	beq.n	800941a <USBD_StdEPReq+0x8a>
 8009414:	2b03      	cmp	r3, #3
 8009416:	d015      	beq.n	8009444 <USBD_StdEPReq+0xb4>
 8009418:	e02b      	b.n	8009472 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <USBD_StdEPReq+0xaa>
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d009      	beq.n	800943a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f8 fbc4 	bl	8001bb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009430:	2180      	movs	r1, #128	; 0x80
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f8 fbc0 	bl	8001bb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009438:	e020      	b.n	800947c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc1e 	bl	8009c7e <USBD_CtlError>
              break;
 8009442:	e01b      	b.n	800947c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10e      	bne.n	800946a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00b      	beq.n	800946a <USBD_StdEPReq+0xda>
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b80      	cmp	r3, #128	; 0x80
 8009456:	d008      	beq.n	800946a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	88db      	ldrh	r3, [r3, #6]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7f8 fba7 	bl	8001bb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fccf 	bl	8009e0e <USBD_CtlSendStatus>

              break;
 8009470:	e004      	b.n	800947c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc02 	bl	8009c7e <USBD_CtlError>
              break;
 800947a:	bf00      	nop
          }
          break;
 800947c:	e0e0      	b.n	8009640 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	2b02      	cmp	r3, #2
 8009486:	d002      	beq.n	800948e <USBD_StdEPReq+0xfe>
 8009488:	2b03      	cmp	r3, #3
 800948a:	d015      	beq.n	80094b8 <USBD_StdEPReq+0x128>
 800948c:	e026      	b.n	80094dc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <USBD_StdEPReq+0x11e>
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	2b80      	cmp	r3, #128	; 0x80
 8009498:	d009      	beq.n	80094ae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7f8 fb8a 	bl	8001bb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094a4:	2180      	movs	r1, #128	; 0x80
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7f8 fb86 	bl	8001bb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094ac:	e01c      	b.n	80094e8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fbe4 	bl	8009c7e <USBD_CtlError>
              break;
 80094b6:	e017      	b.n	80094e8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	885b      	ldrh	r3, [r3, #2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d112      	bne.n	80094e6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7f8 fb91 	bl	8001bf6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fc9a 	bl	8009e0e <USBD_CtlSendStatus>
              }
              break;
 80094da:	e004      	b.n	80094e6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fbcd 	bl	8009c7e <USBD_CtlError>
              break;
 80094e4:	e000      	b.n	80094e8 <USBD_StdEPReq+0x158>
              break;
 80094e6:	bf00      	nop
          }
          break;
 80094e8:	e0aa      	b.n	8009640 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d002      	beq.n	80094fa <USBD_StdEPReq+0x16a>
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d032      	beq.n	800955e <USBD_StdEPReq+0x1ce>
 80094f8:	e097      	b.n	800962a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <USBD_StdEPReq+0x180>
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b80      	cmp	r3, #128	; 0x80
 8009504:	d004      	beq.n	8009510 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fbb8 	bl	8009c7e <USBD_CtlError>
                break;
 800950e:	e091      	b.n	8009634 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009514:	2b00      	cmp	r3, #0
 8009516:	da0b      	bge.n	8009530 <USBD_StdEPReq+0x1a0>
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	3310      	adds	r3, #16
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	3304      	adds	r3, #4
 800952e:	e00b      	b.n	8009548 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	4413      	add	r3, r2
 8009546:	3304      	adds	r3, #4
 8009548:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2202      	movs	r2, #2
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fbfb 	bl	8009d52 <USBD_CtlSendData>
              break;
 800955c:	e06a      	b.n	8009634 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800955e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009562:	2b00      	cmp	r3, #0
 8009564:	da11      	bge.n	800958a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	3318      	adds	r3, #24
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d117      	bne.n	80095b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fb7b 	bl	8009c7e <USBD_CtlError>
                  break;
 8009588:	e054      	b.n	8009634 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fb68 	bl	8009c7e <USBD_CtlError>
                  break;
 80095ae:	e041      	b.n	8009634 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da0b      	bge.n	80095d0 <USBD_StdEPReq+0x240>
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	3310      	adds	r3, #16
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	4413      	add	r3, r2
 80095cc:	3304      	adds	r3, #4
 80095ce:	e00b      	b.n	80095e8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	4413      	add	r3, r2
 80095e6:	3304      	adds	r3, #4
 80095e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <USBD_StdEPReq+0x266>
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2b80      	cmp	r3, #128	; 0x80
 80095f4:	d103      	bne.n	80095fe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	e00e      	b.n	800961c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7f8 fb16 	bl	8001c34 <USBD_LL_IsStallEP>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2201      	movs	r2, #1
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e002      	b.n	800961c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2202      	movs	r2, #2
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fb95 	bl	8009d52 <USBD_CtlSendData>
              break;
 8009628:	e004      	b.n	8009634 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fb26 	bl	8009c7e <USBD_CtlError>
              break;
 8009632:	bf00      	nop
          }
          break;
 8009634:	e004      	b.n	8009640 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fb20 	bl	8009c7e <USBD_CtlError>
          break;
 800963e:	bf00      	nop
      }
      break;
 8009640:	e004      	b.n	800964c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb1a 	bl	8009c7e <USBD_CtlError>
      break;
 800964a:	bf00      	nop
  }

  return ret;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800966a:	2300      	movs	r3, #0
 800966c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	885b      	ldrh	r3, [r3, #2]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	b29b      	uxth	r3, r3
 8009676:	3b01      	subs	r3, #1
 8009678:	2b06      	cmp	r3, #6
 800967a:	f200 8128 	bhi.w	80098ce <USBD_GetDescriptor+0x276>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <USBD_GetDescriptor+0x2c>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	080096a1 	.word	0x080096a1
 8009688:	080096b9 	.word	0x080096b9
 800968c:	080096f9 	.word	0x080096f9
 8009690:	080098cf 	.word	0x080098cf
 8009694:	080098cf 	.word	0x080098cf
 8009698:	0800986f 	.word	0x0800986f
 800969c:	0800989b 	.word	0x0800989b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	7c12      	ldrb	r2, [r2, #16]
 80096ac:	f107 0108 	add.w	r1, r7, #8
 80096b0:	4610      	mov	r0, r2
 80096b2:	4798      	blx	r3
 80096b4:	60f8      	str	r0, [r7, #12]
      break;
 80096b6:	e112      	b.n	80098de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7c1b      	ldrb	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10d      	bne.n	80096dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	f107 0208 	add.w	r2, r7, #8
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3301      	adds	r3, #1
 80096d6:	2202      	movs	r2, #2
 80096d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096da:	e100      	b.n	80098de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	f107 0208 	add.w	r2, r7, #8
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
 80096ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3301      	adds	r3, #1
 80096f2:	2202      	movs	r2, #2
 80096f4:	701a      	strb	r2, [r3, #0]
      break;
 80096f6:	e0f2      	b.n	80098de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	885b      	ldrh	r3, [r3, #2]
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b05      	cmp	r3, #5
 8009700:	f200 80ac 	bhi.w	800985c <USBD_GetDescriptor+0x204>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <USBD_GetDescriptor+0xb4>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009725 	.word	0x08009725
 8009710:	08009759 	.word	0x08009759
 8009714:	0800978d 	.word	0x0800978d
 8009718:	080097c1 	.word	0x080097c1
 800971c:	080097f5 	.word	0x080097f5
 8009720:	08009829 	.word	0x08009829
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e091      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa97 	bl	8009c7e <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e089      	b.n	800986c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e077      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa7d 	bl	8009c7e <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e06f      	b.n	800986c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e05d      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa63 	bl	8009c7e <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e055      	b.n	800986c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e2:	e043      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa49 	bl	8009c7e <USBD_CtlError>
            err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
          break;
 80097f2:	e03b      	b.n	800986c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7c12      	ldrb	r2, [r2, #16]
 800980c:	f107 0108 	add.w	r1, r7, #8
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009816:	e029      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa2f 	bl	8009c7e <USBD_CtlError>
            err++;
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	3301      	adds	r3, #1
 8009824:	72fb      	strb	r3, [r7, #11]
          break;
 8009826:	e021      	b.n	800986c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00b      	beq.n	800984c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	7c12      	ldrb	r2, [r2, #16]
 8009840:	f107 0108 	add.w	r1, r7, #8
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
 8009848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984a:	e00f      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa15 	bl	8009c7e <USBD_CtlError>
            err++;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	3301      	adds	r3, #1
 8009858:	72fb      	strb	r3, [r7, #11]
          break;
 800985a:	e007      	b.n	800986c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa0d 	bl	8009c7e <USBD_CtlError>
          err++;
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	3301      	adds	r3, #1
 8009868:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800986a:	e038      	b.n	80098de <USBD_GetDescriptor+0x286>
 800986c:	e037      	b.n	80098de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7c1b      	ldrb	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987e:	f107 0208 	add.w	r2, r7, #8
 8009882:	4610      	mov	r0, r2
 8009884:	4798      	blx	r3
 8009886:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009888:	e029      	b.n	80098de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f9f6 	bl	8009c7e <USBD_CtlError>
        err++;
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	3301      	adds	r3, #1
 8009896:	72fb      	strb	r3, [r7, #11]
      break;
 8009898:	e021      	b.n	80098de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	7c1b      	ldrb	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10d      	bne.n	80098be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	f107 0208 	add.w	r2, r7, #8
 80098ae:	4610      	mov	r0, r2
 80098b0:	4798      	blx	r3
 80098b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	2207      	movs	r2, #7
 80098ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098bc:	e00f      	b.n	80098de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f9dc 	bl	8009c7e <USBD_CtlError>
        err++;
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	3301      	adds	r3, #1
 80098ca:	72fb      	strb	r3, [r7, #11]
      break;
 80098cc:	e007      	b.n	80098de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f9d4 	bl	8009c7e <USBD_CtlError>
      err++;
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	3301      	adds	r3, #1
 80098da:	72fb      	strb	r3, [r7, #11]
      break;
 80098dc:	bf00      	nop
  }

  if (err != 0U)
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11c      	bne.n	800991e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80098e4:	893b      	ldrh	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d011      	beq.n	800990e <USBD_GetDescriptor+0x2b6>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	88db      	ldrh	r3, [r3, #6]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00d      	beq.n	800990e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	88da      	ldrh	r2, [r3, #6]
 80098f6:	893b      	ldrh	r3, [r7, #8]
 80098f8:	4293      	cmp	r3, r2
 80098fa:	bf28      	it	cs
 80098fc:	4613      	movcs	r3, r2
 80098fe:	b29b      	uxth	r3, r3
 8009900:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009902:	893b      	ldrh	r3, [r7, #8]
 8009904:	461a      	mov	r2, r3
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fa22 	bl	8009d52 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	88db      	ldrh	r3, [r3, #6]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d104      	bne.n	8009920 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa79 	bl	8009e0e <USBD_CtlSendStatus>
 800991c:	e000      	b.n	8009920 <USBD_GetDescriptor+0x2c8>
    return;
 800991e:	bf00      	nop
    }
  }
}
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop

08009928 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	889b      	ldrh	r3, [r3, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d130      	bne.n	800999c <USBD_SetAddress+0x74>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	88db      	ldrh	r3, [r3, #6]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d12c      	bne.n	800999c <USBD_SetAddress+0x74>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	885b      	ldrh	r3, [r3, #2]
 8009946:	2b7f      	cmp	r3, #127	; 0x7f
 8009948:	d828      	bhi.n	800999c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009954:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995c:	2b03      	cmp	r3, #3
 800995e:	d104      	bne.n	800996a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f98b 	bl	8009c7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009968:	e01d      	b.n	80099a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	7bfa      	ldrb	r2, [r7, #15]
 800996e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7f8 f988 	bl	8001c8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fa46 	bl	8009e0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009990:	e009      	b.n	80099a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999a:	e004      	b.n	80099a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f96d 	bl	8009c7e <USBD_CtlError>
  }
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	885b      	ldrh	r3, [r3, #2]
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	4b41      	ldr	r3, [pc, #260]	; (8009ac8 <USBD_SetConfig+0x118>)
 80099c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099c4:	4b40      	ldr	r3, [pc, #256]	; (8009ac8 <USBD_SetConfig+0x118>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d904      	bls.n	80099d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f955 	bl	8009c7e <USBD_CtlError>
 80099d4:	e075      	b.n	8009ac2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d002      	beq.n	80099e6 <USBD_SetConfig+0x36>
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d023      	beq.n	8009a2c <USBD_SetConfig+0x7c>
 80099e4:	e062      	b.n	8009aac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80099e6:	4b38      	ldr	r3, [pc, #224]	; (8009ac8 <USBD_SetConfig+0x118>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d01a      	beq.n	8009a24 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80099ee:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <USBD_SetConfig+0x118>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2203      	movs	r2, #3
 80099fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a00:	4b31      	ldr	r3, [pc, #196]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff f9e8 	bl	8008ddc <USBD_SetClassConfig>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d104      	bne.n	8009a1c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f932 	bl	8009c7e <USBD_CtlError>
            return;
 8009a1a:	e052      	b.n	8009ac2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f9f6 	bl	8009e0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a22:	e04e      	b.n	8009ac2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f9f2 	bl	8009e0e <USBD_CtlSendStatus>
        break;
 8009a2a:	e04a      	b.n	8009ac2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009a2c:	4b26      	ldr	r3, [pc, #152]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d112      	bne.n	8009a5a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009a3c:	4b22      	ldr	r3, [pc, #136]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a46:	4b20      	ldr	r3, [pc, #128]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff f9e4 	bl	8008e1a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f9db 	bl	8009e0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a58:	e033      	b.n	8009ac2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009a5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d01d      	beq.n	8009aa4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff f9d2 	bl	8008e1a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a80:	4b11      	ldr	r3, [pc, #68]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff f9a8 	bl	8008ddc <USBD_SetClassConfig>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d104      	bne.n	8009a9c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f8f2 	bl	8009c7e <USBD_CtlError>
            return;
 8009a9a:	e012      	b.n	8009ac2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f9b6 	bl	8009e0e <USBD_CtlSendStatus>
        break;
 8009aa2:	e00e      	b.n	8009ac2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f9b2 	bl	8009e0e <USBD_CtlSendStatus>
        break;
 8009aaa:	e00a      	b.n	8009ac2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f8e5 	bl	8009c7e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <USBD_SetConfig+0x118>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff f9ad 	bl	8008e1a <USBD_ClrClassConfig>
        break;
 8009ac0:	bf00      	nop
    }
  }
}
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20001450 	.word	0x20001450

08009acc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	88db      	ldrh	r3, [r3, #6]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d004      	beq.n	8009ae8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f8cc 	bl	8009c7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ae6:	e022      	b.n	8009b2e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	dc02      	bgt.n	8009af8 <USBD_GetConfig+0x2c>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	dc03      	bgt.n	8009afe <USBD_GetConfig+0x32>
 8009af6:	e015      	b.n	8009b24 <USBD_GetConfig+0x58>
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d00b      	beq.n	8009b14 <USBD_GetConfig+0x48>
 8009afc:	e012      	b.n	8009b24 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3308      	adds	r3, #8
 8009b08:	2201      	movs	r2, #1
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f920 	bl	8009d52 <USBD_CtlSendData>
        break;
 8009b12:	e00c      	b.n	8009b2e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3304      	adds	r3, #4
 8009b18:	2201      	movs	r2, #1
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f918 	bl	8009d52 <USBD_CtlSendData>
        break;
 8009b22:	e004      	b.n	8009b2e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f8a9 	bl	8009c7e <USBD_CtlError>
        break;
 8009b2c:	bf00      	nop
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b46:	3b01      	subs	r3, #1
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d81e      	bhi.n	8009b8a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	88db      	ldrh	r3, [r3, #6]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d004      	beq.n	8009b5e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f891 	bl	8009c7e <USBD_CtlError>
        break;
 8009b5c:	e01a      	b.n	8009b94 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f043 0202 	orr.w	r2, r3, #2
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	2202      	movs	r2, #2
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f8e5 	bl	8009d52 <USBD_CtlSendData>
      break;
 8009b88:	e004      	b.n	8009b94 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f876 	bl	8009c7e <USBD_CtlError>
      break;
 8009b92:	bf00      	nop
  }
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d106      	bne.n	8009bbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f929 	bl	8009e0e <USBD_CtlSendStatus>
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d80b      	bhi.n	8009bf2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d10c      	bne.n	8009bfc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f90f 	bl	8009e0e <USBD_CtlSendStatus>
      }
      break;
 8009bf0:	e004      	b.n	8009bfc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f842 	bl	8009c7e <USBD_CtlError>
      break;
 8009bfa:	e000      	b.n	8009bfe <USBD_ClrFeature+0x3a>
      break;
 8009bfc:	bf00      	nop
  }
}
 8009bfe:	bf00      	nop
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781a      	ldrb	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785a      	ldrb	r2, [r3, #1]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	3302      	adds	r3, #2
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	3303      	adds	r3, #3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	4413      	add	r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	3305      	adds	r3, #5
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4413      	add	r3, r2
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	3306      	adds	r3, #6
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	3307      	adds	r3, #7
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	80da      	strh	r2, [r3, #6]

}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr

08009c7e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f7 ff94 	bl	8001bb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c90:	2100      	movs	r1, #0
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7f7 ff90 	bl	8001bb8 <USBD_LL_StallEP>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d032      	beq.n	8009d1c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 f834 	bl	8009d24 <USBD_GetLen>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	75fa      	strb	r2, [r7, #23]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	7812      	ldrb	r2, [r2, #0]
 8009cda:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	75fa      	strb	r2, [r7, #23]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	2203      	movs	r2, #3
 8009cea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009cec:	e012      	b.n	8009d14 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	60fa      	str	r2, [r7, #12]
 8009cf4:	7dfa      	ldrb	r2, [r7, #23]
 8009cf6:	1c51      	adds	r1, r2, #1
 8009cf8:	75f9      	strb	r1, [r7, #23]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	440a      	add	r2, r1
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	75fa      	strb	r2, [r7, #23]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4413      	add	r3, r2
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e8      	bne.n	8009cee <USBD_GetString+0x4e>
    }
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009d30:	e005      	b.n	8009d3e <USBD_GetLen+0x1a>
  {
    len++;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	3301      	adds	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1f5      	bne.n	8009d32 <USBD_GetLen+0xe>
  }

  return len;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bc80      	pop	{r7}
 8009d50:	4770      	bx	lr

08009d52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d68:	88fa      	ldrh	r2, [r7, #6]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d6e:	88fa      	ldrh	r2, [r7, #6]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7f7 ffa5 	bl	8001cca <USBD_LL_Transmit>

  return USBD_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	4613      	mov	r3, r2
 8009d96:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7f7 ff93 	bl	8001cca <USBD_LL_Transmit>

  return USBD_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	4613      	mov	r3, r2
 8009dba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009dc4:	88fa      	ldrh	r2, [r7, #6]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009dcc:	88fa      	ldrh	r2, [r7, #6]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dd4:	88fb      	ldrh	r3, [r7, #6]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7f7 ff98 	bl	8001d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	4613      	mov	r3, r2
 8009df6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df8:	88fb      	ldrh	r3, [r7, #6]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7f7 ff86 	bl	8001d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2204      	movs	r2, #4
 8009e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2200      	movs	r2, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7f7 ff50 	bl	8001cca <USBD_LL_Transmit>

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2205      	movs	r2, #5
 8009e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e44:	2300      	movs	r3, #0
 8009e46:	2200      	movs	r2, #0
 8009e48:	2100      	movs	r1, #0
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f7 ff60 	bl	8001d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <__errno>:
 8009e5c:	4b01      	ldr	r3, [pc, #4]	; (8009e64 <__errno+0x8>)
 8009e5e:	6818      	ldr	r0, [r3, #0]
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000180 	.word	0x20000180

08009e68 <__libc_init_array>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	2600      	movs	r6, #0
 8009e6c:	4d0c      	ldr	r5, [pc, #48]	; (8009ea0 <__libc_init_array+0x38>)
 8009e6e:	4c0d      	ldr	r4, [pc, #52]	; (8009ea4 <__libc_init_array+0x3c>)
 8009e70:	1b64      	subs	r4, r4, r5
 8009e72:	10a4      	asrs	r4, r4, #2
 8009e74:	42a6      	cmp	r6, r4
 8009e76:	d109      	bne.n	8009e8c <__libc_init_array+0x24>
 8009e78:	f001 f812 	bl	800aea0 <_init>
 8009e7c:	2600      	movs	r6, #0
 8009e7e:	4d0a      	ldr	r5, [pc, #40]	; (8009ea8 <__libc_init_array+0x40>)
 8009e80:	4c0a      	ldr	r4, [pc, #40]	; (8009eac <__libc_init_array+0x44>)
 8009e82:	1b64      	subs	r4, r4, r5
 8009e84:	10a4      	asrs	r4, r4, #2
 8009e86:	42a6      	cmp	r6, r4
 8009e88:	d105      	bne.n	8009e96 <__libc_init_array+0x2e>
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e90:	4798      	blx	r3
 8009e92:	3601      	adds	r6, #1
 8009e94:	e7ee      	b.n	8009e74 <__libc_init_array+0xc>
 8009e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e9a:	4798      	blx	r3
 8009e9c:	3601      	adds	r6, #1
 8009e9e:	e7f2      	b.n	8009e86 <__libc_init_array+0x1e>
 8009ea0:	0800aff0 	.word	0x0800aff0
 8009ea4:	0800aff0 	.word	0x0800aff0
 8009ea8:	0800aff0 	.word	0x0800aff0
 8009eac:	0800aff4 	.word	0x0800aff4

08009eb0 <memset>:
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	4402      	add	r2, r0
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d100      	bne.n	8009eba <memset+0xa>
 8009eb8:	4770      	bx	lr
 8009eba:	f803 1b01 	strb.w	r1, [r3], #1
 8009ebe:	e7f9      	b.n	8009eb4 <memset+0x4>

08009ec0 <iprintf>:
 8009ec0:	b40f      	push	{r0, r1, r2, r3}
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <iprintf+0x2c>)
 8009ec4:	b513      	push	{r0, r1, r4, lr}
 8009ec6:	681c      	ldr	r4, [r3, #0]
 8009ec8:	b124      	cbz	r4, 8009ed4 <iprintf+0x14>
 8009eca:	69a3      	ldr	r3, [r4, #24]
 8009ecc:	b913      	cbnz	r3, 8009ed4 <iprintf+0x14>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 f87a 	bl	8009fc8 <__sinit>
 8009ed4:	ab05      	add	r3, sp, #20
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	9a04      	ldr	r2, [sp, #16]
 8009eda:	68a1      	ldr	r1, [r4, #8]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	f000 f9cf 	bl	800a280 <_vfiprintf_r>
 8009ee2:	b002      	add	sp, #8
 8009ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee8:	b004      	add	sp, #16
 8009eea:	4770      	bx	lr
 8009eec:	20000180 	.word	0x20000180

08009ef0 <putchar>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4b08      	ldr	r3, [pc, #32]	; (8009f14 <putchar+0x24>)
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	681c      	ldr	r4, [r3, #0]
 8009ef8:	b124      	cbz	r4, 8009f04 <putchar+0x14>
 8009efa:	69a3      	ldr	r3, [r4, #24]
 8009efc:	b913      	cbnz	r3, 8009f04 <putchar+0x14>
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f862 	bl	8009fc8 <__sinit>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	68a2      	ldr	r2, [r4, #8]
 8009f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f0e:	f000 bc7d 	b.w	800a80c <_putc_r>
 8009f12:	bf00      	nop
 8009f14:	20000180 	.word	0x20000180

08009f18 <std>:
 8009f18:	2300      	movs	r3, #0
 8009f1a:	b510      	push	{r4, lr}
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f26:	6083      	str	r3, [r0, #8]
 8009f28:	8181      	strh	r1, [r0, #12]
 8009f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f2c:	81c2      	strh	r2, [r0, #14]
 8009f2e:	6183      	str	r3, [r0, #24]
 8009f30:	4619      	mov	r1, r3
 8009f32:	2208      	movs	r2, #8
 8009f34:	305c      	adds	r0, #92	; 0x5c
 8009f36:	f7ff ffbb 	bl	8009eb0 <memset>
 8009f3a:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <std+0x38>)
 8009f3c:	6224      	str	r4, [r4, #32]
 8009f3e:	6263      	str	r3, [r4, #36]	; 0x24
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <std+0x3c>)
 8009f42:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f44:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <std+0x40>)
 8009f46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f48:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <std+0x44>)
 8009f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	bf00      	nop
 8009f50:	0800a8bd 	.word	0x0800a8bd
 8009f54:	0800a8df 	.word	0x0800a8df
 8009f58:	0800a917 	.word	0x0800a917
 8009f5c:	0800a93b 	.word	0x0800a93b

08009f60 <_cleanup_r>:
 8009f60:	4901      	ldr	r1, [pc, #4]	; (8009f68 <_cleanup_r+0x8>)
 8009f62:	f000 b8af 	b.w	800a0c4 <_fwalk_reent>
 8009f66:	bf00      	nop
 8009f68:	0800ac0d 	.word	0x0800ac0d

08009f6c <__sfmoreglue>:
 8009f6c:	2268      	movs	r2, #104	; 0x68
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	1e4d      	subs	r5, r1, #1
 8009f72:	4355      	muls	r5, r2
 8009f74:	460e      	mov	r6, r1
 8009f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f7a:	f000 f8e5 	bl	800a148 <_malloc_r>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	b140      	cbz	r0, 8009f94 <__sfmoreglue+0x28>
 8009f82:	2100      	movs	r1, #0
 8009f84:	e9c0 1600 	strd	r1, r6, [r0]
 8009f88:	300c      	adds	r0, #12
 8009f8a:	60a0      	str	r0, [r4, #8]
 8009f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f90:	f7ff ff8e 	bl	8009eb0 <memset>
 8009f94:	4620      	mov	r0, r4
 8009f96:	bd70      	pop	{r4, r5, r6, pc}

08009f98 <__sfp_lock_acquire>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__sfp_lock_acquire+0x8>)
 8009f9a:	f000 b8b3 	b.w	800a104 <__retarget_lock_acquire_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	20001452 	.word	0x20001452

08009fa4 <__sfp_lock_release>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	; (8009fac <__sfp_lock_release+0x8>)
 8009fa6:	f000 b8ae 	b.w	800a106 <__retarget_lock_release_recursive>
 8009faa:	bf00      	nop
 8009fac:	20001452 	.word	0x20001452

08009fb0 <__sinit_lock_acquire>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	; (8009fb8 <__sinit_lock_acquire+0x8>)
 8009fb2:	f000 b8a7 	b.w	800a104 <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	20001453 	.word	0x20001453

08009fbc <__sinit_lock_release>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__sinit_lock_release+0x8>)
 8009fbe:	f000 b8a2 	b.w	800a106 <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20001453 	.word	0x20001453

08009fc8 <__sinit>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	4604      	mov	r4, r0
 8009fcc:	f7ff fff0 	bl	8009fb0 <__sinit_lock_acquire>
 8009fd0:	69a3      	ldr	r3, [r4, #24]
 8009fd2:	b11b      	cbz	r3, 8009fdc <__sinit+0x14>
 8009fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd8:	f7ff bff0 	b.w	8009fbc <__sinit_lock_release>
 8009fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8009fe2:	4b13      	ldr	r3, [pc, #76]	; (800a030 <__sinit+0x68>)
 8009fe4:	4a13      	ldr	r2, [pc, #76]	; (800a034 <__sinit+0x6c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fea:	42a3      	cmp	r3, r4
 8009fec:	bf08      	it	eq
 8009fee:	2301      	moveq	r3, #1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	bf08      	it	eq
 8009ff4:	61a3      	streq	r3, [r4, #24]
 8009ff6:	f000 f81f 	bl	800a038 <__sfp>
 8009ffa:	6060      	str	r0, [r4, #4]
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 f81b 	bl	800a038 <__sfp>
 800a002:	60a0      	str	r0, [r4, #8]
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f817 	bl	800a038 <__sfp>
 800a00a:	2200      	movs	r2, #0
 800a00c:	2104      	movs	r1, #4
 800a00e:	60e0      	str	r0, [r4, #12]
 800a010:	6860      	ldr	r0, [r4, #4]
 800a012:	f7ff ff81 	bl	8009f18 <std>
 800a016:	2201      	movs	r2, #1
 800a018:	2109      	movs	r1, #9
 800a01a:	68a0      	ldr	r0, [r4, #8]
 800a01c:	f7ff ff7c 	bl	8009f18 <std>
 800a020:	2202      	movs	r2, #2
 800a022:	2112      	movs	r1, #18
 800a024:	68e0      	ldr	r0, [r4, #12]
 800a026:	f7ff ff77 	bl	8009f18 <std>
 800a02a:	2301      	movs	r3, #1
 800a02c:	61a3      	str	r3, [r4, #24]
 800a02e:	e7d1      	b.n	8009fd4 <__sinit+0xc>
 800a030:	0800af58 	.word	0x0800af58
 800a034:	08009f61 	.word	0x08009f61

0800a038 <__sfp>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	4607      	mov	r7, r0
 800a03c:	f7ff ffac 	bl	8009f98 <__sfp_lock_acquire>
 800a040:	4b1e      	ldr	r3, [pc, #120]	; (800a0bc <__sfp+0x84>)
 800a042:	681e      	ldr	r6, [r3, #0]
 800a044:	69b3      	ldr	r3, [r6, #24]
 800a046:	b913      	cbnz	r3, 800a04e <__sfp+0x16>
 800a048:	4630      	mov	r0, r6
 800a04a:	f7ff ffbd 	bl	8009fc8 <__sinit>
 800a04e:	3648      	adds	r6, #72	; 0x48
 800a050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a054:	3b01      	subs	r3, #1
 800a056:	d503      	bpl.n	800a060 <__sfp+0x28>
 800a058:	6833      	ldr	r3, [r6, #0]
 800a05a:	b30b      	cbz	r3, 800a0a0 <__sfp+0x68>
 800a05c:	6836      	ldr	r6, [r6, #0]
 800a05e:	e7f7      	b.n	800a050 <__sfp+0x18>
 800a060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a064:	b9d5      	cbnz	r5, 800a09c <__sfp+0x64>
 800a066:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <__sfp+0x88>)
 800a068:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a06c:	60e3      	str	r3, [r4, #12]
 800a06e:	6665      	str	r5, [r4, #100]	; 0x64
 800a070:	f000 f847 	bl	800a102 <__retarget_lock_init_recursive>
 800a074:	f7ff ff96 	bl	8009fa4 <__sfp_lock_release>
 800a078:	2208      	movs	r2, #8
 800a07a:	4629      	mov	r1, r5
 800a07c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a084:	6025      	str	r5, [r4, #0]
 800a086:	61a5      	str	r5, [r4, #24]
 800a088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a08c:	f7ff ff10 	bl	8009eb0 <memset>
 800a090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a098:	4620      	mov	r0, r4
 800a09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a09c:	3468      	adds	r4, #104	; 0x68
 800a09e:	e7d9      	b.n	800a054 <__sfp+0x1c>
 800a0a0:	2104      	movs	r1, #4
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f7ff ff62 	bl	8009f6c <__sfmoreglue>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	6030      	str	r0, [r6, #0]
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d1d5      	bne.n	800a05c <__sfp+0x24>
 800a0b0:	f7ff ff78 	bl	8009fa4 <__sfp_lock_release>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	e7ee      	b.n	800a098 <__sfp+0x60>
 800a0ba:	bf00      	nop
 800a0bc:	0800af58 	.word	0x0800af58
 800a0c0:	ffff0001 	.word	0xffff0001

0800a0c4 <_fwalk_reent>:
 800a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	4688      	mov	r8, r1
 800a0cc:	2700      	movs	r7, #0
 800a0ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0d6:	f1b9 0901 	subs.w	r9, r9, #1
 800a0da:	d505      	bpl.n	800a0e8 <_fwalk_reent+0x24>
 800a0dc:	6824      	ldr	r4, [r4, #0]
 800a0de:	2c00      	cmp	r4, #0
 800a0e0:	d1f7      	bne.n	800a0d2 <_fwalk_reent+0xe>
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e8:	89ab      	ldrh	r3, [r5, #12]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d907      	bls.n	800a0fe <_fwalk_reent+0x3a>
 800a0ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	d003      	beq.n	800a0fe <_fwalk_reent+0x3a>
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	47c0      	blx	r8
 800a0fc:	4307      	orrs	r7, r0
 800a0fe:	3568      	adds	r5, #104	; 0x68
 800a100:	e7e9      	b.n	800a0d6 <_fwalk_reent+0x12>

0800a102 <__retarget_lock_init_recursive>:
 800a102:	4770      	bx	lr

0800a104 <__retarget_lock_acquire_recursive>:
 800a104:	4770      	bx	lr

0800a106 <__retarget_lock_release_recursive>:
 800a106:	4770      	bx	lr

0800a108 <sbrk_aligned>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4e0e      	ldr	r6, [pc, #56]	; (800a144 <sbrk_aligned+0x3c>)
 800a10c:	460c      	mov	r4, r1
 800a10e:	6831      	ldr	r1, [r6, #0]
 800a110:	4605      	mov	r5, r0
 800a112:	b911      	cbnz	r1, 800a11a <sbrk_aligned+0x12>
 800a114:	f000 fbc2 	bl	800a89c <_sbrk_r>
 800a118:	6030      	str	r0, [r6, #0]
 800a11a:	4621      	mov	r1, r4
 800a11c:	4628      	mov	r0, r5
 800a11e:	f000 fbbd 	bl	800a89c <_sbrk_r>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	d00a      	beq.n	800a13c <sbrk_aligned+0x34>
 800a126:	1cc4      	adds	r4, r0, #3
 800a128:	f024 0403 	bic.w	r4, r4, #3
 800a12c:	42a0      	cmp	r0, r4
 800a12e:	d007      	beq.n	800a140 <sbrk_aligned+0x38>
 800a130:	1a21      	subs	r1, r4, r0
 800a132:	4628      	mov	r0, r5
 800a134:	f000 fbb2 	bl	800a89c <_sbrk_r>
 800a138:	3001      	adds	r0, #1
 800a13a:	d101      	bne.n	800a140 <sbrk_aligned+0x38>
 800a13c:	f04f 34ff 	mov.w	r4, #4294967295
 800a140:	4620      	mov	r0, r4
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	20001458 	.word	0x20001458

0800a148 <_malloc_r>:
 800a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14c:	1ccd      	adds	r5, r1, #3
 800a14e:	f025 0503 	bic.w	r5, r5, #3
 800a152:	3508      	adds	r5, #8
 800a154:	2d0c      	cmp	r5, #12
 800a156:	bf38      	it	cc
 800a158:	250c      	movcc	r5, #12
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	4607      	mov	r7, r0
 800a15e:	db01      	blt.n	800a164 <_malloc_r+0x1c>
 800a160:	42a9      	cmp	r1, r5
 800a162:	d905      	bls.n	800a170 <_malloc_r+0x28>
 800a164:	230c      	movs	r3, #12
 800a166:	2600      	movs	r6, #0
 800a168:	603b      	str	r3, [r7, #0]
 800a16a:	4630      	mov	r0, r6
 800a16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a170:	4e2e      	ldr	r6, [pc, #184]	; (800a22c <_malloc_r+0xe4>)
 800a172:	f000 fe0d 	bl	800ad90 <__malloc_lock>
 800a176:	6833      	ldr	r3, [r6, #0]
 800a178:	461c      	mov	r4, r3
 800a17a:	bb34      	cbnz	r4, 800a1ca <_malloc_r+0x82>
 800a17c:	4629      	mov	r1, r5
 800a17e:	4638      	mov	r0, r7
 800a180:	f7ff ffc2 	bl	800a108 <sbrk_aligned>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	4604      	mov	r4, r0
 800a188:	d14d      	bne.n	800a226 <_malloc_r+0xde>
 800a18a:	6834      	ldr	r4, [r6, #0]
 800a18c:	4626      	mov	r6, r4
 800a18e:	2e00      	cmp	r6, #0
 800a190:	d140      	bne.n	800a214 <_malloc_r+0xcc>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	4631      	mov	r1, r6
 800a196:	4638      	mov	r0, r7
 800a198:	eb04 0803 	add.w	r8, r4, r3
 800a19c:	f000 fb7e 	bl	800a89c <_sbrk_r>
 800a1a0:	4580      	cmp	r8, r0
 800a1a2:	d13a      	bne.n	800a21a <_malloc_r+0xd2>
 800a1a4:	6821      	ldr	r1, [r4, #0]
 800a1a6:	3503      	adds	r5, #3
 800a1a8:	1a6d      	subs	r5, r5, r1
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7ff ffa5 	bl	800a108 <sbrk_aligned>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d02b      	beq.n	800a21a <_malloc_r+0xd2>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	442b      	add	r3, r5
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	e00e      	b.n	800a1e8 <_malloc_r+0xa0>
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	1b52      	subs	r2, r2, r5
 800a1ce:	d41e      	bmi.n	800a20e <_malloc_r+0xc6>
 800a1d0:	2a0b      	cmp	r2, #11
 800a1d2:	d916      	bls.n	800a202 <_malloc_r+0xba>
 800a1d4:	1961      	adds	r1, r4, r5
 800a1d6:	42a3      	cmp	r3, r4
 800a1d8:	6025      	str	r5, [r4, #0]
 800a1da:	bf18      	it	ne
 800a1dc:	6059      	strne	r1, [r3, #4]
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	bf08      	it	eq
 800a1e2:	6031      	streq	r1, [r6, #0]
 800a1e4:	5162      	str	r2, [r4, r5]
 800a1e6:	604b      	str	r3, [r1, #4]
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f104 060b 	add.w	r6, r4, #11
 800a1ee:	f000 fdd5 	bl	800ad9c <__malloc_unlock>
 800a1f2:	f026 0607 	bic.w	r6, r6, #7
 800a1f6:	1d23      	adds	r3, r4, #4
 800a1f8:	1af2      	subs	r2, r6, r3
 800a1fa:	d0b6      	beq.n	800a16a <_malloc_r+0x22>
 800a1fc:	1b9b      	subs	r3, r3, r6
 800a1fe:	50a3      	str	r3, [r4, r2]
 800a200:	e7b3      	b.n	800a16a <_malloc_r+0x22>
 800a202:	6862      	ldr	r2, [r4, #4]
 800a204:	42a3      	cmp	r3, r4
 800a206:	bf0c      	ite	eq
 800a208:	6032      	streq	r2, [r6, #0]
 800a20a:	605a      	strne	r2, [r3, #4]
 800a20c:	e7ec      	b.n	800a1e8 <_malloc_r+0xa0>
 800a20e:	4623      	mov	r3, r4
 800a210:	6864      	ldr	r4, [r4, #4]
 800a212:	e7b2      	b.n	800a17a <_malloc_r+0x32>
 800a214:	4634      	mov	r4, r6
 800a216:	6876      	ldr	r6, [r6, #4]
 800a218:	e7b9      	b.n	800a18e <_malloc_r+0x46>
 800a21a:	230c      	movs	r3, #12
 800a21c:	4638      	mov	r0, r7
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	f000 fdbc 	bl	800ad9c <__malloc_unlock>
 800a224:	e7a1      	b.n	800a16a <_malloc_r+0x22>
 800a226:	6025      	str	r5, [r4, #0]
 800a228:	e7de      	b.n	800a1e8 <_malloc_r+0xa0>
 800a22a:	bf00      	nop
 800a22c:	20001454 	.word	0x20001454

0800a230 <__sfputc_r>:
 800a230:	6893      	ldr	r3, [r2, #8]
 800a232:	b410      	push	{r4}
 800a234:	3b01      	subs	r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	6093      	str	r3, [r2, #8]
 800a23a:	da07      	bge.n	800a24c <__sfputc_r+0x1c>
 800a23c:	6994      	ldr	r4, [r2, #24]
 800a23e:	42a3      	cmp	r3, r4
 800a240:	db01      	blt.n	800a246 <__sfputc_r+0x16>
 800a242:	290a      	cmp	r1, #10
 800a244:	d102      	bne.n	800a24c <__sfputc_r+0x1c>
 800a246:	bc10      	pop	{r4}
 800a248:	f000 bb7c 	b.w	800a944 <__swbuf_r>
 800a24c:	6813      	ldr	r3, [r2, #0]
 800a24e:	1c58      	adds	r0, r3, #1
 800a250:	6010      	str	r0, [r2, #0]
 800a252:	7019      	strb	r1, [r3, #0]
 800a254:	4608      	mov	r0, r1
 800a256:	bc10      	pop	{r4}
 800a258:	4770      	bx	lr

0800a25a <__sfputs_r>:
 800a25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	4614      	mov	r4, r2
 800a262:	18d5      	adds	r5, r2, r3
 800a264:	42ac      	cmp	r4, r5
 800a266:	d101      	bne.n	800a26c <__sfputs_r+0x12>
 800a268:	2000      	movs	r0, #0
 800a26a:	e007      	b.n	800a27c <__sfputs_r+0x22>
 800a26c:	463a      	mov	r2, r7
 800a26e:	4630      	mov	r0, r6
 800a270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a274:	f7ff ffdc 	bl	800a230 <__sfputc_r>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d1f3      	bne.n	800a264 <__sfputs_r+0xa>
 800a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a280 <_vfiprintf_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	460d      	mov	r5, r1
 800a286:	4614      	mov	r4, r2
 800a288:	4698      	mov	r8, r3
 800a28a:	4606      	mov	r6, r0
 800a28c:	b09d      	sub	sp, #116	; 0x74
 800a28e:	b118      	cbz	r0, 800a298 <_vfiprintf_r+0x18>
 800a290:	6983      	ldr	r3, [r0, #24]
 800a292:	b90b      	cbnz	r3, 800a298 <_vfiprintf_r+0x18>
 800a294:	f7ff fe98 	bl	8009fc8 <__sinit>
 800a298:	4b89      	ldr	r3, [pc, #548]	; (800a4c0 <_vfiprintf_r+0x240>)
 800a29a:	429d      	cmp	r5, r3
 800a29c:	d11b      	bne.n	800a2d6 <_vfiprintf_r+0x56>
 800a29e:	6875      	ldr	r5, [r6, #4]
 800a2a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a2:	07d9      	lsls	r1, r3, #31
 800a2a4:	d405      	bmi.n	800a2b2 <_vfiprintf_r+0x32>
 800a2a6:	89ab      	ldrh	r3, [r5, #12]
 800a2a8:	059a      	lsls	r2, r3, #22
 800a2aa:	d402      	bmi.n	800a2b2 <_vfiprintf_r+0x32>
 800a2ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ae:	f7ff ff29 	bl	800a104 <__retarget_lock_acquire_recursive>
 800a2b2:	89ab      	ldrh	r3, [r5, #12]
 800a2b4:	071b      	lsls	r3, r3, #28
 800a2b6:	d501      	bpl.n	800a2bc <_vfiprintf_r+0x3c>
 800a2b8:	692b      	ldr	r3, [r5, #16]
 800a2ba:	b9eb      	cbnz	r3, 800a2f8 <_vfiprintf_r+0x78>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f000 fba4 	bl	800aa0c <__swsetup_r>
 800a2c4:	b1c0      	cbz	r0, 800a2f8 <_vfiprintf_r+0x78>
 800a2c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c8:	07dc      	lsls	r4, r3, #31
 800a2ca:	d50e      	bpl.n	800a2ea <_vfiprintf_r+0x6a>
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	b01d      	add	sp, #116	; 0x74
 800a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	4b7b      	ldr	r3, [pc, #492]	; (800a4c4 <_vfiprintf_r+0x244>)
 800a2d8:	429d      	cmp	r5, r3
 800a2da:	d101      	bne.n	800a2e0 <_vfiprintf_r+0x60>
 800a2dc:	68b5      	ldr	r5, [r6, #8]
 800a2de:	e7df      	b.n	800a2a0 <_vfiprintf_r+0x20>
 800a2e0:	4b79      	ldr	r3, [pc, #484]	; (800a4c8 <_vfiprintf_r+0x248>)
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	bf08      	it	eq
 800a2e6:	68f5      	ldreq	r5, [r6, #12]
 800a2e8:	e7da      	b.n	800a2a0 <_vfiprintf_r+0x20>
 800a2ea:	89ab      	ldrh	r3, [r5, #12]
 800a2ec:	0598      	lsls	r0, r3, #22
 800a2ee:	d4ed      	bmi.n	800a2cc <_vfiprintf_r+0x4c>
 800a2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2f2:	f7ff ff08 	bl	800a106 <__retarget_lock_release_recursive>
 800a2f6:	e7e9      	b.n	800a2cc <_vfiprintf_r+0x4c>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fc:	2320      	movs	r3, #32
 800a2fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a302:	2330      	movs	r3, #48	; 0x30
 800a304:	f04f 0901 	mov.w	r9, #1
 800a308:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a4cc <_vfiprintf_r+0x24c>
 800a310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a314:	4623      	mov	r3, r4
 800a316:	469a      	mov	sl, r3
 800a318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a31c:	b10a      	cbz	r2, 800a322 <_vfiprintf_r+0xa2>
 800a31e:	2a25      	cmp	r2, #37	; 0x25
 800a320:	d1f9      	bne.n	800a316 <_vfiprintf_r+0x96>
 800a322:	ebba 0b04 	subs.w	fp, sl, r4
 800a326:	d00b      	beq.n	800a340 <_vfiprintf_r+0xc0>
 800a328:	465b      	mov	r3, fp
 800a32a:	4622      	mov	r2, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	4630      	mov	r0, r6
 800a330:	f7ff ff93 	bl	800a25a <__sfputs_r>
 800a334:	3001      	adds	r0, #1
 800a336:	f000 80aa 	beq.w	800a48e <_vfiprintf_r+0x20e>
 800a33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a33c:	445a      	add	r2, fp
 800a33e:	9209      	str	r2, [sp, #36]	; 0x24
 800a340:	f89a 3000 	ldrb.w	r3, [sl]
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 80a2 	beq.w	800a48e <_vfiprintf_r+0x20e>
 800a34a:	2300      	movs	r3, #0
 800a34c:	f04f 32ff 	mov.w	r2, #4294967295
 800a350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a354:	f10a 0a01 	add.w	sl, sl, #1
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	9307      	str	r3, [sp, #28]
 800a35c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a360:	931a      	str	r3, [sp, #104]	; 0x68
 800a362:	4654      	mov	r4, sl
 800a364:	2205      	movs	r2, #5
 800a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36a:	4858      	ldr	r0, [pc, #352]	; (800a4cc <_vfiprintf_r+0x24c>)
 800a36c:	f000 fd02 	bl	800ad74 <memchr>
 800a370:	9a04      	ldr	r2, [sp, #16]
 800a372:	b9d8      	cbnz	r0, 800a3ac <_vfiprintf_r+0x12c>
 800a374:	06d1      	lsls	r1, r2, #27
 800a376:	bf44      	itt	mi
 800a378:	2320      	movmi	r3, #32
 800a37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a37e:	0713      	lsls	r3, r2, #28
 800a380:	bf44      	itt	mi
 800a382:	232b      	movmi	r3, #43	; 0x2b
 800a384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a388:	f89a 3000 	ldrb.w	r3, [sl]
 800a38c:	2b2a      	cmp	r3, #42	; 0x2a
 800a38e:	d015      	beq.n	800a3bc <_vfiprintf_r+0x13c>
 800a390:	4654      	mov	r4, sl
 800a392:	2000      	movs	r0, #0
 800a394:	f04f 0c0a 	mov.w	ip, #10
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	4621      	mov	r1, r4
 800a39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a0:	3b30      	subs	r3, #48	; 0x30
 800a3a2:	2b09      	cmp	r3, #9
 800a3a4:	d94e      	bls.n	800a444 <_vfiprintf_r+0x1c4>
 800a3a6:	b1b0      	cbz	r0, 800a3d6 <_vfiprintf_r+0x156>
 800a3a8:	9207      	str	r2, [sp, #28]
 800a3aa:	e014      	b.n	800a3d6 <_vfiprintf_r+0x156>
 800a3ac:	eba0 0308 	sub.w	r3, r0, r8
 800a3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	46a2      	mov	sl, r4
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	e7d2      	b.n	800a362 <_vfiprintf_r+0xe2>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	1d19      	adds	r1, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	9103      	str	r1, [sp, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	bfbb      	ittet	lt
 800a3c8:	425b      	neglt	r3, r3
 800a3ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ce:	9307      	strge	r3, [sp, #28]
 800a3d0:	9307      	strlt	r3, [sp, #28]
 800a3d2:	bfb8      	it	lt
 800a3d4:	9204      	strlt	r2, [sp, #16]
 800a3d6:	7823      	ldrb	r3, [r4, #0]
 800a3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a3da:	d10c      	bne.n	800a3f6 <_vfiprintf_r+0x176>
 800a3dc:	7863      	ldrb	r3, [r4, #1]
 800a3de:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e0:	d135      	bne.n	800a44e <_vfiprintf_r+0x1ce>
 800a3e2:	9b03      	ldr	r3, [sp, #12]
 800a3e4:	3402      	adds	r4, #2
 800a3e6:	1d1a      	adds	r2, r3, #4
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	9203      	str	r2, [sp, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bfb8      	it	lt
 800a3f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3f4:	9305      	str	r3, [sp, #20]
 800a3f6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a4d0 <_vfiprintf_r+0x250>
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	7821      	ldrb	r1, [r4, #0]
 800a400:	f000 fcb8 	bl	800ad74 <memchr>
 800a404:	b140      	cbz	r0, 800a418 <_vfiprintf_r+0x198>
 800a406:	2340      	movs	r3, #64	; 0x40
 800a408:	eba0 000a 	sub.w	r0, r0, sl
 800a40c:	fa03 f000 	lsl.w	r0, r3, r0
 800a410:	9b04      	ldr	r3, [sp, #16]
 800a412:	3401      	adds	r4, #1
 800a414:	4303      	orrs	r3, r0
 800a416:	9304      	str	r3, [sp, #16]
 800a418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41c:	2206      	movs	r2, #6
 800a41e:	482d      	ldr	r0, [pc, #180]	; (800a4d4 <_vfiprintf_r+0x254>)
 800a420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a424:	f000 fca6 	bl	800ad74 <memchr>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d03f      	beq.n	800a4ac <_vfiprintf_r+0x22c>
 800a42c:	4b2a      	ldr	r3, [pc, #168]	; (800a4d8 <_vfiprintf_r+0x258>)
 800a42e:	bb1b      	cbnz	r3, 800a478 <_vfiprintf_r+0x1f8>
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	3307      	adds	r3, #7
 800a434:	f023 0307 	bic.w	r3, r3, #7
 800a438:	3308      	adds	r3, #8
 800a43a:	9303      	str	r3, [sp, #12]
 800a43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43e:	443b      	add	r3, r7
 800a440:	9309      	str	r3, [sp, #36]	; 0x24
 800a442:	e767      	b.n	800a314 <_vfiprintf_r+0x94>
 800a444:	460c      	mov	r4, r1
 800a446:	2001      	movs	r0, #1
 800a448:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44c:	e7a5      	b.n	800a39a <_vfiprintf_r+0x11a>
 800a44e:	2300      	movs	r3, #0
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4619      	mov	r1, r3
 800a456:	3401      	adds	r4, #1
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	4620      	mov	r0, r4
 800a45c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a460:	3a30      	subs	r2, #48	; 0x30
 800a462:	2a09      	cmp	r2, #9
 800a464:	d903      	bls.n	800a46e <_vfiprintf_r+0x1ee>
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0c5      	beq.n	800a3f6 <_vfiprintf_r+0x176>
 800a46a:	9105      	str	r1, [sp, #20]
 800a46c:	e7c3      	b.n	800a3f6 <_vfiprintf_r+0x176>
 800a46e:	4604      	mov	r4, r0
 800a470:	2301      	movs	r3, #1
 800a472:	fb0c 2101 	mla	r1, ip, r1, r2
 800a476:	e7f0      	b.n	800a45a <_vfiprintf_r+0x1da>
 800a478:	ab03      	add	r3, sp, #12
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	462a      	mov	r2, r5
 800a47e:	4630      	mov	r0, r6
 800a480:	4b16      	ldr	r3, [pc, #88]	; (800a4dc <_vfiprintf_r+0x25c>)
 800a482:	a904      	add	r1, sp, #16
 800a484:	f3af 8000 	nop.w
 800a488:	4607      	mov	r7, r0
 800a48a:	1c78      	adds	r0, r7, #1
 800a48c:	d1d6      	bne.n	800a43c <_vfiprintf_r+0x1bc>
 800a48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a490:	07d9      	lsls	r1, r3, #31
 800a492:	d405      	bmi.n	800a4a0 <_vfiprintf_r+0x220>
 800a494:	89ab      	ldrh	r3, [r5, #12]
 800a496:	059a      	lsls	r2, r3, #22
 800a498:	d402      	bmi.n	800a4a0 <_vfiprintf_r+0x220>
 800a49a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49c:	f7ff fe33 	bl	800a106 <__retarget_lock_release_recursive>
 800a4a0:	89ab      	ldrh	r3, [r5, #12]
 800a4a2:	065b      	lsls	r3, r3, #25
 800a4a4:	f53f af12 	bmi.w	800a2cc <_vfiprintf_r+0x4c>
 800a4a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4aa:	e711      	b.n	800a2d0 <_vfiprintf_r+0x50>
 800a4ac:	ab03      	add	r3, sp, #12
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <_vfiprintf_r+0x25c>)
 800a4b6:	a904      	add	r1, sp, #16
 800a4b8:	f000 f882 	bl	800a5c0 <_printf_i>
 800a4bc:	e7e4      	b.n	800a488 <_vfiprintf_r+0x208>
 800a4be:	bf00      	nop
 800a4c0:	0800af7c 	.word	0x0800af7c
 800a4c4:	0800af9c 	.word	0x0800af9c
 800a4c8:	0800af5c 	.word	0x0800af5c
 800a4cc:	0800afbc 	.word	0x0800afbc
 800a4d0:	0800afc2 	.word	0x0800afc2
 800a4d4:	0800afc6 	.word	0x0800afc6
 800a4d8:	00000000 	.word	0x00000000
 800a4dc:	0800a25b 	.word	0x0800a25b

0800a4e0 <_printf_common>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	4616      	mov	r6, r2
 800a4e6:	4699      	mov	r9, r3
 800a4e8:	688a      	ldr	r2, [r1, #8]
 800a4ea:	690b      	ldr	r3, [r1, #16]
 800a4ec:	4607      	mov	r7, r0
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	bfb8      	it	lt
 800a4f2:	4613      	movlt	r3, r2
 800a4f4:	6033      	str	r3, [r6, #0]
 800a4f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a500:	b10a      	cbz	r2, 800a506 <_printf_common+0x26>
 800a502:	3301      	adds	r3, #1
 800a504:	6033      	str	r3, [r6, #0]
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	0699      	lsls	r1, r3, #26
 800a50a:	bf42      	ittt	mi
 800a50c:	6833      	ldrmi	r3, [r6, #0]
 800a50e:	3302      	addmi	r3, #2
 800a510:	6033      	strmi	r3, [r6, #0]
 800a512:	6825      	ldr	r5, [r4, #0]
 800a514:	f015 0506 	ands.w	r5, r5, #6
 800a518:	d106      	bne.n	800a528 <_printf_common+0x48>
 800a51a:	f104 0a19 	add.w	sl, r4, #25
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	6832      	ldr	r2, [r6, #0]
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	42ab      	cmp	r3, r5
 800a526:	dc28      	bgt.n	800a57a <_printf_common+0x9a>
 800a528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a52c:	1e13      	subs	r3, r2, #0
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	bf18      	it	ne
 800a532:	2301      	movne	r3, #1
 800a534:	0692      	lsls	r2, r2, #26
 800a536:	d42d      	bmi.n	800a594 <_printf_common+0xb4>
 800a538:	4649      	mov	r1, r9
 800a53a:	4638      	mov	r0, r7
 800a53c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a540:	47c0      	blx	r8
 800a542:	3001      	adds	r0, #1
 800a544:	d020      	beq.n	800a588 <_printf_common+0xa8>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	68e5      	ldr	r5, [r4, #12]
 800a54a:	f003 0306 	and.w	r3, r3, #6
 800a54e:	2b04      	cmp	r3, #4
 800a550:	bf18      	it	ne
 800a552:	2500      	movne	r5, #0
 800a554:	6832      	ldr	r2, [r6, #0]
 800a556:	f04f 0600 	mov.w	r6, #0
 800a55a:	68a3      	ldr	r3, [r4, #8]
 800a55c:	bf08      	it	eq
 800a55e:	1aad      	subeq	r5, r5, r2
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	bf08      	it	eq
 800a564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a568:	4293      	cmp	r3, r2
 800a56a:	bfc4      	itt	gt
 800a56c:	1a9b      	subgt	r3, r3, r2
 800a56e:	18ed      	addgt	r5, r5, r3
 800a570:	341a      	adds	r4, #26
 800a572:	42b5      	cmp	r5, r6
 800a574:	d11a      	bne.n	800a5ac <_printf_common+0xcc>
 800a576:	2000      	movs	r0, #0
 800a578:	e008      	b.n	800a58c <_printf_common+0xac>
 800a57a:	2301      	movs	r3, #1
 800a57c:	4652      	mov	r2, sl
 800a57e:	4649      	mov	r1, r9
 800a580:	4638      	mov	r0, r7
 800a582:	47c0      	blx	r8
 800a584:	3001      	adds	r0, #1
 800a586:	d103      	bne.n	800a590 <_printf_common+0xb0>
 800a588:	f04f 30ff 	mov.w	r0, #4294967295
 800a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a590:	3501      	adds	r5, #1
 800a592:	e7c4      	b.n	800a51e <_printf_common+0x3e>
 800a594:	2030      	movs	r0, #48	; 0x30
 800a596:	18e1      	adds	r1, r4, r3
 800a598:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5a2:	4422      	add	r2, r4
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5aa:	e7c5      	b.n	800a538 <_printf_common+0x58>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	47c0      	blx	r8
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d0e6      	beq.n	800a588 <_printf_common+0xa8>
 800a5ba:	3601      	adds	r6, #1
 800a5bc:	e7d9      	b.n	800a572 <_printf_common+0x92>
	...

0800a5c0 <_printf_i>:
 800a5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	7e0f      	ldrb	r7, [r1, #24]
 800a5c6:	4691      	mov	r9, r2
 800a5c8:	2f78      	cmp	r7, #120	; 0x78
 800a5ca:	4680      	mov	r8, r0
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	469a      	mov	sl, r3
 800a5d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5d6:	d807      	bhi.n	800a5e8 <_printf_i+0x28>
 800a5d8:	2f62      	cmp	r7, #98	; 0x62
 800a5da:	d80a      	bhi.n	800a5f2 <_printf_i+0x32>
 800a5dc:	2f00      	cmp	r7, #0
 800a5de:	f000 80d9 	beq.w	800a794 <_printf_i+0x1d4>
 800a5e2:	2f58      	cmp	r7, #88	; 0x58
 800a5e4:	f000 80a4 	beq.w	800a730 <_printf_i+0x170>
 800a5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5f0:	e03a      	b.n	800a668 <_printf_i+0xa8>
 800a5f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5f6:	2b15      	cmp	r3, #21
 800a5f8:	d8f6      	bhi.n	800a5e8 <_printf_i+0x28>
 800a5fa:	a101      	add	r1, pc, #4	; (adr r1, 800a600 <_printf_i+0x40>)
 800a5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a600:	0800a659 	.word	0x0800a659
 800a604:	0800a66d 	.word	0x0800a66d
 800a608:	0800a5e9 	.word	0x0800a5e9
 800a60c:	0800a5e9 	.word	0x0800a5e9
 800a610:	0800a5e9 	.word	0x0800a5e9
 800a614:	0800a5e9 	.word	0x0800a5e9
 800a618:	0800a66d 	.word	0x0800a66d
 800a61c:	0800a5e9 	.word	0x0800a5e9
 800a620:	0800a5e9 	.word	0x0800a5e9
 800a624:	0800a5e9 	.word	0x0800a5e9
 800a628:	0800a5e9 	.word	0x0800a5e9
 800a62c:	0800a77b 	.word	0x0800a77b
 800a630:	0800a69d 	.word	0x0800a69d
 800a634:	0800a75d 	.word	0x0800a75d
 800a638:	0800a5e9 	.word	0x0800a5e9
 800a63c:	0800a5e9 	.word	0x0800a5e9
 800a640:	0800a79d 	.word	0x0800a79d
 800a644:	0800a5e9 	.word	0x0800a5e9
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a5e9 	.word	0x0800a5e9
 800a650:	0800a5e9 	.word	0x0800a5e9
 800a654:	0800a765 	.word	0x0800a765
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	1d1a      	adds	r2, r3, #4
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	602a      	str	r2, [r5, #0]
 800a660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a668:	2301      	movs	r3, #1
 800a66a:	e0a4      	b.n	800a7b6 <_printf_i+0x1f6>
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	6829      	ldr	r1, [r5, #0]
 800a670:	0606      	lsls	r6, r0, #24
 800a672:	f101 0304 	add.w	r3, r1, #4
 800a676:	d50a      	bpl.n	800a68e <_printf_i+0xce>
 800a678:	680e      	ldr	r6, [r1, #0]
 800a67a:	602b      	str	r3, [r5, #0]
 800a67c:	2e00      	cmp	r6, #0
 800a67e:	da03      	bge.n	800a688 <_printf_i+0xc8>
 800a680:	232d      	movs	r3, #45	; 0x2d
 800a682:	4276      	negs	r6, r6
 800a684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a688:	230a      	movs	r3, #10
 800a68a:	485e      	ldr	r0, [pc, #376]	; (800a804 <_printf_i+0x244>)
 800a68c:	e019      	b.n	800a6c2 <_printf_i+0x102>
 800a68e:	680e      	ldr	r6, [r1, #0]
 800a690:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a694:	602b      	str	r3, [r5, #0]
 800a696:	bf18      	it	ne
 800a698:	b236      	sxthne	r6, r6
 800a69a:	e7ef      	b.n	800a67c <_printf_i+0xbc>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	1d19      	adds	r1, r3, #4
 800a6a2:	6029      	str	r1, [r5, #0]
 800a6a4:	0601      	lsls	r1, r0, #24
 800a6a6:	d501      	bpl.n	800a6ac <_printf_i+0xec>
 800a6a8:	681e      	ldr	r6, [r3, #0]
 800a6aa:	e002      	b.n	800a6b2 <_printf_i+0xf2>
 800a6ac:	0646      	lsls	r6, r0, #25
 800a6ae:	d5fb      	bpl.n	800a6a8 <_printf_i+0xe8>
 800a6b0:	881e      	ldrh	r6, [r3, #0]
 800a6b2:	2f6f      	cmp	r7, #111	; 0x6f
 800a6b4:	bf0c      	ite	eq
 800a6b6:	2308      	moveq	r3, #8
 800a6b8:	230a      	movne	r3, #10
 800a6ba:	4852      	ldr	r0, [pc, #328]	; (800a804 <_printf_i+0x244>)
 800a6bc:	2100      	movs	r1, #0
 800a6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6c2:	6865      	ldr	r5, [r4, #4]
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	bfa8      	it	ge
 800a6c8:	6821      	ldrge	r1, [r4, #0]
 800a6ca:	60a5      	str	r5, [r4, #8]
 800a6cc:	bfa4      	itt	ge
 800a6ce:	f021 0104 	bicge.w	r1, r1, #4
 800a6d2:	6021      	strge	r1, [r4, #0]
 800a6d4:	b90e      	cbnz	r6, 800a6da <_printf_i+0x11a>
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	d04d      	beq.n	800a776 <_printf_i+0x1b6>
 800a6da:	4615      	mov	r5, r2
 800a6dc:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6e0:	fb03 6711 	mls	r7, r3, r1, r6
 800a6e4:	5dc7      	ldrb	r7, [r0, r7]
 800a6e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6ea:	4637      	mov	r7, r6
 800a6ec:	42bb      	cmp	r3, r7
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	d9f4      	bls.n	800a6dc <_printf_i+0x11c>
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d10b      	bne.n	800a70e <_printf_i+0x14e>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	07de      	lsls	r6, r3, #31
 800a6fa:	d508      	bpl.n	800a70e <_printf_i+0x14e>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	6861      	ldr	r1, [r4, #4]
 800a700:	4299      	cmp	r1, r3
 800a702:	bfde      	ittt	le
 800a704:	2330      	movle	r3, #48	; 0x30
 800a706:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a70a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a70e:	1b52      	subs	r2, r2, r5
 800a710:	6122      	str	r2, [r4, #16]
 800a712:	464b      	mov	r3, r9
 800a714:	4621      	mov	r1, r4
 800a716:	4640      	mov	r0, r8
 800a718:	f8cd a000 	str.w	sl, [sp]
 800a71c:	aa03      	add	r2, sp, #12
 800a71e:	f7ff fedf 	bl	800a4e0 <_printf_common>
 800a722:	3001      	adds	r0, #1
 800a724:	d14c      	bne.n	800a7c0 <_printf_i+0x200>
 800a726:	f04f 30ff 	mov.w	r0, #4294967295
 800a72a:	b004      	add	sp, #16
 800a72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a730:	4834      	ldr	r0, [pc, #208]	; (800a804 <_printf_i+0x244>)
 800a732:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a736:	6829      	ldr	r1, [r5, #0]
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a73e:	6029      	str	r1, [r5, #0]
 800a740:	061d      	lsls	r5, r3, #24
 800a742:	d514      	bpl.n	800a76e <_printf_i+0x1ae>
 800a744:	07df      	lsls	r7, r3, #31
 800a746:	bf44      	itt	mi
 800a748:	f043 0320 	orrmi.w	r3, r3, #32
 800a74c:	6023      	strmi	r3, [r4, #0]
 800a74e:	b91e      	cbnz	r6, 800a758 <_printf_i+0x198>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	f023 0320 	bic.w	r3, r3, #32
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	2310      	movs	r3, #16
 800a75a:	e7af      	b.n	800a6bc <_printf_i+0xfc>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	f043 0320 	orr.w	r3, r3, #32
 800a762:	6023      	str	r3, [r4, #0]
 800a764:	2378      	movs	r3, #120	; 0x78
 800a766:	4828      	ldr	r0, [pc, #160]	; (800a808 <_printf_i+0x248>)
 800a768:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a76c:	e7e3      	b.n	800a736 <_printf_i+0x176>
 800a76e:	0659      	lsls	r1, r3, #25
 800a770:	bf48      	it	mi
 800a772:	b2b6      	uxthmi	r6, r6
 800a774:	e7e6      	b.n	800a744 <_printf_i+0x184>
 800a776:	4615      	mov	r5, r2
 800a778:	e7bb      	b.n	800a6f2 <_printf_i+0x132>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	6826      	ldr	r6, [r4, #0]
 800a77e:	1d18      	adds	r0, r3, #4
 800a780:	6961      	ldr	r1, [r4, #20]
 800a782:	6028      	str	r0, [r5, #0]
 800a784:	0635      	lsls	r5, r6, #24
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	d501      	bpl.n	800a78e <_printf_i+0x1ce>
 800a78a:	6019      	str	r1, [r3, #0]
 800a78c:	e002      	b.n	800a794 <_printf_i+0x1d4>
 800a78e:	0670      	lsls	r0, r6, #25
 800a790:	d5fb      	bpl.n	800a78a <_printf_i+0x1ca>
 800a792:	8019      	strh	r1, [r3, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	4615      	mov	r5, r2
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	e7ba      	b.n	800a712 <_printf_i+0x152>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	1d1a      	adds	r2, r3, #4
 800a7a2:	602a      	str	r2, [r5, #0]
 800a7a4:	681d      	ldr	r5, [r3, #0]
 800a7a6:	6862      	ldr	r2, [r4, #4]
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f000 fae3 	bl	800ad74 <memchr>
 800a7ae:	b108      	cbz	r0, 800a7b4 <_printf_i+0x1f4>
 800a7b0:	1b40      	subs	r0, r0, r5
 800a7b2:	6060      	str	r0, [r4, #4]
 800a7b4:	6863      	ldr	r3, [r4, #4]
 800a7b6:	6123      	str	r3, [r4, #16]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7be:	e7a8      	b.n	800a712 <_printf_i+0x152>
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	47d0      	blx	sl
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d0ab      	beq.n	800a726 <_printf_i+0x166>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	079b      	lsls	r3, r3, #30
 800a7d2:	d413      	bmi.n	800a7fc <_printf_i+0x23c>
 800a7d4:	68e0      	ldr	r0, [r4, #12]
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	4298      	cmp	r0, r3
 800a7da:	bfb8      	it	lt
 800a7dc:	4618      	movlt	r0, r3
 800a7de:	e7a4      	b.n	800a72a <_printf_i+0x16a>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	47d0      	blx	sl
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d09b      	beq.n	800a726 <_printf_i+0x166>
 800a7ee:	3501      	adds	r5, #1
 800a7f0:	68e3      	ldr	r3, [r4, #12]
 800a7f2:	9903      	ldr	r1, [sp, #12]
 800a7f4:	1a5b      	subs	r3, r3, r1
 800a7f6:	42ab      	cmp	r3, r5
 800a7f8:	dcf2      	bgt.n	800a7e0 <_printf_i+0x220>
 800a7fa:	e7eb      	b.n	800a7d4 <_printf_i+0x214>
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	f104 0619 	add.w	r6, r4, #25
 800a802:	e7f5      	b.n	800a7f0 <_printf_i+0x230>
 800a804:	0800afcd 	.word	0x0800afcd
 800a808:	0800afde 	.word	0x0800afde

0800a80c <_putc_r>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	460d      	mov	r5, r1
 800a810:	4614      	mov	r4, r2
 800a812:	4606      	mov	r6, r0
 800a814:	b118      	cbz	r0, 800a81e <_putc_r+0x12>
 800a816:	6983      	ldr	r3, [r0, #24]
 800a818:	b90b      	cbnz	r3, 800a81e <_putc_r+0x12>
 800a81a:	f7ff fbd5 	bl	8009fc8 <__sinit>
 800a81e:	4b1c      	ldr	r3, [pc, #112]	; (800a890 <_putc_r+0x84>)
 800a820:	429c      	cmp	r4, r3
 800a822:	d124      	bne.n	800a86e <_putc_r+0x62>
 800a824:	6874      	ldr	r4, [r6, #4]
 800a826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a828:	07d8      	lsls	r0, r3, #31
 800a82a:	d405      	bmi.n	800a838 <_putc_r+0x2c>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	0599      	lsls	r1, r3, #22
 800a830:	d402      	bmi.n	800a838 <_putc_r+0x2c>
 800a832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a834:	f7ff fc66 	bl	800a104 <__retarget_lock_acquire_recursive>
 800a838:	68a3      	ldr	r3, [r4, #8]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	60a3      	str	r3, [r4, #8]
 800a840:	da05      	bge.n	800a84e <_putc_r+0x42>
 800a842:	69a2      	ldr	r2, [r4, #24]
 800a844:	4293      	cmp	r3, r2
 800a846:	db1c      	blt.n	800a882 <_putc_r+0x76>
 800a848:	b2eb      	uxtb	r3, r5
 800a84a:	2b0a      	cmp	r3, #10
 800a84c:	d019      	beq.n	800a882 <_putc_r+0x76>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	701d      	strb	r5, [r3, #0]
 800a856:	b2ed      	uxtb	r5, r5
 800a858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a85a:	07da      	lsls	r2, r3, #31
 800a85c:	d405      	bmi.n	800a86a <_putc_r+0x5e>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	059b      	lsls	r3, r3, #22
 800a862:	d402      	bmi.n	800a86a <_putc_r+0x5e>
 800a864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a866:	f7ff fc4e 	bl	800a106 <__retarget_lock_release_recursive>
 800a86a:	4628      	mov	r0, r5
 800a86c:	bd70      	pop	{r4, r5, r6, pc}
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <_putc_r+0x88>)
 800a870:	429c      	cmp	r4, r3
 800a872:	d101      	bne.n	800a878 <_putc_r+0x6c>
 800a874:	68b4      	ldr	r4, [r6, #8]
 800a876:	e7d6      	b.n	800a826 <_putc_r+0x1a>
 800a878:	4b07      	ldr	r3, [pc, #28]	; (800a898 <_putc_r+0x8c>)
 800a87a:	429c      	cmp	r4, r3
 800a87c:	bf08      	it	eq
 800a87e:	68f4      	ldreq	r4, [r6, #12]
 800a880:	e7d1      	b.n	800a826 <_putc_r+0x1a>
 800a882:	4629      	mov	r1, r5
 800a884:	4622      	mov	r2, r4
 800a886:	4630      	mov	r0, r6
 800a888:	f000 f85c 	bl	800a944 <__swbuf_r>
 800a88c:	4605      	mov	r5, r0
 800a88e:	e7e3      	b.n	800a858 <_putc_r+0x4c>
 800a890:	0800af7c 	.word	0x0800af7c
 800a894:	0800af9c 	.word	0x0800af9c
 800a898:	0800af5c 	.word	0x0800af5c

0800a89c <_sbrk_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4d05      	ldr	r5, [pc, #20]	; (800a8b8 <_sbrk_r+0x1c>)
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	602b      	str	r3, [r5, #0]
 800a8a8:	f7f6 fdda 	bl	8001460 <_sbrk>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_sbrk_r+0x1a>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_sbrk_r+0x1a>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	2000145c 	.word	0x2000145c

0800a8bc <__sread>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	f000 fab8 	bl	800ae38 <_read_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	bfab      	itete	ge
 800a8cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d0:	181b      	addge	r3, r3, r0
 800a8d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8d6:	bfac      	ite	ge
 800a8d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8da:	81a3      	strhlt	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__swrite>:
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	05db      	lsls	r3, r3, #23
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	d505      	bpl.n	800a8fc <__swrite+0x1e>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	f000 f9c4 	bl	800ac84 <_lseek_r>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	4632      	mov	r2, r6
 800a900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	4628      	mov	r0, r5
 800a908:	463b      	mov	r3, r7
 800a90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	f000 b869 	b.w	800a9e8 <_write_r>

0800a916 <__sseek>:
 800a916:	b510      	push	{r4, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 f9b1 	bl	800ac84 <_lseek_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	bf15      	itete	ne
 800a928:	6560      	strne	r0, [r4, #84]	; 0x54
 800a92a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a92e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a932:	81a3      	strheq	r3, [r4, #12]
 800a934:	bf18      	it	ne
 800a936:	81a3      	strhne	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__sclose>:
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f000 b8d3 	b.w	800aae8 <_close_r>
	...

0800a944 <__swbuf_r>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	460e      	mov	r6, r1
 800a948:	4614      	mov	r4, r2
 800a94a:	4605      	mov	r5, r0
 800a94c:	b118      	cbz	r0, 800a956 <__swbuf_r+0x12>
 800a94e:	6983      	ldr	r3, [r0, #24]
 800a950:	b90b      	cbnz	r3, 800a956 <__swbuf_r+0x12>
 800a952:	f7ff fb39 	bl	8009fc8 <__sinit>
 800a956:	4b21      	ldr	r3, [pc, #132]	; (800a9dc <__swbuf_r+0x98>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	d12b      	bne.n	800a9b4 <__swbuf_r+0x70>
 800a95c:	686c      	ldr	r4, [r5, #4]
 800a95e:	69a3      	ldr	r3, [r4, #24]
 800a960:	60a3      	str	r3, [r4, #8]
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	071a      	lsls	r2, r3, #28
 800a966:	d52f      	bpl.n	800a9c8 <__swbuf_r+0x84>
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	b36b      	cbz	r3, 800a9c8 <__swbuf_r+0x84>
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	b2f6      	uxtb	r6, r6
 800a972:	1ac0      	subs	r0, r0, r3
 800a974:	6963      	ldr	r3, [r4, #20]
 800a976:	4637      	mov	r7, r6
 800a978:	4283      	cmp	r3, r0
 800a97a:	dc04      	bgt.n	800a986 <__swbuf_r+0x42>
 800a97c:	4621      	mov	r1, r4
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 f944 	bl	800ac0c <_fflush_r>
 800a984:	bb30      	cbnz	r0, 800a9d4 <__swbuf_r+0x90>
 800a986:	68a3      	ldr	r3, [r4, #8]
 800a988:	3001      	adds	r0, #1
 800a98a:	3b01      	subs	r3, #1
 800a98c:	60a3      	str	r3, [r4, #8]
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	6022      	str	r2, [r4, #0]
 800a994:	701e      	strb	r6, [r3, #0]
 800a996:	6963      	ldr	r3, [r4, #20]
 800a998:	4283      	cmp	r3, r0
 800a99a:	d004      	beq.n	800a9a6 <__swbuf_r+0x62>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	07db      	lsls	r3, r3, #31
 800a9a0:	d506      	bpl.n	800a9b0 <__swbuf_r+0x6c>
 800a9a2:	2e0a      	cmp	r6, #10
 800a9a4:	d104      	bne.n	800a9b0 <__swbuf_r+0x6c>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f000 f92f 	bl	800ac0c <_fflush_r>
 800a9ae:	b988      	cbnz	r0, 800a9d4 <__swbuf_r+0x90>
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b4:	4b0a      	ldr	r3, [pc, #40]	; (800a9e0 <__swbuf_r+0x9c>)
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d101      	bne.n	800a9be <__swbuf_r+0x7a>
 800a9ba:	68ac      	ldr	r4, [r5, #8]
 800a9bc:	e7cf      	b.n	800a95e <__swbuf_r+0x1a>
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <__swbuf_r+0xa0>)
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	bf08      	it	eq
 800a9c4:	68ec      	ldreq	r4, [r5, #12]
 800a9c6:	e7ca      	b.n	800a95e <__swbuf_r+0x1a>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f000 f81e 	bl	800aa0c <__swsetup_r>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d0cb      	beq.n	800a96c <__swbuf_r+0x28>
 800a9d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a9d8:	e7ea      	b.n	800a9b0 <__swbuf_r+0x6c>
 800a9da:	bf00      	nop
 800a9dc:	0800af7c 	.word	0x0800af7c
 800a9e0:	0800af9c 	.word	0x0800af9c
 800a9e4:	0800af5c 	.word	0x0800af5c

0800a9e8 <_write_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4d05      	ldr	r5, [pc, #20]	; (800aa08 <_write_r+0x20>)
 800a9f4:	602a      	str	r2, [r5, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f7f6 fce5 	bl	80013c6 <_write>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_write_r+0x1e>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_write_r+0x1e>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	2000145c 	.word	0x2000145c

0800aa0c <__swsetup_r>:
 800aa0c:	4b32      	ldr	r3, [pc, #200]	; (800aad8 <__swsetup_r+0xcc>)
 800aa0e:	b570      	push	{r4, r5, r6, lr}
 800aa10:	681d      	ldr	r5, [r3, #0]
 800aa12:	4606      	mov	r6, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	b125      	cbz	r5, 800aa22 <__swsetup_r+0x16>
 800aa18:	69ab      	ldr	r3, [r5, #24]
 800aa1a:	b913      	cbnz	r3, 800aa22 <__swsetup_r+0x16>
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff fad3 	bl	8009fc8 <__sinit>
 800aa22:	4b2e      	ldr	r3, [pc, #184]	; (800aadc <__swsetup_r+0xd0>)
 800aa24:	429c      	cmp	r4, r3
 800aa26:	d10f      	bne.n	800aa48 <__swsetup_r+0x3c>
 800aa28:	686c      	ldr	r4, [r5, #4]
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa30:	0719      	lsls	r1, r3, #28
 800aa32:	d42c      	bmi.n	800aa8e <__swsetup_r+0x82>
 800aa34:	06dd      	lsls	r5, r3, #27
 800aa36:	d411      	bmi.n	800aa5c <__swsetup_r+0x50>
 800aa38:	2309      	movs	r3, #9
 800aa3a:	6033      	str	r3, [r6, #0]
 800aa3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	e03e      	b.n	800aac6 <__swsetup_r+0xba>
 800aa48:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <__swsetup_r+0xd4>)
 800aa4a:	429c      	cmp	r4, r3
 800aa4c:	d101      	bne.n	800aa52 <__swsetup_r+0x46>
 800aa4e:	68ac      	ldr	r4, [r5, #8]
 800aa50:	e7eb      	b.n	800aa2a <__swsetup_r+0x1e>
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <__swsetup_r+0xd8>)
 800aa54:	429c      	cmp	r4, r3
 800aa56:	bf08      	it	eq
 800aa58:	68ec      	ldreq	r4, [r5, #12]
 800aa5a:	e7e6      	b.n	800aa2a <__swsetup_r+0x1e>
 800aa5c:	0758      	lsls	r0, r3, #29
 800aa5e:	d512      	bpl.n	800aa86 <__swsetup_r+0x7a>
 800aa60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa62:	b141      	cbz	r1, 800aa76 <__swsetup_r+0x6a>
 800aa64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa68:	4299      	cmp	r1, r3
 800aa6a:	d002      	beq.n	800aa72 <__swsetup_r+0x66>
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 f99b 	bl	800ada8 <_free_r>
 800aa72:	2300      	movs	r3, #0
 800aa74:	6363      	str	r3, [r4, #52]	; 0x34
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa7c:	81a3      	strh	r3, [r4, #12]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6063      	str	r3, [r4, #4]
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	f043 0308 	orr.w	r3, r3, #8
 800aa8c:	81a3      	strh	r3, [r4, #12]
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	b94b      	cbnz	r3, 800aaa6 <__swsetup_r+0x9a>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa9c:	d003      	beq.n	800aaa6 <__swsetup_r+0x9a>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f000 f927 	bl	800acf4 <__smakebuf_r>
 800aaa6:	89a0      	ldrh	r0, [r4, #12]
 800aaa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaac:	f010 0301 	ands.w	r3, r0, #1
 800aab0:	d00a      	beq.n	800aac8 <__swsetup_r+0xbc>
 800aab2:	2300      	movs	r3, #0
 800aab4:	60a3      	str	r3, [r4, #8]
 800aab6:	6963      	ldr	r3, [r4, #20]
 800aab8:	425b      	negs	r3, r3
 800aaba:	61a3      	str	r3, [r4, #24]
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	b943      	cbnz	r3, 800aad2 <__swsetup_r+0xc6>
 800aac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aac4:	d1ba      	bne.n	800aa3c <__swsetup_r+0x30>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	0781      	lsls	r1, r0, #30
 800aaca:	bf58      	it	pl
 800aacc:	6963      	ldrpl	r3, [r4, #20]
 800aace:	60a3      	str	r3, [r4, #8]
 800aad0:	e7f4      	b.n	800aabc <__swsetup_r+0xb0>
 800aad2:	2000      	movs	r0, #0
 800aad4:	e7f7      	b.n	800aac6 <__swsetup_r+0xba>
 800aad6:	bf00      	nop
 800aad8:	20000180 	.word	0x20000180
 800aadc:	0800af7c 	.word	0x0800af7c
 800aae0:	0800af9c 	.word	0x0800af9c
 800aae4:	0800af5c 	.word	0x0800af5c

0800aae8 <_close_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	2300      	movs	r3, #0
 800aaec:	4d05      	ldr	r5, [pc, #20]	; (800ab04 <_close_r+0x1c>)
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f7f6 fc83 	bl	80013fe <_close>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_close_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_close_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	2000145c 	.word	0x2000145c

0800ab08 <__sflush_r>:
 800ab08:	898a      	ldrh	r2, [r1, #12]
 800ab0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	0710      	lsls	r0, r2, #28
 800ab10:	460c      	mov	r4, r1
 800ab12:	d457      	bmi.n	800abc4 <__sflush_r+0xbc>
 800ab14:	684b      	ldr	r3, [r1, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dc04      	bgt.n	800ab24 <__sflush_r+0x1c>
 800ab1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dc01      	bgt.n	800ab24 <__sflush_r+0x1c>
 800ab20:	2000      	movs	r0, #0
 800ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	d0fa      	beq.n	800ab20 <__sflush_r+0x18>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab30:	682f      	ldr	r7, [r5, #0]
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	d032      	beq.n	800ab9c <__sflush_r+0x94>
 800ab36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	075a      	lsls	r2, r3, #29
 800ab3c:	d505      	bpl.n	800ab4a <__sflush_r+0x42>
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	1ac0      	subs	r0, r0, r3
 800ab42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab44:	b10b      	cbz	r3, 800ab4a <__sflush_r+0x42>
 800ab46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab48:	1ac0      	subs	r0, r0, r3
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab50:	4628      	mov	r0, r5
 800ab52:	6a21      	ldr	r1, [r4, #32]
 800ab54:	47b0      	blx	r6
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	d106      	bne.n	800ab6a <__sflush_r+0x62>
 800ab5c:	6829      	ldr	r1, [r5, #0]
 800ab5e:	291d      	cmp	r1, #29
 800ab60:	d82c      	bhi.n	800abbc <__sflush_r+0xb4>
 800ab62:	4a29      	ldr	r2, [pc, #164]	; (800ac08 <__sflush_r+0x100>)
 800ab64:	40ca      	lsrs	r2, r1
 800ab66:	07d6      	lsls	r6, r2, #31
 800ab68:	d528      	bpl.n	800abbc <__sflush_r+0xb4>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	6062      	str	r2, [r4, #4]
 800ab6e:	6922      	ldr	r2, [r4, #16]
 800ab70:	04d9      	lsls	r1, r3, #19
 800ab72:	6022      	str	r2, [r4, #0]
 800ab74:	d504      	bpl.n	800ab80 <__sflush_r+0x78>
 800ab76:	1c42      	adds	r2, r0, #1
 800ab78:	d101      	bne.n	800ab7e <__sflush_r+0x76>
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	b903      	cbnz	r3, 800ab80 <__sflush_r+0x78>
 800ab7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab82:	602f      	str	r7, [r5, #0]
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d0cb      	beq.n	800ab20 <__sflush_r+0x18>
 800ab88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	d002      	beq.n	800ab96 <__sflush_r+0x8e>
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 f909 	bl	800ada8 <_free_r>
 800ab96:	2000      	movs	r0, #0
 800ab98:	6360      	str	r0, [r4, #52]	; 0x34
 800ab9a:	e7c2      	b.n	800ab22 <__sflush_r+0x1a>
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b0      	blx	r6
 800aba4:	1c41      	adds	r1, r0, #1
 800aba6:	d1c7      	bne.n	800ab38 <__sflush_r+0x30>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0c4      	beq.n	800ab38 <__sflush_r+0x30>
 800abae:	2b1d      	cmp	r3, #29
 800abb0:	d001      	beq.n	800abb6 <__sflush_r+0xae>
 800abb2:	2b16      	cmp	r3, #22
 800abb4:	d101      	bne.n	800abba <__sflush_r+0xb2>
 800abb6:	602f      	str	r7, [r5, #0]
 800abb8:	e7b2      	b.n	800ab20 <__sflush_r+0x18>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7ae      	b.n	800ab22 <__sflush_r+0x1a>
 800abc4:	690f      	ldr	r7, [r1, #16]
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	d0aa      	beq.n	800ab20 <__sflush_r+0x18>
 800abca:	0793      	lsls	r3, r2, #30
 800abcc:	bf18      	it	ne
 800abce:	2300      	movne	r3, #0
 800abd0:	680e      	ldr	r6, [r1, #0]
 800abd2:	bf08      	it	eq
 800abd4:	694b      	ldreq	r3, [r1, #20]
 800abd6:	1bf6      	subs	r6, r6, r7
 800abd8:	600f      	str	r7, [r1, #0]
 800abda:	608b      	str	r3, [r1, #8]
 800abdc:	2e00      	cmp	r6, #0
 800abde:	dd9f      	ble.n	800ab20 <__sflush_r+0x18>
 800abe0:	4633      	mov	r3, r6
 800abe2:	463a      	mov	r2, r7
 800abe4:	4628      	mov	r0, r5
 800abe6:	6a21      	ldr	r1, [r4, #32]
 800abe8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800abec:	47e0      	blx	ip
 800abee:	2800      	cmp	r0, #0
 800abf0:	dc06      	bgt.n	800ac00 <__sflush_r+0xf8>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e790      	b.n	800ab22 <__sflush_r+0x1a>
 800ac00:	4407      	add	r7, r0
 800ac02:	1a36      	subs	r6, r6, r0
 800ac04:	e7ea      	b.n	800abdc <__sflush_r+0xd4>
 800ac06:	bf00      	nop
 800ac08:	20400001 	.word	0x20400001

0800ac0c <_fflush_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	690b      	ldr	r3, [r1, #16]
 800ac10:	4605      	mov	r5, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	b913      	cbnz	r3, 800ac1c <_fflush_r+0x10>
 800ac16:	2500      	movs	r5, #0
 800ac18:	4628      	mov	r0, r5
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	b118      	cbz	r0, 800ac26 <_fflush_r+0x1a>
 800ac1e:	6983      	ldr	r3, [r0, #24]
 800ac20:	b90b      	cbnz	r3, 800ac26 <_fflush_r+0x1a>
 800ac22:	f7ff f9d1 	bl	8009fc8 <__sinit>
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <_fflush_r+0x6c>)
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	d11b      	bne.n	800ac64 <_fflush_r+0x58>
 800ac2c:	686c      	ldr	r4, [r5, #4]
 800ac2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0ef      	beq.n	800ac16 <_fflush_r+0xa>
 800ac36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac38:	07d0      	lsls	r0, r2, #31
 800ac3a:	d404      	bmi.n	800ac46 <_fflush_r+0x3a>
 800ac3c:	0599      	lsls	r1, r3, #22
 800ac3e:	d402      	bmi.n	800ac46 <_fflush_r+0x3a>
 800ac40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac42:	f7ff fa5f 	bl	800a104 <__retarget_lock_acquire_recursive>
 800ac46:	4628      	mov	r0, r5
 800ac48:	4621      	mov	r1, r4
 800ac4a:	f7ff ff5d 	bl	800ab08 <__sflush_r>
 800ac4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac50:	4605      	mov	r5, r0
 800ac52:	07da      	lsls	r2, r3, #31
 800ac54:	d4e0      	bmi.n	800ac18 <_fflush_r+0xc>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	059b      	lsls	r3, r3, #22
 800ac5a:	d4dd      	bmi.n	800ac18 <_fflush_r+0xc>
 800ac5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac5e:	f7ff fa52 	bl	800a106 <__retarget_lock_release_recursive>
 800ac62:	e7d9      	b.n	800ac18 <_fflush_r+0xc>
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <_fflush_r+0x70>)
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d101      	bne.n	800ac6e <_fflush_r+0x62>
 800ac6a:	68ac      	ldr	r4, [r5, #8]
 800ac6c:	e7df      	b.n	800ac2e <_fflush_r+0x22>
 800ac6e:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <_fflush_r+0x74>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	bf08      	it	eq
 800ac74:	68ec      	ldreq	r4, [r5, #12]
 800ac76:	e7da      	b.n	800ac2e <_fflush_r+0x22>
 800ac78:	0800af7c 	.word	0x0800af7c
 800ac7c:	0800af9c 	.word	0x0800af9c
 800ac80:	0800af5c 	.word	0x0800af5c

0800ac84 <_lseek_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4d05      	ldr	r5, [pc, #20]	; (800aca4 <_lseek_r+0x20>)
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f6 fbd7 	bl	8001446 <_lseek>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_lseek_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_lseek_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	2000145c 	.word	0x2000145c

0800aca8 <__swhatbuf_r>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	460e      	mov	r6, r1
 800acac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb0:	4614      	mov	r4, r2
 800acb2:	2900      	cmp	r1, #0
 800acb4:	461d      	mov	r5, r3
 800acb6:	b096      	sub	sp, #88	; 0x58
 800acb8:	da08      	bge.n	800accc <__swhatbuf_r+0x24>
 800acba:	2200      	movs	r2, #0
 800acbc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	061a      	lsls	r2, r3, #24
 800acc4:	d410      	bmi.n	800ace8 <__swhatbuf_r+0x40>
 800acc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acca:	e00e      	b.n	800acea <__swhatbuf_r+0x42>
 800accc:	466a      	mov	r2, sp
 800acce:	f000 f8c5 	bl	800ae5c <_fstat_r>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	dbf1      	blt.n	800acba <__swhatbuf_r+0x12>
 800acd6:	9a01      	ldr	r2, [sp, #4]
 800acd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ace0:	425a      	negs	r2, r3
 800ace2:	415a      	adcs	r2, r3
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	e7ee      	b.n	800acc6 <__swhatbuf_r+0x1e>
 800ace8:	2340      	movs	r3, #64	; 0x40
 800acea:	2000      	movs	r0, #0
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	b016      	add	sp, #88	; 0x58
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acf4 <__smakebuf_r>:
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acf8:	079d      	lsls	r5, r3, #30
 800acfa:	4606      	mov	r6, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	d507      	bpl.n	800ad10 <__smakebuf_r+0x1c>
 800ad00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	6163      	str	r3, [r4, #20]
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	466a      	mov	r2, sp
 800ad12:	ab01      	add	r3, sp, #4
 800ad14:	f7ff ffc8 	bl	800aca8 <__swhatbuf_r>
 800ad18:	9900      	ldr	r1, [sp, #0]
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7ff fa13 	bl	800a148 <_malloc_r>
 800ad22:	b948      	cbnz	r0, 800ad38 <__smakebuf_r+0x44>
 800ad24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d4ef      	bmi.n	800ad0c <__smakebuf_r+0x18>
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	f043 0302 	orr.w	r3, r3, #2
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7e3      	b.n	800ad00 <__smakebuf_r+0xc>
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <__smakebuf_r+0x7c>)
 800ad3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	6120      	str	r0, [r4, #16]
 800ad4a:	6163      	str	r3, [r4, #20]
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	b15b      	cbz	r3, 800ad68 <__smakebuf_r+0x74>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad56:	f000 f893 	bl	800ae80 <_isatty_r>
 800ad5a:	b128      	cbz	r0, 800ad68 <__smakebuf_r+0x74>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	89a0      	ldrh	r0, [r4, #12]
 800ad6a:	4305      	orrs	r5, r0
 800ad6c:	81a5      	strh	r5, [r4, #12]
 800ad6e:	e7cd      	b.n	800ad0c <__smakebuf_r+0x18>
 800ad70:	08009f61 	.word	0x08009f61

0800ad74 <memchr>:
 800ad74:	4603      	mov	r3, r0
 800ad76:	b510      	push	{r4, lr}
 800ad78:	b2c9      	uxtb	r1, r1
 800ad7a:	4402      	add	r2, r0
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	d101      	bne.n	800ad86 <memchr+0x12>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e003      	b.n	800ad8e <memchr+0x1a>
 800ad86:	7804      	ldrb	r4, [r0, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	428c      	cmp	r4, r1
 800ad8c:	d1f6      	bne.n	800ad7c <memchr+0x8>
 800ad8e:	bd10      	pop	{r4, pc}

0800ad90 <__malloc_lock>:
 800ad90:	4801      	ldr	r0, [pc, #4]	; (800ad98 <__malloc_lock+0x8>)
 800ad92:	f7ff b9b7 	b.w	800a104 <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	20001451 	.word	0x20001451

0800ad9c <__malloc_unlock>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__malloc_unlock+0x8>)
 800ad9e:	f7ff b9b2 	b.w	800a106 <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	20001451 	.word	0x20001451

0800ada8 <_free_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4605      	mov	r5, r0
 800adac:	2900      	cmp	r1, #0
 800adae:	d040      	beq.n	800ae32 <_free_r+0x8a>
 800adb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb4:	1f0c      	subs	r4, r1, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bfb8      	it	lt
 800adba:	18e4      	addlt	r4, r4, r3
 800adbc:	f7ff ffe8 	bl	800ad90 <__malloc_lock>
 800adc0:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <_free_r+0x8c>)
 800adc2:	6813      	ldr	r3, [r2, #0]
 800adc4:	b933      	cbnz	r3, 800add4 <_free_r+0x2c>
 800adc6:	6063      	str	r3, [r4, #4]
 800adc8:	6014      	str	r4, [r2, #0]
 800adca:	4628      	mov	r0, r5
 800adcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add0:	f7ff bfe4 	b.w	800ad9c <__malloc_unlock>
 800add4:	42a3      	cmp	r3, r4
 800add6:	d908      	bls.n	800adea <_free_r+0x42>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	1821      	adds	r1, r4, r0
 800addc:	428b      	cmp	r3, r1
 800adde:	bf01      	itttt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	1809      	addeq	r1, r1, r0
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	e7ed      	b.n	800adc6 <_free_r+0x1e>
 800adea:	461a      	mov	r2, r3
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	b10b      	cbz	r3, 800adf4 <_free_r+0x4c>
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	d9fa      	bls.n	800adea <_free_r+0x42>
 800adf4:	6811      	ldr	r1, [r2, #0]
 800adf6:	1850      	adds	r0, r2, r1
 800adf8:	42a0      	cmp	r0, r4
 800adfa:	d10b      	bne.n	800ae14 <_free_r+0x6c>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	4401      	add	r1, r0
 800ae00:	1850      	adds	r0, r2, r1
 800ae02:	4283      	cmp	r3, r0
 800ae04:	6011      	str	r1, [r2, #0]
 800ae06:	d1e0      	bne.n	800adca <_free_r+0x22>
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4401      	add	r1, r0
 800ae0e:	6011      	str	r1, [r2, #0]
 800ae10:	6053      	str	r3, [r2, #4]
 800ae12:	e7da      	b.n	800adca <_free_r+0x22>
 800ae14:	d902      	bls.n	800ae1c <_free_r+0x74>
 800ae16:	230c      	movs	r3, #12
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	e7d6      	b.n	800adca <_free_r+0x22>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	1821      	adds	r1, r4, r0
 800ae20:	428b      	cmp	r3, r1
 800ae22:	bf01      	itttt	eq
 800ae24:	6819      	ldreq	r1, [r3, #0]
 800ae26:	685b      	ldreq	r3, [r3, #4]
 800ae28:	1809      	addeq	r1, r1, r0
 800ae2a:	6021      	streq	r1, [r4, #0]
 800ae2c:	6063      	str	r3, [r4, #4]
 800ae2e:	6054      	str	r4, [r2, #4]
 800ae30:	e7cb      	b.n	800adca <_free_r+0x22>
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	20001454 	.word	0x20001454

0800ae38 <_read_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	2200      	movs	r2, #0
 800ae42:	4d05      	ldr	r5, [pc, #20]	; (800ae58 <_read_r+0x20>)
 800ae44:	602a      	str	r2, [r5, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f7f6 faa0 	bl	800138c <_read>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_read_r+0x1e>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_read_r+0x1e>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	2000145c 	.word	0x2000145c

0800ae5c <_fstat_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	2300      	movs	r3, #0
 800ae60:	4d06      	ldr	r5, [pc, #24]	; (800ae7c <_fstat_r+0x20>)
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	4611      	mov	r1, r2
 800ae68:	602b      	str	r3, [r5, #0]
 800ae6a:	f7f6 fad3 	bl	8001414 <_fstat>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d102      	bne.n	800ae78 <_fstat_r+0x1c>
 800ae72:	682b      	ldr	r3, [r5, #0]
 800ae74:	b103      	cbz	r3, 800ae78 <_fstat_r+0x1c>
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	bd38      	pop	{r3, r4, r5, pc}
 800ae7a:	bf00      	nop
 800ae7c:	2000145c 	.word	0x2000145c

0800ae80 <_isatty_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	2300      	movs	r3, #0
 800ae84:	4d05      	ldr	r5, [pc, #20]	; (800ae9c <_isatty_r+0x1c>)
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f6 fad1 	bl	8001432 <_isatty>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_isatty_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_isatty_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	2000145c 	.word	0x2000145c

0800aea0 <_init>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

0800aeac <_fini>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	bf00      	nop
 800aeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb2:	bc08      	pop	{r3}
 800aeb4:	469e      	mov	lr, r3
 800aeb6:	4770      	bx	lr
